{"ast":null,"code":"/**\n * Servicio centralizado para las llamadas a la API\n * Este archivo maneja todas las interacciones con el backend\n */\nimport axios from 'axios';\nimport { API_BASE_URL, API_PREFIX, API_TIMEOUT, API_ROUTES } from '../config/config';\nimport { auth } from '../utils/firebase';\n\n// Crear una instancia de axios con configuración predeterminada\nconst apiClient = axios.create({\n  baseURL: `${API_BASE_URL}${API_PREFIX}`,\n  timeout: API_TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false // Cambiar a true si necesitas enviar cookies\n});\n\n// Log para depuración\nconsole.log('API client configurado con URL base:', `${API_BASE_URL}${API_PREFIX}`);\n\n/**\n * Agrega el token de autenticación al header\n * @returns {Promise<string>} El token de autenticación\n */\nconst getAuthToken = async () => {\n  const currentUser = auth.currentUser;\n  if (!currentUser) {\n    return null;\n  }\n  return await currentUser.getIdToken();\n};\n\n/**\n * Realizar una petición GET autenticada\n * @param {string} url - URL relativa para la petición\n * @param {Object} params - Parámetros de consulta (query params)\n * @param {boolean} requireAuth - Si la petición requiere autenticación\n * @returns {Promise<Object>} - Respuesta de la API\n */\nexport const get = async (url, params = {}, requireAuth = true) => {\n  try {\n    const headers = {};\n    if (requireAuth) {\n      const token = await getAuthToken();\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    }\n    console.log(`Realizando GET a ${url}`, {\n      params\n    });\n    const response = await apiClient.get(url, {\n      params,\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n/**\n * Realizar una petición POST autenticada\n * @param {string} url - URL relativa para la petición\n * @param {Object} data - Datos a enviar en el cuerpo de la petición\n * @param {boolean} requireAuth - Si la petición requiere autenticación\n * @returns {Promise<Object>} - Respuesta de la API\n */\nexport const post = async (url, data = {}, requireAuth = true) => {\n  try {\n    const headers = {};\n    if (requireAuth) {\n      const token = await getAuthToken();\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    }\n    console.log(`Realizando POST a ${url}`, {\n      data\n    });\n    const response = await apiClient.post(url, data, {\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n/**\n * Realizar una petición PUT autenticada\n * @param {string} url - URL relativa para la petición\n * @param {Object} data - Datos a enviar en el cuerpo de la petición\n * @param {boolean} requireAuth - Si la petición requiere autenticación\n * @returns {Promise<Object>} - Respuesta de la API\n */\nexport const put = async (url, data = {}, requireAuth = true) => {\n  try {\n    const headers = {};\n    if (requireAuth) {\n      const token = await getAuthToken();\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    }\n    const response = await apiClient.put(url, data, {\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n/**\n * Realizar una petición DELETE autenticada\n * @param {string} url - URL relativa para la petición\n * @param {boolean} requireAuth - Si la petición requiere autenticación\n * @returns {Promise<Object>} - Respuesta de la API\n */\nexport const remove = async (url, requireAuth = true) => {\n  try {\n    const headers = {};\n    if (requireAuth) {\n      const token = await getAuthToken();\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    }\n    const response = await apiClient.delete(url, {\n      headers\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n/**\n * Maneja los errores de la API de manera centralizada\n * @param {Error} error - Error de la petición\n */\nconst handleApiError = error => {\n  // Log detallado del error para debugging\n  console.error('Error en la petición a la API:', {\n    message: error.message,\n    response: error.response ? {\n      status: error.response.status,\n      data: error.response.data\n    } : 'Sin respuesta del servidor',\n    request: error.request ? 'La petición se realizó pero no se recibió respuesta' : 'No se pudo realizar la petición'\n  });\n\n  // Aquí puedes implementar lógica adicional, como mostrar notificaciones,\n  // redirigir al usuario a la página de login si hay un error de autenticación, etc.\n};\n\n/**\n * Servicios específicos para diferentes entidades\n */\nexport const SurveyService = {\n  // Obtener todas las encuestas del usuario actual\n  getAllSurveys: () => get(API_ROUTES.SURVEYS),\n  // Obtener encuestas públicas\n  getPublicSurveys: () => get(API_ROUTES.PUBLIC_SURVEYS, {}, false),\n  // Obtener una encuesta específica\n  getSurvey: id => get(API_ROUTES.SURVEY_DETAIL(id)),\n  // Obtener una encuesta pública específica\n  getPublicSurvey: id => get(API_ROUTES.PUBLIC_SURVEY_DETAIL(id), {}, false),\n  // Crear una nueva encuesta\n  createSurvey: surveyData => post(API_ROUTES.SURVEYS, surveyData),\n  // Actualizar una encuesta existente\n  updateSurvey: (id, surveyData) => put(API_ROUTES.SURVEY_DETAIL(id), surveyData),\n  // Eliminar una encuesta\n  deleteSurvey: id => remove(API_ROUTES.SURVEY_DETAIL(id))\n};\nexport const ResponseService = {\n  // Obtener todas las respuestas\n  getAllResponses: () => get(API_ROUTES.RESPONSES),\n  // Obtener una respuesta específica\n  getResponse: id => get(API_ROUTES.RESPONSE_DETAIL(id)),\n  // Enviar una nueva respuesta (no requiere autenticación)\n  submitResponse: responseData => post(API_ROUTES.RESPONSES, responseData, false)\n};\nexport const UserService = {\n  // Obtener el perfil del usuario actual\n  getUserProfile: () => get(API_ROUTES.USER_PROFILE),\n  // Actualizar el perfil del usuario\n  updateUserProfile: profileData => put(API_ROUTES.USER_PROFILE, profileData),\n  // Crear un nuevo usuario o actualizar uno existente\n  createUser: userData => post(API_ROUTES.USERS, userData, true)\n};\n\n// Exportar los servicios y funciones básicas\nexport default {\n  get,\n  post,\n  put,\n  remove,\n  SurveyService,\n  ResponseService,\n  UserService\n};","map":{"version":3,"names":["axios","API_BASE_URL","API_PREFIX","API_TIMEOUT","API_ROUTES","auth","apiClient","create","baseURL","timeout","headers","withCredentials","console","log","getAuthToken","currentUser","getIdToken","get","url","params","requireAuth","token","response","data","error","handleApiError","post","put","remove","delete","message","status","request","SurveyService","getAllSurveys","SURVEYS","getPublicSurveys","PUBLIC_SURVEYS","getSurvey","id","SURVEY_DETAIL","getPublicSurvey","PUBLIC_SURVEY_DETAIL","createSurvey","surveyData","updateSurvey","deleteSurvey","ResponseService","getAllResponses","RESPONSES","getResponse","RESPONSE_DETAIL","submitResponse","responseData","UserService","getUserProfile","USER_PROFILE","updateUserProfile","profileData","createUser","userData","USERS"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/services/apiService.js"],"sourcesContent":["/**\n * Servicio centralizado para las llamadas a la API\n * Este archivo maneja todas las interacciones con el backend\n */\nimport axios from 'axios';\nimport { API_BASE_URL, API_PREFIX, API_TIMEOUT, API_ROUTES } from '../config/config';\nimport { auth } from '../utils/firebase';\n\n// Crear una instancia de axios con configuración predeterminada\nconst apiClient = axios.create({\n  baseURL: `${API_BASE_URL}${API_PREFIX}`,\n  timeout: API_TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false // Cambiar a true si necesitas enviar cookies\n});\n\n// Log para depuración\nconsole.log('API client configurado con URL base:', `${API_BASE_URL}${API_PREFIX}`);\n\n/**\n * Agrega el token de autenticación al header\n * @returns {Promise<string>} El token de autenticación\n */\nconst getAuthToken = async () => {\n  const currentUser = auth.currentUser;\n  if (!currentUser) {\n    return null;\n  }\n  return await currentUser.getIdToken();\n};\n\n/**\n * Realizar una petición GET autenticada\n * @param {string} url - URL relativa para la petición\n * @param {Object} params - Parámetros de consulta (query params)\n * @param {boolean} requireAuth - Si la petición requiere autenticación\n * @returns {Promise<Object>} - Respuesta de la API\n */\nexport const get = async (url, params = {}, requireAuth = true) => {\n  try {\n    const headers = {};\n    if (requireAuth) {\n      const token = await getAuthToken();\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    }\n    \n    console.log(`Realizando GET a ${url}`, { params });\n    const response = await apiClient.get(url, { params, headers });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n/**\n * Realizar una petición POST autenticada\n * @param {string} url - URL relativa para la petición\n * @param {Object} data - Datos a enviar en el cuerpo de la petición\n * @param {boolean} requireAuth - Si la petición requiere autenticación\n * @returns {Promise<Object>} - Respuesta de la API\n */\nexport const post = async (url, data = {}, requireAuth = true) => {\n  try {\n    const headers = {};\n    if (requireAuth) {\n      const token = await getAuthToken();\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    }\n    \n    console.log(`Realizando POST a ${url}`, { data });\n    const response = await apiClient.post(url, data, { headers });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n/**\n * Realizar una petición PUT autenticada\n * @param {string} url - URL relativa para la petición\n * @param {Object} data - Datos a enviar en el cuerpo de la petición\n * @param {boolean} requireAuth - Si la petición requiere autenticación\n * @returns {Promise<Object>} - Respuesta de la API\n */\nexport const put = async (url, data = {}, requireAuth = true) => {\n  try {\n    const headers = {};\n    if (requireAuth) {\n      const token = await getAuthToken();\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    }\n    \n    const response = await apiClient.put(url, data, { headers });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n/**\n * Realizar una petición DELETE autenticada\n * @param {string} url - URL relativa para la petición\n * @param {boolean} requireAuth - Si la petición requiere autenticación\n * @returns {Promise<Object>} - Respuesta de la API\n */\nexport const remove = async (url, requireAuth = true) => {\n  try {\n    const headers = {};\n    if (requireAuth) {\n      const token = await getAuthToken();\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    }\n    \n    const response = await apiClient.delete(url, { headers });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n/**\n * Maneja los errores de la API de manera centralizada\n * @param {Error} error - Error de la petición\n */\nconst handleApiError = (error) => {\n  // Log detallado del error para debugging\n  console.error('Error en la petición a la API:', {\n    message: error.message,\n    response: error.response ? {\n      status: error.response.status,\n      data: error.response.data\n    } : 'Sin respuesta del servidor',\n    request: error.request ? 'La petición se realizó pero no se recibió respuesta' : 'No se pudo realizar la petición'\n  });\n  \n  // Aquí puedes implementar lógica adicional, como mostrar notificaciones,\n  // redirigir al usuario a la página de login si hay un error de autenticación, etc.\n};\n\n/**\n * Servicios específicos para diferentes entidades\n */\nexport const SurveyService = {\n  // Obtener todas las encuestas del usuario actual\n  getAllSurveys: () => get(API_ROUTES.SURVEYS),\n  \n  // Obtener encuestas públicas\n  getPublicSurveys: () => get(API_ROUTES.PUBLIC_SURVEYS, {}, false),\n  \n  // Obtener una encuesta específica\n  getSurvey: (id) => get(API_ROUTES.SURVEY_DETAIL(id)),\n  \n  // Obtener una encuesta pública específica\n  getPublicSurvey: (id) => get(API_ROUTES.PUBLIC_SURVEY_DETAIL(id), {}, false),\n  \n  // Crear una nueva encuesta\n  createSurvey: (surveyData) => post(API_ROUTES.SURVEYS, surveyData),\n  \n  // Actualizar una encuesta existente\n  updateSurvey: (id, surveyData) => put(API_ROUTES.SURVEY_DETAIL(id), surveyData),\n  \n  // Eliminar una encuesta\n  deleteSurvey: (id) => remove(API_ROUTES.SURVEY_DETAIL(id))\n};\n\nexport const ResponseService = {\n  // Obtener todas las respuestas\n  getAllResponses: () => get(API_ROUTES.RESPONSES),\n  \n  // Obtener una respuesta específica\n  getResponse: (id) => get(API_ROUTES.RESPONSE_DETAIL(id)),\n  \n  // Enviar una nueva respuesta (no requiere autenticación)\n  submitResponse: (responseData) => post(API_ROUTES.RESPONSES, responseData, false)\n};\n\nexport const UserService = {\n  // Obtener el perfil del usuario actual\n  getUserProfile: () => get(API_ROUTES.USER_PROFILE),\n  \n  // Actualizar el perfil del usuario\n  updateUserProfile: (profileData) => put(API_ROUTES.USER_PROFILE, profileData),\n  \n  // Crear un nuevo usuario o actualizar uno existente\n  createUser: (userData) => post(API_ROUTES.USERS, userData, true)\n};\n\n// Exportar los servicios y funciones básicas\nexport default {\n  get,\n  post,\n  put,\n  remove,\n  SurveyService,\n  ResponseService,\n  UserService\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}