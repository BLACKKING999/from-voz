{"ast":null,"code":"/**\n * Servicio de síntesis de voz optimizado para navegadores\n * Implementa técnicas avanzadas para mejorar la confiabilidad de la API de Speech Synthesis\n * Con manejo mejorado de interacciones naturales y tiempos de espera\n */\n\n// Variables para mantener estado y control\nlet cachedVoices = null;\nlet _isSpeakingNow = false;\nlet currentUtterance = null;\nlet resumeInterval = null;\nlet utteranceTimeoutId = null;\n\n/**\n * Obtiene todas las voces disponibles en el navegador\n */\nconst getVoices = () => {\n  if (cachedVoices) return cachedVoices;\n  return window.speechSynthesis ? window.speechSynthesis.getVoices() : [];\n};\n\n/**\n * Inicializa el sistema de síntesis y precarga las voces\n * Esto debe llamarse al inicio de la aplicación\n */\nconst initSpeechSystem = () => {\n  // Verificar si la API está disponible\n  if (typeof window === 'undefined' || !window.speechSynthesis) {\n    console.error('Speech Synthesis no está disponible en este navegador');\n    return false;\n  }\n\n  // Obtener y cachear las voces disponibles\n  const loadVoices = () => {\n    const voices = window.speechSynthesis.getVoices();\n    if (voices.length > 0) {\n      cachedVoices = voices;\n\n      // Log información sobre las voces disponibles\n      console.log(`AudioService: ${voices.length} voces disponibles`);\n\n      // Buscar voces en español\n      const spanishVoices = voices.filter(v => v.lang.includes('es') || v.name.toLowerCase().includes('spanish'));\n      if (spanishVoices.length > 0) {\n        console.log('AudioService: Voces en español disponibles:', spanishVoices.map(v => `${v.name} (${v.lang})`).join(', '));\n      } else {\n        console.warn('AudioService: No se encontraron voces en español');\n      }\n    }\n  };\n\n  // Chrome requiere este evento\n  if (window.speechSynthesis.onvoiceschanged !== undefined) {\n    window.speechSynthesis.onvoiceschanged = loadVoices;\n  }\n\n  // Intentar cargar las voces inmediatamente también\n  loadVoices();\n  return true;\n};\n\n/**\n * Verifica si el sistema está actualmente hablando\n */\nconst checkIfSpeaking = () => {\n  return window.speechSynthesis && window.speechSynthesis.speaking;\n};\n\n/**\n * Detiene cualquier síntesis de voz en curso\n */\nconst cancelSpeech = () => {\n  if (!window.speechSynthesis) return;\n\n  // Cancelar cualquier síntesis en curso\n  window.speechSynthesis.cancel();\n\n  // Limpiar temporizadores\n  if (resumeInterval) {\n    clearInterval(resumeInterval);\n    resumeInterval = null;\n  }\n  if (utteranceTimeoutId) {\n    clearTimeout(utteranceTimeoutId);\n    utteranceTimeoutId = null;\n  }\n  _isSpeakingNow = false;\n  currentUtterance = null;\n};\n\n/**\n * Habla el texto dado usando técnicas avanzadas para mejorar la confiabilidad\n * Incluye manejo de tiempos naturales entre frases\n */\nconst speakText = (text, onStarted, onEnded, onError) => {\n  if (!text || text.trim() === '') {\n    if (onError) onError('Texto vacío');\n    return () => {};\n  }\n  if (typeof window === 'undefined' || !window.speechSynthesis) {\n    if (onError) onError('Speech Synthesis no está disponible en este navegador');\n    return () => {};\n  }\n\n  // Si ya estamos hablando, crear una cola temporal\n  if (_isSpeakingNow) {\n    console.log('AudioService: Ya estamos hablando, esperando...');\n    // Cancelamos la síntesis actual y esperamos un momento antes de comenzar la nueva\n    cancelSpeech();\n\n    // Esperar 500ms para asegurar que termine la síntesis anterior\n    setTimeout(() => {\n      speakText(text, onStarted, onEnded, onError);\n    }, 500);\n    return () => {};\n  }\n  try {\n    // Marcar que estamos hablando ahora\n    _isSpeakingNow = true;\n\n    // Cancelar cualquier síntesis previa (doble verificación)\n    window.speechSynthesis.cancel();\n\n    // Asegurarse de que no haya síntesis en curso\n    this.stopSpeaking();\n\n    // Esperar un momento para asegurar que la cancelación previa sea efectiva\n    setTimeout(() => {\n      this._doSpeak(text, onStarted, onEnded, onError);\n    }, 100);\n    return () => {\n      this.stopSpeaking();\n    };\n  } catch (error) {\n    console.error('AudioService: Error general:', error);\n    if (onError) onError(error.message || 'Error desconocido');\n    return () => {};\n  }\n};\nconst stopSpeaking = () => {\n  if (window.speechSynthesis) {\n    window.speechSynthesis.cancel();\n\n    // Limpiar cualquier intervalo o timeout pendiente\n    if (this.resumeInterval) {\n      clearInterval(this.resumeInterval);\n      this.resumeInterval = null;\n    }\n    if (this.utteranceTimeoutId) {\n      clearTimeout(this.utteranceTimeoutId);\n      this.utteranceTimeoutId = null;\n    }\n  }\n};\nconst _doSpeak = (text, onStarted, onEnded, onError) => {\n  try {\n    // Cancelar cualquier síntesis en curso (doble verificación)\n    window.speechSynthesis.cancel();\n\n    // Crear el objeto de síntesis\n    const utterance = new SpeechSynthesisUtterance(text);\n\n    // Configurar parámetros básicos\n    utterance.lang = 'es-ES';\n    utterance.rate = 1.0; // Velocidad normal\n    utterance.pitch = 1.0; // Tono normal\n    utterance.volume = 1.0; // Volumen máximo\n\n    // Obtener voces y seleccionar una voz en español si está disponible\n    const voices = getVoices();\n    const spanishVoice = voices.find(voice => voice.lang.includes('es') || voice.name.toLowerCase().includes('spanish'));\n    if (spanishVoice) {\n      console.log(`AudioService: Usando voz ${spanishVoice.name}`);\n      utterance.voice = spanishVoice;\n    } else if (voices.length > 0) {\n      console.log(`AudioService: No hay voces en español, usando ${voices[0].name}`);\n      utterance.voice = voices[0];\n    }\n\n    // Configurar eventos\n    utterance.onstart = () => {\n      console.log('AudioService: Síntesis iniciada');\n      if (onStarted) onStarted();\n    };\n    utterance.onend = () => {\n      console.log('AudioService: Síntesis completada');\n      if (onEnded) onEnded();\n    };\n    utterance.onerror = event => {\n      console.error('AudioService: Error en síntesis:', event);\n      if (onError) onError(event.error || 'Error desconocido');\n    };\n\n    // Iniciar síntesis\n    window.speechSynthesis.speak(utterance);\n\n    // *** WORKAROUNDS CRÍTICOS ***\n\n    // 1. Workaround para el problema de Chrome donde la síntesis se detiene después de ~15s\n    this.resumeInterval = setInterval(() => {\n      if (window.speechSynthesis.speaking) {\n        console.log('AudioService: Aplicando workaround de pausa/resume');\n        window.speechSynthesis.pause();\n        window.speechSynthesis.resume();\n      } else {\n        clearInterval(this.resumeInterval);\n        this.resumeInterval = null;\n      }\n    }, 10000);\n\n    // 2. Workaround para el caso donde onend no se dispara\n    // Aumentar el tiempo basado en la longitud del texto para frases más largas\n    const maxSpeakingTime = Math.max(6000, text.length * 100); // ~100ms por caracter\n    this.utteranceTimeoutId = setTimeout(() => {\n      if (window.speechSynthesis.speaking) {\n        console.log(`AudioService: Detectado posible bloqueo después de ${maxSpeakingTime}ms, forzando finalización`);\n        window.speechSynthesis.cancel();\n        if (onEnded) onEnded();\n      }\n      if (this.resumeInterval) {\n        clearInterval(this.resumeInterval);\n        this.resumeInterval = null;\n      }\n    }, maxSpeakingTime);\n  } catch (error) {\n    console.error('AudioService: Error en síntesis:', error);\n    if (onError) onError(error.message || 'Error desconocido');\n  }\n};\n\n/**\n * Servicio para manejar la funcionalidad de reconocimiento de voz\n */\n\nclass AudioService {\n  constructor() {\n    this.recognition = null;\n    this.isSupported = typeof window !== 'undefined' && ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window);\n    this.isListening = false;\n    this.transcript = '';\n    this.onResultCallback = null;\n    this.onEndCallback = null;\n    this.onErrorCallback = null;\n    this.permissionGranted = false;\n    this.permissionCallback = null;\n  }\n\n  /**\n   * Inicializa el reconocimiento de voz\n   * @param {string} language - Idioma para el reconocimiento (por defecto es español)\n   */\n  init(language = 'es-ES') {\n    if (!this.isSupported) {\n      console.error('El reconocimiento de voz no está soportado en este navegador');\n      return false;\n    }\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    this.recognition = new SpeechRecognition();\n\n    // Configurar opciones\n    this.recognition.lang = language;\n    this.recognition.continuous = false;\n    this.recognition.interimResults = true;\n\n    // Configurar eventos\n    this.recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('');\n      this.transcript = transcript;\n      if (this.onResultCallback) {\n        this.onResultCallback(transcript, event.results[0].isFinal);\n      }\n    };\n    this.recognition.onend = () => {\n      this.isListening = false;\n      if (this.onEndCallback) {\n        this.onEndCallback(this.transcript);\n      }\n    };\n    this.recognition.onerror = event => {\n      this.isListening = false;\n      if (this.onErrorCallback) {\n        this.onErrorCallback(event.error);\n      }\n    };\n    return true;\n  }\n\n  /**\n   * Solicita permiso para usar el micrófono\n   * @returns {Promise<boolean>} - Promise que resuelve a true si se otorgó permiso, false en caso contrario\n   */\n  async requestMicrophonePermission() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      try {\n        // Solicitar acceso al micrófono\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        // Almacenar la referencia al stream para poder detenerlo después\n        this.microphoneStream = stream;\n        this.permissionGranted = true;\n\n        // Notificar que el permiso fue concedido si hay un callback\n        if (this.permissionCallback) {\n          this.permissionCallback(true);\n        }\n        return true;\n      } catch (error) {\n        console.error('Error al solicitar permiso para el micrófono:', error);\n        this.permissionGranted = false;\n        // Notificar que el permiso fue denegado si hay un callback\n        if (this.permissionCallback) {\n          this.permissionCallback(false, error.message);\n        }\n        return false;\n      }\n    } else {\n      console.error('getUserMedia no está soportado en este navegador');\n      return false;\n    }\n  }\n\n  /**\n   * Establece el callback para cuando cambia el estado del permiso del micrófono\n   * @param {Function} callback - Función a llamar cuando cambia el estado del permiso\n   */\n  onPermissionChange(callback) {\n    this.permissionCallback = callback;\n  }\n\n  /**\n   * Inicia el reconocimiento de voz, solicitando permisos si es necesario\n   * @returns {Promise<boolean>} - Promise que resuelve a true si se inició correctamente\n   */\n  async start() {\n    // Verificar y solicitar permiso si no ha sido otorgado\n    if (!this.permissionGranted) {\n      const permissionGranted = await this.requestMicrophonePermission();\n      if (!permissionGranted) {\n        if (this.onErrorCallback) {\n          this.onErrorCallback('No se otorgó permiso para usar el micrófono');\n        }\n        return false;\n      }\n    }\n    if (!this.recognition) {\n      const initialized = this.init();\n      if (!initialized) return false;\n    }\n    try {\n      this.recognition.start();\n      this.isListening = true;\n      return true;\n    } catch (error) {\n      console.error('Error al iniciar el reconocimiento de voz:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Detiene el reconocimiento de voz\n   */\n  stop() {\n    if (this.recognition && this.isListening) {\n      try {\n        this.recognition.stop();\n        this.isListening = false;\n\n        // También detener el stream del micrófono si existe\n        if (this.microphoneStream) {\n          this.microphoneStream.getTracks().forEach(track => track.stop());\n        }\n        return true;\n      } catch (error) {\n        console.error('Error al detener el reconocimiento de voz:', error);\n        return false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Establece el callback para cuando se recibe un resultado\n   * @param {Function} callback - Función a llamar con el resultado\n   */\n  onResult(callback) {\n    this.onResultCallback = callback;\n  }\n\n  /**\n   * Establece el callback para cuando termina el reconocimiento\n   * @param {Function} callback - Función a llamar al terminar\n   */\n  onEnd(callback) {\n    this.onEndCallback = callback;\n  }\n\n  /**\n   * Establece el callback para cuando ocurre un error\n   * @param {Function} callback - Función a llamar en caso de error\n   */\n  onError(callback) {\n    this.onErrorCallback = callback;\n  }\n\n  /**\n   * Verifica si el navegador soporta reconocimiento de voz\n   * @returns {boolean} - true si es soportado, false si no\n   */\n  isSupportedByBrowser() {\n    return this.isSupported;\n  }\n\n  /**\n   * Inicializa el sistema de síntesis de voz\n   */\n  initSpeechSystem() {\n    return initSpeechSystem();\n  }\n\n  /**\n   * Habla un texto usando la síntesis de voz\n   */\n  speakText(text, onStarted, onEnded, onError) {\n    return speakText(text, onStarted, onEnded, onError);\n  }\n}\n\n// Exportar una instancia única del servicio\nconst audioService = new AudioService();\nexport default audioService;","map":{"version":3,"names":["cachedVoices","_isSpeakingNow","currentUtterance","resumeInterval","utteranceTimeoutId","getVoices","window","speechSynthesis","initSpeechSystem","console","error","loadVoices","voices","length","log","spanishVoices","filter","v","lang","includes","name","toLowerCase","map","join","warn","onvoiceschanged","undefined","checkIfSpeaking","speaking","cancelSpeech","cancel","clearInterval","clearTimeout","speakText","text","onStarted","onEnded","onError","trim","setTimeout","stopSpeaking","_doSpeak","message","utterance","SpeechSynthesisUtterance","rate","pitch","volume","spanishVoice","find","voice","onstart","onend","onerror","event","speak","setInterval","pause","resume","maxSpeakingTime","Math","max","AudioService","constructor","recognition","isSupported","isListening","transcript","onResultCallback","onEndCallback","onErrorCallback","permissionGranted","permissionCallback","init","language","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","onresult","Array","from","results","result","isFinal","requestMicrophonePermission","navigator","mediaDevices","getUserMedia","stream","audio","microphoneStream","onPermissionChange","callback","start","initialized","stop","getTracks","forEach","track","onResult","onEnd","isSupportedByBrowser","audioService"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/services/audioService.js"],"sourcesContent":["/**\n * Servicio de síntesis de voz optimizado para navegadores\n * Implementa técnicas avanzadas para mejorar la confiabilidad de la API de Speech Synthesis\n * Con manejo mejorado de interacciones naturales y tiempos de espera\n */\n\n// Variables para mantener estado y control\nlet cachedVoices = null;\nlet _isSpeakingNow = false;\nlet currentUtterance = null;\nlet resumeInterval = null;\nlet utteranceTimeoutId = null;\n\n/**\n * Obtiene todas las voces disponibles en el navegador\n */\nconst getVoices = () => {\n  if (cachedVoices) return cachedVoices;\n  \n  return window.speechSynthesis ? window.speechSynthesis.getVoices() : [];\n};\n\n/**\n * Inicializa el sistema de síntesis y precarga las voces\n * Esto debe llamarse al inicio de la aplicación\n */\nconst initSpeechSystem = () => {\n  // Verificar si la API está disponible\n  if (typeof window === 'undefined' || !window.speechSynthesis) {\n    console.error('Speech Synthesis no está disponible en este navegador');\n    return false;\n  }\n  \n  // Obtener y cachear las voces disponibles\n  const loadVoices = () => {\n    const voices = window.speechSynthesis.getVoices();\n    if (voices.length > 0) {\n      cachedVoices = voices;\n      \n      // Log información sobre las voces disponibles\n      console.log(`AudioService: ${voices.length} voces disponibles`);\n      \n      // Buscar voces en español\n      const spanishVoices = voices.filter(v => \n        v.lang.includes('es') || \n        v.name.toLowerCase().includes('spanish')\n      );\n      \n      if (spanishVoices.length > 0) {\n        console.log('AudioService: Voces en español disponibles:', \n          spanishVoices.map(v => `${v.name} (${v.lang})`).join(', ')\n        );\n      } else {\n        console.warn('AudioService: No se encontraron voces en español');\n      }\n    }\n  };\n  \n  // Chrome requiere este evento\n  if (window.speechSynthesis.onvoiceschanged !== undefined) {\n    window.speechSynthesis.onvoiceschanged = loadVoices;\n  }\n  \n  // Intentar cargar las voces inmediatamente también\n  loadVoices();\n  \n  return true;\n};\n\n/**\n * Verifica si el sistema está actualmente hablando\n */\nconst checkIfSpeaking = () => {\n  return window.speechSynthesis && window.speechSynthesis.speaking;\n};\n\n/**\n * Detiene cualquier síntesis de voz en curso\n */\nconst cancelSpeech = () => {\n  if (!window.speechSynthesis) return;\n  \n  // Cancelar cualquier síntesis en curso\n  window.speechSynthesis.cancel();\n  \n  // Limpiar temporizadores\n  if (resumeInterval) {\n    clearInterval(resumeInterval);\n    resumeInterval = null;\n  }\n  \n  if (utteranceTimeoutId) {\n    clearTimeout(utteranceTimeoutId);\n    utteranceTimeoutId = null;\n  }\n  \n  _isSpeakingNow = false;\n  currentUtterance = null;\n};\n\n/**\n * Habla el texto dado usando técnicas avanzadas para mejorar la confiabilidad\n * Incluye manejo de tiempos naturales entre frases\n */\nconst speakText = (text, onStarted, onEnded, onError) => {\n  if (!text || text.trim() === '') {\n    if (onError) onError('Texto vacío');\n    return () => {};\n  }\n  \n  if (typeof window === 'undefined' || !window.speechSynthesis) {\n    if (onError) onError('Speech Synthesis no está disponible en este navegador');\n    return () => {};\n  }\n  \n  // Si ya estamos hablando, crear una cola temporal\n  if (_isSpeakingNow) {\n    console.log('AudioService: Ya estamos hablando, esperando...');\n    // Cancelamos la síntesis actual y esperamos un momento antes de comenzar la nueva\n    cancelSpeech();\n    \n    // Esperar 500ms para asegurar que termine la síntesis anterior\n    setTimeout(() => {\n      speakText(text, onStarted, onEnded, onError);\n    }, 500);\n    \n    return () => {};\n  }\n  \n  try {\n    // Marcar que estamos hablando ahora\n    _isSpeakingNow = true;\n    \n    // Cancelar cualquier síntesis previa (doble verificación)\n    window.speechSynthesis.cancel();\n    \n    // Asegurarse de que no haya síntesis en curso\n    this.stopSpeaking();\n    \n    // Esperar un momento para asegurar que la cancelación previa sea efectiva\n    setTimeout(() => {\n      this._doSpeak(text, onStarted, onEnded, onError);\n    }, 100);\n    \n    return () => {\n      this.stopSpeaking();\n    };\n  } catch (error) {\n    console.error('AudioService: Error general:', error);\n    if (onError) onError(error.message || 'Error desconocido');\n    return () => {};\n  }\n};\n\nconst stopSpeaking = () => {\n  if (window.speechSynthesis) {\n    window.speechSynthesis.cancel();\n    \n    // Limpiar cualquier intervalo o timeout pendiente\n    if (this.resumeInterval) {\n      clearInterval(this.resumeInterval);\n      this.resumeInterval = null;\n    }\n    \n    if (this.utteranceTimeoutId) {\n      clearTimeout(this.utteranceTimeoutId);\n      this.utteranceTimeoutId = null;\n    }\n  }\n};\n\nconst _doSpeak = (text, onStarted, onEnded, onError) => {\n  try {\n    // Cancelar cualquier síntesis en curso (doble verificación)\n    window.speechSynthesis.cancel();\n    \n    // Crear el objeto de síntesis\n    const utterance = new SpeechSynthesisUtterance(text);\n    \n    // Configurar parámetros básicos\n    utterance.lang = 'es-ES';\n    utterance.rate = 1.0;     // Velocidad normal\n    utterance.pitch = 1.0;    // Tono normal\n    utterance.volume = 1.0;   // Volumen máximo\n    \n    // Obtener voces y seleccionar una voz en español si está disponible\n    const voices = getVoices();\n    const spanishVoice = voices.find(voice => \n      voice.lang.includes('es') || \n      voice.name.toLowerCase().includes('spanish')\n    );\n    \n    if (spanishVoice) {\n      console.log(`AudioService: Usando voz ${spanishVoice.name}`);\n      utterance.voice = spanishVoice;\n    } else if (voices.length > 0) {\n      console.log(`AudioService: No hay voces en español, usando ${voices[0].name}`);\n      utterance.voice = voices[0];\n    }\n    \n    // Configurar eventos\n    utterance.onstart = () => {\n      console.log('AudioService: Síntesis iniciada');\n      if (onStarted) onStarted();\n    };\n    \n    utterance.onend = () => {\n      console.log('AudioService: Síntesis completada');\n      if (onEnded) onEnded();\n    };\n    \n    utterance.onerror = (event) => {\n      console.error('AudioService: Error en síntesis:', event);\n      if (onError) onError(event.error || 'Error desconocido');\n    };\n    \n    // Iniciar síntesis\n    window.speechSynthesis.speak(utterance);\n    \n    // *** WORKAROUNDS CRÍTICOS ***\n    \n    // 1. Workaround para el problema de Chrome donde la síntesis se detiene después de ~15s\n    this.resumeInterval = setInterval(() => {\n      if (window.speechSynthesis.speaking) {\n        console.log('AudioService: Aplicando workaround de pausa/resume');\n        window.speechSynthesis.pause();\n        window.speechSynthesis.resume();\n      } else {\n        clearInterval(this.resumeInterval);\n        this.resumeInterval = null;\n      }\n    }, 10000);\n    \n    // 2. Workaround para el caso donde onend no se dispara\n    // Aumentar el tiempo basado en la longitud del texto para frases más largas\n    const maxSpeakingTime = Math.max(6000, text.length * 100); // ~100ms por caracter\n    this.utteranceTimeoutId = setTimeout(() => {\n      if (window.speechSynthesis.speaking) {\n        console.log(`AudioService: Detectado posible bloqueo después de ${maxSpeakingTime}ms, forzando finalización`);\n        window.speechSynthesis.cancel();\n        if (onEnded) onEnded();\n      }\n      \n      if (this.resumeInterval) {\n        clearInterval(this.resumeInterval);\n        this.resumeInterval = null;\n      }\n    }, maxSpeakingTime);\n    \n  } catch (error) {\n    console.error('AudioService: Error en síntesis:', error);\n    if (onError) onError(error.message || 'Error desconocido');\n  }\n};\n\n/**\n * Servicio para manejar la funcionalidad de reconocimiento de voz\n */\n\nclass AudioService {\n  constructor() {\n    this.recognition = null;\n    this.isSupported = typeof window !== 'undefined' && \n      ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window);\n    this.isListening = false;\n    this.transcript = '';\n    this.onResultCallback = null;\n    this.onEndCallback = null;\n    this.onErrorCallback = null;\n    this.permissionGranted = false;\n    this.permissionCallback = null;\n  }\n\n  /**\n   * Inicializa el reconocimiento de voz\n   * @param {string} language - Idioma para el reconocimiento (por defecto es español)\n   */\n  init(language = 'es-ES') {\n    if (!this.isSupported) {\n      console.error('El reconocimiento de voz no está soportado en este navegador');\n      return false;\n    }\n\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    this.recognition = new SpeechRecognition();\n    \n    // Configurar opciones\n    this.recognition.lang = language;\n    this.recognition.continuous = false;\n    this.recognition.interimResults = true;\n    \n    // Configurar eventos\n    this.recognition.onresult = (event) => {\n      const transcript = Array.from(event.results)\n        .map(result => result[0])\n        .map(result => result.transcript)\n        .join('');\n      \n      this.transcript = transcript;\n      \n      if (this.onResultCallback) {\n        this.onResultCallback(transcript, event.results[0].isFinal);\n      }\n    };\n    \n    this.recognition.onend = () => {\n      this.isListening = false;\n      if (this.onEndCallback) {\n        this.onEndCallback(this.transcript);\n      }\n    };\n    \n    this.recognition.onerror = (event) => {\n      this.isListening = false;\n      if (this.onErrorCallback) {\n        this.onErrorCallback(event.error);\n      }\n    };\n    \n    return true;\n  }\n\n  /**\n   * Solicita permiso para usar el micrófono\n   * @returns {Promise<boolean>} - Promise que resuelve a true si se otorgó permiso, false en caso contrario\n   */\n  async requestMicrophonePermission() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      try {\n        // Solicitar acceso al micrófono\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        // Almacenar la referencia al stream para poder detenerlo después\n        this.microphoneStream = stream;\n        this.permissionGranted = true;\n        \n        // Notificar que el permiso fue concedido si hay un callback\n        if (this.permissionCallback) {\n          this.permissionCallback(true);\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Error al solicitar permiso para el micrófono:', error);\n        \n        this.permissionGranted = false;\n        // Notificar que el permiso fue denegado si hay un callback\n        if (this.permissionCallback) {\n          this.permissionCallback(false, error.message);\n        }\n        \n        return false;\n      }\n    } else {\n      console.error('getUserMedia no está soportado en este navegador');\n      return false;\n    }\n  }\n\n  /**\n   * Establece el callback para cuando cambia el estado del permiso del micrófono\n   * @param {Function} callback - Función a llamar cuando cambia el estado del permiso\n   */\n  onPermissionChange(callback) {\n    this.permissionCallback = callback;\n  }\n\n  /**\n   * Inicia el reconocimiento de voz, solicitando permisos si es necesario\n   * @returns {Promise<boolean>} - Promise que resuelve a true si se inició correctamente\n   */\n  async start() {\n    // Verificar y solicitar permiso si no ha sido otorgado\n    if (!this.permissionGranted) {\n      const permissionGranted = await this.requestMicrophonePermission();\n      if (!permissionGranted) {\n        if (this.onErrorCallback) {\n          this.onErrorCallback('No se otorgó permiso para usar el micrófono');\n        }\n        return false;\n      }\n    }\n    \n    if (!this.recognition) {\n      const initialized = this.init();\n      if (!initialized) return false;\n    }\n    \n    try {\n      this.recognition.start();\n      this.isListening = true;\n      return true;\n    } catch (error) {\n      console.error('Error al iniciar el reconocimiento de voz:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Detiene el reconocimiento de voz\n   */\n  stop() {\n    if (this.recognition && this.isListening) {\n      try {\n        this.recognition.stop();\n        this.isListening = false;\n        \n        // También detener el stream del micrófono si existe\n        if (this.microphoneStream) {\n          this.microphoneStream.getTracks().forEach(track => track.stop());\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Error al detener el reconocimiento de voz:', error);\n        return false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Establece el callback para cuando se recibe un resultado\n   * @param {Function} callback - Función a llamar con el resultado\n   */\n  onResult(callback) {\n    this.onResultCallback = callback;\n  }\n\n  /**\n   * Establece el callback para cuando termina el reconocimiento\n   * @param {Function} callback - Función a llamar al terminar\n   */\n  onEnd(callback) {\n    this.onEndCallback = callback;\n  }\n\n  /**\n   * Establece el callback para cuando ocurre un error\n   * @param {Function} callback - Función a llamar en caso de error\n   */\n  onError(callback) {\n    this.onErrorCallback = callback;\n  }\n\n  /**\n   * Verifica si el navegador soporta reconocimiento de voz\n   * @returns {boolean} - true si es soportado, false si no\n   */\n  isSupportedByBrowser() {\n    return this.isSupported;\n  }\n  \n  /**\n   * Inicializa el sistema de síntesis de voz\n   */\n  initSpeechSystem() {\n    return initSpeechSystem();\n  }\n  \n  /**\n   * Habla un texto usando la síntesis de voz\n   */\n  speakText(text, onStarted, onEnded, onError) {\n    return speakText(text, onStarted, onEnded, onError);\n  }\n}\n\n// Exportar una instancia única del servicio\nconst audioService = new AudioService();\nexport default audioService;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIA,YAAY,GAAG,IAAI;AACvB,IAAIC,cAAc,GAAG,KAAK;AAC1B,IAAIC,gBAAgB,GAAG,IAAI;AAC3B,IAAIC,cAAc,GAAG,IAAI;AACzB,IAAIC,kBAAkB,GAAG,IAAI;;AAE7B;AACA;AACA;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,IAAIL,YAAY,EAAE,OAAOA,YAAY;EAErC,OAAOM,MAAM,CAACC,eAAe,GAAGD,MAAM,CAACC,eAAe,CAACF,SAAS,CAAC,CAAC,GAAG,EAAE;AACzE,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;EAC7B;EACA,IAAI,OAAOF,MAAM,KAAK,WAAW,IAAI,CAACA,MAAM,CAACC,eAAe,EAAE;IAC5DE,OAAO,CAACC,KAAK,CAAC,uDAAuD,CAAC;IACtE,OAAO,KAAK;EACd;;EAEA;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,MAAM,GAAGN,MAAM,CAACC,eAAe,CAACF,SAAS,CAAC,CAAC;IACjD,IAAIO,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;MACrBb,YAAY,GAAGY,MAAM;;MAErB;MACAH,OAAO,CAACK,GAAG,CAAC,iBAAiBF,MAAM,CAACC,MAAM,oBAAoB,CAAC;;MAE/D;MACA,MAAME,aAAa,GAAGH,MAAM,CAACI,MAAM,CAACC,CAAC,IACnCA,CAAC,CAACC,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC,IACrBF,CAAC,CAACG,IAAI,CAACC,WAAW,CAAC,CAAC,CAACF,QAAQ,CAAC,SAAS,CACzC,CAAC;MAED,IAAIJ,aAAa,CAACF,MAAM,GAAG,CAAC,EAAE;QAC5BJ,OAAO,CAACK,GAAG,CAAC,6CAA6C,EACvDC,aAAa,CAACO,GAAG,CAACL,CAAC,IAAI,GAAGA,CAAC,CAACG,IAAI,KAAKH,CAAC,CAACC,IAAI,GAAG,CAAC,CAACK,IAAI,CAAC,IAAI,CAC3D,CAAC;MACH,CAAC,MAAM;QACLd,OAAO,CAACe,IAAI,CAAC,kDAAkD,CAAC;MAClE;IACF;EACF,CAAC;;EAED;EACA,IAAIlB,MAAM,CAACC,eAAe,CAACkB,eAAe,KAAKC,SAAS,EAAE;IACxDpB,MAAM,CAACC,eAAe,CAACkB,eAAe,GAAGd,UAAU;EACrD;;EAEA;EACAA,UAAU,CAAC,CAAC;EAEZ,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA,MAAMgB,eAAe,GAAGA,CAAA,KAAM;EAC5B,OAAOrB,MAAM,CAACC,eAAe,IAAID,MAAM,CAACC,eAAe,CAACqB,QAAQ;AAClE,CAAC;;AAED;AACA;AACA;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,IAAI,CAACvB,MAAM,CAACC,eAAe,EAAE;;EAE7B;EACAD,MAAM,CAACC,eAAe,CAACuB,MAAM,CAAC,CAAC;;EAE/B;EACA,IAAI3B,cAAc,EAAE;IAClB4B,aAAa,CAAC5B,cAAc,CAAC;IAC7BA,cAAc,GAAG,IAAI;EACvB;EAEA,IAAIC,kBAAkB,EAAE;IACtB4B,YAAY,CAAC5B,kBAAkB,CAAC;IAChCA,kBAAkB,GAAG,IAAI;EAC3B;EAEAH,cAAc,GAAG,KAAK;EACtBC,gBAAgB,GAAG,IAAI;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAM+B,SAAS,GAAGA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,KAAK;EACvD,IAAI,CAACH,IAAI,IAAIA,IAAI,CAACI,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC/B,IAAID,OAAO,EAAEA,OAAO,CAAC,aAAa,CAAC;IACnC,OAAO,MAAM,CAAC,CAAC;EACjB;EAEA,IAAI,OAAO/B,MAAM,KAAK,WAAW,IAAI,CAACA,MAAM,CAACC,eAAe,EAAE;IAC5D,IAAI8B,OAAO,EAAEA,OAAO,CAAC,uDAAuD,CAAC;IAC7E,OAAO,MAAM,CAAC,CAAC;EACjB;;EAEA;EACA,IAAIpC,cAAc,EAAE;IAClBQ,OAAO,CAACK,GAAG,CAAC,iDAAiD,CAAC;IAC9D;IACAe,YAAY,CAAC,CAAC;;IAEd;IACAU,UAAU,CAAC,MAAM;MACfN,SAAS,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,CAAC;IAC9C,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAM,CAAC,CAAC;EACjB;EAEA,IAAI;IACF;IACApC,cAAc,GAAG,IAAI;;IAErB;IACAK,MAAM,CAACC,eAAe,CAACuB,MAAM,CAAC,CAAC;;IAE/B;IACA,IAAI,CAACU,YAAY,CAAC,CAAC;;IAEnB;IACAD,UAAU,CAAC,MAAM;MACf,IAAI,CAACE,QAAQ,CAACP,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,CAAC;IAClD,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAM;MACX,IAAI,CAACG,YAAY,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,CAAC,OAAO9B,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,IAAI2B,OAAO,EAAEA,OAAO,CAAC3B,KAAK,CAACgC,OAAO,IAAI,mBAAmB,CAAC;IAC1D,OAAO,MAAM,CAAC,CAAC;EACjB;AACF,CAAC;AAED,MAAMF,YAAY,GAAGA,CAAA,KAAM;EACzB,IAAIlC,MAAM,CAACC,eAAe,EAAE;IAC1BD,MAAM,CAACC,eAAe,CAACuB,MAAM,CAAC,CAAC;;IAE/B;IACA,IAAI,IAAI,CAAC3B,cAAc,EAAE;MACvB4B,aAAa,CAAC,IAAI,CAAC5B,cAAc,CAAC;MAClC,IAAI,CAACA,cAAc,GAAG,IAAI;IAC5B;IAEA,IAAI,IAAI,CAACC,kBAAkB,EAAE;MAC3B4B,YAAY,CAAC,IAAI,CAAC5B,kBAAkB,CAAC;MACrC,IAAI,CAACA,kBAAkB,GAAG,IAAI;IAChC;EACF;AACF,CAAC;AAED,MAAMqC,QAAQ,GAAGA,CAACP,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,KAAK;EACtD,IAAI;IACF;IACA/B,MAAM,CAACC,eAAe,CAACuB,MAAM,CAAC,CAAC;;IAE/B;IACA,MAAMa,SAAS,GAAG,IAAIC,wBAAwB,CAACV,IAAI,CAAC;;IAEpD;IACAS,SAAS,CAACzB,IAAI,GAAG,OAAO;IACxByB,SAAS,CAACE,IAAI,GAAG,GAAG,CAAC,CAAK;IAC1BF,SAAS,CAACG,KAAK,GAAG,GAAG,CAAC,CAAI;IAC1BH,SAAS,CAACI,MAAM,GAAG,GAAG,CAAC,CAAG;;IAE1B;IACA,MAAMnC,MAAM,GAAGP,SAAS,CAAC,CAAC;IAC1B,MAAM2C,YAAY,GAAGpC,MAAM,CAACqC,IAAI,CAACC,KAAK,IACpCA,KAAK,CAAChC,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC,IACzB+B,KAAK,CAAC9B,IAAI,CAACC,WAAW,CAAC,CAAC,CAACF,QAAQ,CAAC,SAAS,CAC7C,CAAC;IAED,IAAI6B,YAAY,EAAE;MAChBvC,OAAO,CAACK,GAAG,CAAC,4BAA4BkC,YAAY,CAAC5B,IAAI,EAAE,CAAC;MAC5DuB,SAAS,CAACO,KAAK,GAAGF,YAAY;IAChC,CAAC,MAAM,IAAIpC,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;MAC5BJ,OAAO,CAACK,GAAG,CAAC,iDAAiDF,MAAM,CAAC,CAAC,CAAC,CAACQ,IAAI,EAAE,CAAC;MAC9EuB,SAAS,CAACO,KAAK,GAAGtC,MAAM,CAAC,CAAC,CAAC;IAC7B;;IAEA;IACA+B,SAAS,CAACQ,OAAO,GAAG,MAAM;MACxB1C,OAAO,CAACK,GAAG,CAAC,iCAAiC,CAAC;MAC9C,IAAIqB,SAAS,EAAEA,SAAS,CAAC,CAAC;IAC5B,CAAC;IAEDQ,SAAS,CAACS,KAAK,GAAG,MAAM;MACtB3C,OAAO,CAACK,GAAG,CAAC,mCAAmC,CAAC;MAChD,IAAIsB,OAAO,EAAEA,OAAO,CAAC,CAAC;IACxB,CAAC;IAEDO,SAAS,CAACU,OAAO,GAAIC,KAAK,IAAK;MAC7B7C,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAE4C,KAAK,CAAC;MACxD,IAAIjB,OAAO,EAAEA,OAAO,CAACiB,KAAK,CAAC5C,KAAK,IAAI,mBAAmB,CAAC;IAC1D,CAAC;;IAED;IACAJ,MAAM,CAACC,eAAe,CAACgD,KAAK,CAACZ,SAAS,CAAC;;IAEvC;;IAEA;IACA,IAAI,CAACxC,cAAc,GAAGqD,WAAW,CAAC,MAAM;MACtC,IAAIlD,MAAM,CAACC,eAAe,CAACqB,QAAQ,EAAE;QACnCnB,OAAO,CAACK,GAAG,CAAC,oDAAoD,CAAC;QACjER,MAAM,CAACC,eAAe,CAACkD,KAAK,CAAC,CAAC;QAC9BnD,MAAM,CAACC,eAAe,CAACmD,MAAM,CAAC,CAAC;MACjC,CAAC,MAAM;QACL3B,aAAa,CAAC,IAAI,CAAC5B,cAAc,CAAC;QAClC,IAAI,CAACA,cAAc,GAAG,IAAI;MAC5B;IACF,CAAC,EAAE,KAAK,CAAC;;IAET;IACA;IACA,MAAMwD,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,EAAE3B,IAAI,CAACrB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC;IAC3D,IAAI,CAACT,kBAAkB,GAAGmC,UAAU,CAAC,MAAM;MACzC,IAAIjC,MAAM,CAACC,eAAe,CAACqB,QAAQ,EAAE;QACnCnB,OAAO,CAACK,GAAG,CAAC,sDAAsD6C,eAAe,2BAA2B,CAAC;QAC7GrD,MAAM,CAACC,eAAe,CAACuB,MAAM,CAAC,CAAC;QAC/B,IAAIM,OAAO,EAAEA,OAAO,CAAC,CAAC;MACxB;MAEA,IAAI,IAAI,CAACjC,cAAc,EAAE;QACvB4B,aAAa,CAAC,IAAI,CAAC5B,cAAc,CAAC;QAClC,IAAI,CAACA,cAAc,GAAG,IAAI;MAC5B;IACF,CAAC,EAAEwD,eAAe,CAAC;EAErB,CAAC,CAAC,OAAOjD,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,IAAI2B,OAAO,EAAEA,OAAO,CAAC3B,KAAK,CAACgC,OAAO,IAAI,mBAAmB,CAAC;EAC5D;AACF,CAAC;;AAED;AACA;AACA;;AAEA,MAAMoB,YAAY,CAAC;EACjBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,WAAW,GAAG,OAAO3D,MAAM,KAAK,WAAW,KAC7C,yBAAyB,IAAIA,MAAM,IAAI,mBAAmB,IAAIA,MAAM,CAAC;IACxE,IAAI,CAAC4D,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B,IAAI,CAACC,kBAAkB,GAAG,IAAI;EAChC;;EAEA;AACF;AACA;AACA;EACEC,IAAIA,CAACC,QAAQ,GAAG,OAAO,EAAE;IACvB,IAAI,CAAC,IAAI,CAACT,WAAW,EAAE;MACrBxD,OAAO,CAACC,KAAK,CAAC,8DAA8D,CAAC;MAC7E,OAAO,KAAK;IACd;IAEA,MAAMiE,iBAAiB,GAAGrE,MAAM,CAACqE,iBAAiB,IAAIrE,MAAM,CAACsE,uBAAuB;IACpF,IAAI,CAACZ,WAAW,GAAG,IAAIW,iBAAiB,CAAC,CAAC;;IAE1C;IACA,IAAI,CAACX,WAAW,CAAC9C,IAAI,GAAGwD,QAAQ;IAChC,IAAI,CAACV,WAAW,CAACa,UAAU,GAAG,KAAK;IACnC,IAAI,CAACb,WAAW,CAACc,cAAc,GAAG,IAAI;;IAEtC;IACA,IAAI,CAACd,WAAW,CAACe,QAAQ,GAAIzB,KAAK,IAAK;MACrC,MAAMa,UAAU,GAAGa,KAAK,CAACC,IAAI,CAAC3B,KAAK,CAAC4B,OAAO,CAAC,CACzC5D,GAAG,CAAC6D,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,CAAC,CACxB7D,GAAG,CAAC6D,MAAM,IAAIA,MAAM,CAAChB,UAAU,CAAC,CAChC5C,IAAI,CAAC,EAAE,CAAC;MAEX,IAAI,CAAC4C,UAAU,GAAGA,UAAU;MAE5B,IAAI,IAAI,CAACC,gBAAgB,EAAE;QACzB,IAAI,CAACA,gBAAgB,CAACD,UAAU,EAAEb,KAAK,CAAC4B,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC;MAC7D;IACF,CAAC;IAED,IAAI,CAACpB,WAAW,CAACZ,KAAK,GAAG,MAAM;MAC7B,IAAI,CAACc,WAAW,GAAG,KAAK;MACxB,IAAI,IAAI,CAACG,aAAa,EAAE;QACtB,IAAI,CAACA,aAAa,CAAC,IAAI,CAACF,UAAU,CAAC;MACrC;IACF,CAAC;IAED,IAAI,CAACH,WAAW,CAACX,OAAO,GAAIC,KAAK,IAAK;MACpC,IAAI,CAACY,WAAW,GAAG,KAAK;MACxB,IAAI,IAAI,CAACI,eAAe,EAAE;QACxB,IAAI,CAACA,eAAe,CAAChB,KAAK,CAAC5C,KAAK,CAAC;MACnC;IACF,CAAC;IAED,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACE,MAAM2E,2BAA2BA,CAAA,EAAG;IAClC,IAAIC,SAAS,CAACC,YAAY,IAAID,SAAS,CAACC,YAAY,CAACC,YAAY,EAAE;MACjE,IAAI;QACF;QACA,MAAMC,MAAM,GAAG,MAAMH,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAAEE,KAAK,EAAE;QAAK,CAAC,CAAC;QACzE;QACA,IAAI,CAACC,gBAAgB,GAAGF,MAAM;QAC9B,IAAI,CAAClB,iBAAiB,GAAG,IAAI;;QAE7B;QACA,IAAI,IAAI,CAACC,kBAAkB,EAAE;UAC3B,IAAI,CAACA,kBAAkB,CAAC,IAAI,CAAC;QAC/B;QAEA,OAAO,IAAI;MACb,CAAC,CAAC,OAAO9D,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;QAErE,IAAI,CAAC6D,iBAAiB,GAAG,KAAK;QAC9B;QACA,IAAI,IAAI,CAACC,kBAAkB,EAAE;UAC3B,IAAI,CAACA,kBAAkB,CAAC,KAAK,EAAE9D,KAAK,CAACgC,OAAO,CAAC;QAC/C;QAEA,OAAO,KAAK;MACd;IACF,CAAC,MAAM;MACLjC,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC;MACjE,OAAO,KAAK;IACd;EACF;;EAEA;AACF;AACA;AACA;EACEkF,kBAAkBA,CAACC,QAAQ,EAAE;IAC3B,IAAI,CAACrB,kBAAkB,GAAGqB,QAAQ;EACpC;;EAEA;AACF;AACA;AACA;EACE,MAAMC,KAAKA,CAAA,EAAG;IACZ;IACA,IAAI,CAAC,IAAI,CAACvB,iBAAiB,EAAE;MAC3B,MAAMA,iBAAiB,GAAG,MAAM,IAAI,CAACc,2BAA2B,CAAC,CAAC;MAClE,IAAI,CAACd,iBAAiB,EAAE;QACtB,IAAI,IAAI,CAACD,eAAe,EAAE;UACxB,IAAI,CAACA,eAAe,CAAC,6CAA6C,CAAC;QACrE;QACA,OAAO,KAAK;MACd;IACF;IAEA,IAAI,CAAC,IAAI,CAACN,WAAW,EAAE;MACrB,MAAM+B,WAAW,GAAG,IAAI,CAACtB,IAAI,CAAC,CAAC;MAC/B,IAAI,CAACsB,WAAW,EAAE,OAAO,KAAK;IAChC;IAEA,IAAI;MACF,IAAI,CAAC/B,WAAW,CAAC8B,KAAK,CAAC,CAAC;MACxB,IAAI,CAAC5B,WAAW,GAAG,IAAI;MACvB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOxD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,OAAO,KAAK;IACd;EACF;;EAEA;AACF;AACA;EACEsF,IAAIA,CAAA,EAAG;IACL,IAAI,IAAI,CAAChC,WAAW,IAAI,IAAI,CAACE,WAAW,EAAE;MACxC,IAAI;QACF,IAAI,CAACF,WAAW,CAACgC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC9B,WAAW,GAAG,KAAK;;QAExB;QACA,IAAI,IAAI,CAACyB,gBAAgB,EAAE;UACzB,IAAI,CAACA,gBAAgB,CAACM,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC;QAClE;QAEA,OAAO,IAAI;MACb,CAAC,CAAC,OAAOtF,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;QAClE,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;EACE0F,QAAQA,CAACP,QAAQ,EAAE;IACjB,IAAI,CAACzB,gBAAgB,GAAGyB,QAAQ;EAClC;;EAEA;AACF;AACA;AACA;EACEQ,KAAKA,CAACR,QAAQ,EAAE;IACd,IAAI,CAACxB,aAAa,GAAGwB,QAAQ;EAC/B;;EAEA;AACF;AACA;AACA;EACExD,OAAOA,CAACwD,QAAQ,EAAE;IAChB,IAAI,CAACvB,eAAe,GAAGuB,QAAQ;EACjC;;EAEA;AACF;AACA;AACA;EACES,oBAAoBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACrC,WAAW;EACzB;;EAEA;AACF;AACA;EACEzD,gBAAgBA,CAAA,EAAG;IACjB,OAAOA,gBAAgB,CAAC,CAAC;EAC3B;;EAEA;AACF;AACA;EACEyB,SAASA,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE;IAC3C,OAAOJ,SAAS,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,CAAC;EACrD;AACF;;AAEA;AACA,MAAMkE,YAAY,GAAG,IAAIzC,YAAY,CAAC,CAAC;AACvC,eAAeyC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}