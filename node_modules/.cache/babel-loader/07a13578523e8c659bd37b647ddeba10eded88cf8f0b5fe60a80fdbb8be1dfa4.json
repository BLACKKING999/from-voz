{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\Sistema de Encuestas por Voz\\\\client\\\\src\\\\pages\\\\TakeSurvey.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { SurveyService, ResponseService } from '../services/apiService';\n\n// Componentes\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport ErrorMessage from '../components/ErrorMessage';\nimport audioService from '../services/audioService';\n// Importar servicio de procesamiento de lenguaje natural\nimport * as nlpService from '../services/nlpService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TakeSurvey = () => {\n  _s();\n  const {\n    surveyId\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Referencias para controlar el flujo de la conversación\n  const conversationActive = useRef(false);\n  const speakTimeoutRef = useRef(null);\n\n  // Estados\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [currentResponse, setCurrentResponse] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [voiceEnabled, setVoiceEnabled] = useState(true);\n  const [conversationState, setConversationState] = useState('idle'); // idle, speaking, listening, processing\n  const [conversationMessage, setConversationMessage] = useState('');\n  const [micPermission, setMicPermission] = useState('unknown'); // 'unknown', 'granted', 'denied'\n  const [recognizedText, setRecognizedText] = useState('');\n  const [status, setStatus] = useState('');\n\n  // Verificar permiso del micrófono\n  const requestMicrophonePermission = async () => {\n    setConversationState('requesting_permission');\n    setConversationMessage('Solicitando permiso para el micrófono...');\n    try {\n      const permissionGranted = await audioService.requestMicrophonePermission();\n      if (permissionGranted) {\n        setMicPermission('granted');\n        setShowPermissionDialog(false);\n        setConversationMessage('Permiso concedido. Iniciando encuesta por voz...');\n\n        // Pequeño retraso para iniciar la conversación\n        setTimeout(() => {\n          startConversation();\n        }, 1000);\n      } else {\n        setMicPermission('denied');\n        setConversationState('permission_denied');\n        setConversationMessage('Se necesita acceso al micrófono para usar la función de voz');\n      }\n    } catch (error) {\n      console.error('Error al solicitar permiso:', error);\n      setMicPermission('denied');\n      setConversationState('error');\n      setConversationMessage('Error al solicitar permiso del micrófono');\n    }\n  };\n\n  // Cargar la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        const data = await SurveyService.getPublicSurvey(surveyId);\n        console.log('Encuesta cargada:', data);\n        setSurvey(data);\n        // Inicializar respuestas vacías\n        setResponses(new Array(data.questions.length).fill(''));\n      } catch (error) {\n        console.error('Error al cargar la encuesta:', error);\n        setError('No se pudo cargar la encuesta. Verifique que el ID sea correcto y que la encuesta esté activa.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSurvey();\n\n    // Inicializar sistema de voz\n    audioService.initSpeechSystem();\n\n    // Configurar el callback para cambios en el permiso del micrófono\n    audioService.onPermissionChange((granted, errorMsg) => {\n      setMicPermission(granted ? 'granted' : 'denied');\n      if (!granted && errorMsg) {\n        setConversationMessage(`Error de permiso: ${errorMsg}`);\n        setConversationState('permission_denied');\n      }\n    });\n    return () => {\n      // Detener cualquier síntesis y reconocimiento al desmontar\n      if (speakTimeoutRef.current) {\n        clearTimeout(speakTimeoutRef.current);\n      }\n      audioService.stop();\n      conversationActive.current = false;\n      if (window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n    };\n  }, [surveyId]);\n\n  // Iniciar la conversación una vez que la encuesta esté cargada\n  useEffect(() => {\n    if (survey && voiceEnabled && !conversationActive.current) {\n      // Primero verificar permiso de micrófono\n      if (micPermission === 'granted') {\n        startConversation();\n      } else if (micPermission === 'unknown') {\n        // Mostrar diálogo de permiso\n        setShowPermissionDialog(true);\n      }\n    }\n  }, [survey, voiceEnabled, micPermission]);\n\n  // Función para iniciar la conversación\n  const startConversation = () => {\n    if (!voiceEnabled || !survey) return;\n    conversationActive.current = true;\n\n    // Dar un mensaje de bienvenida\n    if (survey.welcomeMessage) {\n      speakText(survey.welcomeMessage, () => {\n        // Después de la bienvenida, preguntar la primera pregunta\n        speakCurrentQuestion();\n      });\n    } else {\n      // Si no hay mensaje de bienvenida, ir directamente a la primera pregunta\n      speakCurrentQuestion();\n    }\n  };\n\n  // Función para hablar el texto usando el servicio de audio con pausas naturales\n  const speakText = (text, onEndCallback) => {\n    if (!voiceEnabled) {\n      if (onEndCallback) onEndCallback();\n      return;\n    }\n    console.log('Preparando para hablar:', text);\n\n    // Cancela cualquier síntesis en curso y limpia los timeouts anteriores\n    if (window.speechSynthesis) {\n      window.speechSynthesis.cancel();\n    }\n    if (speakTimeoutRef.current) {\n      clearTimeout(speakTimeoutRef.current);\n      speakTimeoutRef.current = null;\n    }\n\n    // Detener cualquier reconocimiento en curso para evitar conflictos\n    audioService.stop();\n\n    // Pausa significativa antes de comenzar a hablar (1 segundo)\n    speakTimeoutRef.current = setTimeout(() => {\n      setConversationState('speaking');\n      setConversationMessage('Hablando: ' + text.substring(0, 30) + (text.length > 30 ? '...' : ''));\n\n      // Calcular un tiempo estimado basado en la longitud del texto (125ms por carácter para ser más conservador)\n      const estimatedSpeakTime = Math.max(4000, text.length * 125);\n      console.log(`Tiempo estimado para hablar: ${estimatedSpeakTime}ms`);\n      audioService.speakText(text, () => {\n        console.log('Comenzando a hablar:', text);\n      }, () => {\n        console.log('Terminó de hablar la frase completa');\n        setConversationState('processing');\n        setConversationMessage('Procesando...');\n\n        // Esperar un tiempo más largo después de hablar (2 segundos) para una pausa natural\n        // Esta pausa simula el tiempo que una persona tomaría para procesar lo que escuchó\n        speakTimeoutRef.current = setTimeout(() => {\n          setConversationState('idle');\n          if (onEndCallback) {\n            onEndCallback();\n          }\n        }, 2000);\n      }, error => {\n        console.error('Error al hablar:', error);\n        setConversationState('error');\n        setConversationMessage(`Error: ${error}`);\n\n        // En caso de error, esperar un poco antes de continuar\n        speakTimeoutRef.current = setTimeout(() => {\n          setConversationState('idle');\n          if (onEndCallback) {\n            onEndCallback();\n          }\n        }, 1500);\n      });\n    }, 1000); // Esperar 1 segundo antes de iniciar una nueva síntesis para asegurar separación clara\n  };\n\n  // Función para hablar la pregunta actual\n  const speakCurrentQuestion = () => {\n    if (!survey || !voiceEnabled) return;\n    const currentQuestion = survey.questions[currentQuestionIndex];\n    if (!currentQuestion) return;\n    let questionText = `Pregunta ${currentQuestionIndex + 1}: ${currentQuestion.text}`;\n\n    // Agregar información sobre opciones si es pregunta de opción múltiple\n    if (currentQuestion.type === 'multiple_choice' && currentQuestion.options) {\n      questionText += '. Las opciones son: ';\n      questionText += currentQuestion.options.map((option, idx) => `Opción ${idx + 1}: ${option}`).join(', ');\n    }\n    speakText(questionText, () => {\n      // Después de hablar la pregunta, iniciar el reconocimiento de voz\n      startListening();\n    });\n  };\n\n  // Función para iniciar la escucha de la respuesta del usuario\n  const startListening = async () => {\n    if (!voiceEnabled) return;\n    if (!audioService.isSupportedByBrowser()) {\n      setError('Tu navegador no soporta reconocimiento de voz');\n      return;\n    }\n    if (micPermission !== 'granted') {\n      await requestMicrophonePermission();\n      return;\n    }\n    audioService.init('es-ES');\n    setRecognizedText('');\n    audioService.onResult((transcript, isFinal) => {\n      setCurrentResponse(transcript);\n      setStatus(isFinal ? 'Procesando...' : 'Escuchando...');\n    });\n    audioService.onEnd(finalTranscript => {\n      setIsListening(false);\n      setConversationState('processing');\n      setConversationMessage('Procesando respuesta...');\n\n      // Guardar la respuesta y continuar la conversación\n      handleVoiceResponse(finalTranscript);\n    });\n    audioService.onError(errorMessage => {\n      console.error('Error de reconocimiento:', errorMessage);\n      setError(`Error de reconocimiento: ${errorMessage}`);\n      setIsListening(false);\n      setConversationState('idle');\n\n      // Reintentar la escucha después de un error\n      speakTimeoutRef.current = setTimeout(() => {\n        speakText('No pude entender tu respuesta. Por favor, inténtalo de nuevo.', () => {\n          startListening();\n        });\n      }, 1000);\n    });\n    try {\n      const started = await audioService.start();\n      if (started) {\n        setIsListening(true);\n        setConversationState('listening');\n        setConversationMessage('Escuchando...');\n      } else {\n        setError('No se pudo iniciar el reconocimiento de voz');\n        setConversationState('idle');\n      }\n    } catch (error) {\n      setError(`Error al iniciar reconocimiento: ${error.message || 'Error desconocido'}`);\n      setConversationState('idle');\n    }\n  };\n\n  // Manejar la respuesta por voz\n  const handleVoiceResponse = response => {\n    if (!response || response.trim() === '') {\n      // Si no hay respuesta, pedir que repita\n      speakText('No he escuchado ninguna respuesta. Por favor, intenta de nuevo.', () => {\n        startListening();\n      });\n      return;\n    }\n\n    // Guardar la respuesta actual\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = response;\n    setResponses(updatedResponses);\n\n    // Dar feedback al usuario\n    speakText(`He registrado tu respuesta: ${response}.`, () => {\n      // Pasar a la siguiente pregunta o finalizar\n      if (currentQuestionIndex < survey.questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n        setCurrentResponse('');\n        // Hablar la siguiente pregunta después de un breve pausa\n        speakTimeoutRef.current = setTimeout(() => {\n          speakCurrentQuestion();\n        }, 1000);\n      } else {\n        // Si es la última pregunta, mostrar confirmación\n        setShowConfirmation(true);\n        speakText('Hemos terminado todas las preguntas. Ahora te mostraré un resumen de tus respuestas para que las confirmes.', () => {\n          speakConfirmationSummary();\n        });\n      }\n    });\n  };\n\n  // Leer el resumen de confirmación\n  const speakConfirmationSummary = () => {\n    if (!voiceEnabled || !showConfirmation) return;\n    let summaryText = 'Resumen de tus respuestas: ';\n    survey.questions.forEach((question, index) => {\n      summaryText += `Pregunta ${index + 1}: ${question.text}. Tu respuesta: ${responses[index] || \"Sin respuesta\"}. `;\n    });\n    summaryText += '¿Deseas enviar estas respuestas o volver para revisar alguna?';\n    speakText(summaryText, () => {\n      // Escuchar confirmación del usuario\n      listenForConfirmation();\n    });\n  };\n\n  // Escuchar la confirmación del usuario usando NLP para mejor reconocimiento\n  const listenForConfirmation = () => {\n    if (!voiceEnabled) return;\n\n    // Esperar un momento antes de empezar a escuchar para dar tiempo a que termine de hablar\n    // y para simular un ritmo de conversación natural\n    setConversationState('waiting');\n    setConversationMessage('Esperando tu respuesta...');\n\n    // Esperar 3 segundos antes de empezar a escuchar para una interacción más natural\n    setTimeout(() => {\n      audioService.init('es-ES');\n      audioService.onResult((transcript, isFinal) => {\n        // Mostrar lo que está diciendo el usuario en tiempo real\n        setCurrentResponse(transcript);\n        setConversationMessage(isFinal ? 'Procesando tu respuesta...' : `Escuchando: ${transcript}`);\n      });\n      audioService.onEnd(finalTranscript => {\n        setIsListening(false);\n        setConversationState('processing');\n        setConversationMessage('Analizando respuesta...');\n        console.log('Respuesta final recibida:', finalTranscript);\n\n        // Usar una pausa para procesar la respuesta y dar una sensación más natural\n        setTimeout(() => {\n          // Analizar respuesta utilizando NLP para una mejor comprensión\n          try {\n            // Utilizar el servicio NLP para analizar respuesta de forma más precisa\n            const result = nlpService.analyzeYesNo(finalTranscript.toLowerCase());\n            console.log('Análisis NLP:', result);\n            if (result.isAffirmative) {\n              // Confirmado - enviar respuestas\n              setConversationState('confirmed');\n              setConversationMessage('Confirmado. Enviando respuestas...');\n              speakText('Perfecto, estoy enviando tus respuestas ahora.', () => {\n                handleSubmit();\n              });\n            } else if (result.isNegative) {\n              // Volver a revisar\n              setConversationState('reviewing');\n              setConversationMessage('Volviendo a revisar las preguntas...');\n              setShowConfirmation(false);\n              speakText('De acuerdo, volvamos a revisar las preguntas. Puedes navegar entre ellas usando los botones de anterior y siguiente.', null);\n            } else {\n              // Respuesta no clara - pedir clarificación\n              setConversationState('unclear');\n              setConversationMessage('No entendí tu respuesta...');\n              speakText('No he entendido si deseas confirmar o revisar. Por favor, dime claramente \"confirmar\" para enviar las respuestas o \"revisar\" para volver a las preguntas.', () => {\n                // Intentar nuevamente después de una pausa \n                setTimeout(() => {\n                  listenForConfirmation();\n                }, 2000); // Esperar 2 segundos antes de volver a escuchar\n              });\n            }\n          } catch (error) {\n            console.error('Error al procesar la respuesta con NLP:', error);\n            // Fallback al método simple en caso de error con NLP\n            const lowerResponse = finalTranscript.toLowerCase();\n            if (lowerResponse.includes('sí') || lowerResponse.includes('si') || lowerResponse.includes('confirmar') || lowerResponse.includes('enviar')) {\n              speakText('Perfecto, enviando tus respuestas.', () => {\n                handleSubmit();\n              });\n            } else if (lowerResponse.includes('no') || lowerResponse.includes('revisar')) {\n              setShowConfirmation(false);\n              speakText('De acuerdo, volvamos a revisar las preguntas.', null);\n            } else {\n              speakText('No he entendido tu respuesta. Por favor, intenta de nuevo.', () => {\n                setTimeout(() => {\n                  listenForConfirmation();\n                }, 2000);\n              });\n            }\n          }\n        }, 1500); // Pausa para procesar la respuesta\n      });\n      audioService.onError(errorMessage => {\n        console.error('Error en reconocimiento de voz:', errorMessage);\n        setIsListening(false);\n        setConversationState('error');\n        setConversationMessage(`Error al escuchar: ${errorMessage}`);\n        speakText('Hubo un problema al escuchar tu confirmación. Por favor, usa los botones en pantalla para confirmar o volver, o intenta hablar más claramente.', null);\n      });\n\n      // Iniciar el reconocimiento de voz\n      audioService.start();\n      setIsListening(true);\n      setConversationState('listening');\n      setConversationMessage('Escuchando tu confirmación...');\n\n      // Reproducir un sonido suave para indicar que está listo para escuchar\n      try {\n        const beep = new Audio('/assets/sounds/listen-beep.mp3');\n        beep.volume = 0.3;\n        beep.play();\n      } catch (error) {\n        console.log('No se pudo reproducir el sonido de inicio de escucha');\n      }\n    }, 3000); // Pausa considerable antes de empezar a escuchar\n  };\n\n  // Enviar todas las respuestas\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    try {\n      // Preparar objeto de respuesta\n      const responseData = {\n        surveyId: survey._id,\n        responses: survey.questions.map((question, index) => ({\n          questionId: question._id,\n          questionText: question.text,\n          responseText: responses[index] || '',\n          questionType: question.type\n        }))\n      };\n\n      // Enviar respuesta a la API\n      await ResponseService.submitResponse(responseData);\n\n      // Mensaje de despedida\n      if (voiceEnabled) {\n        speakText(survey.farewell || '¡Gracias por completar la encuesta!', () => {\n          // Redirigir a página de agradecimiento\n          navigate(`/thank-you`, {\n            state: {\n              message: survey.farewell || '¡Gracias por completar la encuesta!'\n            }\n          });\n        });\n      } else {\n        // Redirigir a página de agradecimiento sin hablar\n        navigate(`/thank-you`, {\n          state: {\n            message: survey.farewell || '¡Gracias por completar la encuesta!'\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setError('Ocurrió un error al enviar tus respuestas. Por favor, intenta nuevamente.');\n      setIsSubmitting(false);\n      if (voiceEnabled) {\n        speakText('Ha ocurrido un error al enviar tus respuestas. Por favor, intenta nuevamente.', null);\n      }\n    }\n  };\n\n  // Renderizar pantalla de carga\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Renderizar mensaje de error\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Si no hay encuesta\n  if (!survey) {\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: \"No se encontr\\xF3 la encuesta solicitada.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Obtener la pregunta actual\n  const currentQuestion = survey.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 p-3 rounded-lg shadow-sm text-center bg-gray-100\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-bold mb-2\",\n        children: survey.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm mb-3\",\n        children: survey.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this), micPermission === 'unknown' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: requestMicrophonePermission,\n        className: \"px-4 py-2 bg-blue-600 text-white rounded-md mb-2\",\n        children: \"Permitir micr\\xF3fono para continuar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }, this), micPermission === 'denied' && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600 mb-2\",\n        children: \"Se necesita acceso al micr\\xF3fono para usar la funci\\xF3n de voz.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-semibold\",\n        children: showConfirmation ? \"Confirmación de respuestas\" : `Pregunta ${currentQuestionIndex + 1} de ${survey.questions.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this), conversationState !== 'idle' && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-blue-700\",\n        children: conversationMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 526,\n    columnNumber: 5\n  }, this);\n};\n_s(TakeSurvey, \"9MoX9xM/+HPLcPFGLUEBvcR8Y24=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = TakeSurvey;\nexport default TakeSurvey;\nvar _c;\n$RefreshReg$(_c, \"TakeSurvey\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","SurveyService","ResponseService","LoadingSpinner","ErrorMessage","audioService","nlpService","jsxDEV","_jsxDEV","TakeSurvey","_s","surveyId","navigate","conversationActive","speakTimeoutRef","survey","setSurvey","loading","setLoading","error","setError","currentQuestionIndex","setCurrentQuestionIndex","responses","setResponses","isSubmitting","setIsSubmitting","showConfirmation","setShowConfirmation","currentResponse","setCurrentResponse","isListening","setIsListening","voiceEnabled","setVoiceEnabled","conversationState","setConversationState","conversationMessage","setConversationMessage","micPermission","setMicPermission","recognizedText","setRecognizedText","status","setStatus","requestMicrophonePermission","permissionGranted","setShowPermissionDialog","setTimeout","startConversation","console","fetchSurvey","data","getPublicSurvey","log","Array","questions","length","fill","initSpeechSystem","onPermissionChange","granted","errorMsg","current","clearTimeout","stop","window","speechSynthesis","cancel","welcomeMessage","speakText","speakCurrentQuestion","text","onEndCallback","substring","estimatedSpeakTime","Math","max","currentQuestion","questionText","type","options","map","option","idx","join","startListening","isSupportedByBrowser","init","onResult","transcript","isFinal","onEnd","finalTranscript","handleVoiceResponse","onError","errorMessage","started","start","message","response","trim","updatedResponses","speakConfirmationSummary","summaryText","forEach","question","index","listenForConfirmation","result","analyzeYesNo","toLowerCase","isAffirmative","handleSubmit","isNegative","lowerResponse","includes","beep","Audio","volume","play","responseData","_id","questionId","responseText","questionType","submitResponse","farewell","state","fileName","_jsxFileName","lineNumber","columnNumber","className","children","title","description","onClick","_c","$RefreshReg$"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/pages/TakeSurvey.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { SurveyService, ResponseService } from '../services/apiService';\n\n// Componentes\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport ErrorMessage from '../components/ErrorMessage';\nimport audioService from '../services/audioService';\n// Importar servicio de procesamiento de lenguaje natural\nimport * as nlpService from '../services/nlpService';\n\nconst TakeSurvey = () => {\n  const { surveyId } = useParams();\n  const navigate = useNavigate();\n  \n  // Referencias para controlar el flujo de la conversación\n  const conversationActive = useRef(false);\n  const speakTimeoutRef = useRef(null);\n  \n  // Estados\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [currentResponse, setCurrentResponse] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [voiceEnabled, setVoiceEnabled] = useState(true);\n  const [conversationState, setConversationState] = useState('idle'); // idle, speaking, listening, processing\n  const [conversationMessage, setConversationMessage] = useState('');\n  const [micPermission, setMicPermission] = useState('unknown'); // 'unknown', 'granted', 'denied'\n  const [recognizedText, setRecognizedText] = useState('');\n  const [status, setStatus] = useState('');\n  \n  // Verificar permiso del micrófono\n  const requestMicrophonePermission = async () => {\n    setConversationState('requesting_permission');\n    setConversationMessage('Solicitando permiso para el micrófono...');\n    \n    try {\n      const permissionGranted = await audioService.requestMicrophonePermission();\n      \n      if (permissionGranted) {\n        setMicPermission('granted');\n        setShowPermissionDialog(false);\n        setConversationMessage('Permiso concedido. Iniciando encuesta por voz...');\n        \n        // Pequeño retraso para iniciar la conversación\n        setTimeout(() => {\n          startConversation();\n        }, 1000);\n      } else {\n        setMicPermission('denied');\n        setConversationState('permission_denied');\n        setConversationMessage('Se necesita acceso al micrófono para usar la función de voz');\n      }\n    } catch (error) {\n      console.error('Error al solicitar permiso:', error);\n      setMicPermission('denied');\n      setConversationState('error');\n      setConversationMessage('Error al solicitar permiso del micrófono');\n    }\n  };\n  \n  // Cargar la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        const data = await SurveyService.getPublicSurvey(surveyId);\n        console.log('Encuesta cargada:', data);\n        setSurvey(data);\n        // Inicializar respuestas vacías\n        setResponses(new Array(data.questions.length).fill(''));\n      } catch (error) {\n        console.error('Error al cargar la encuesta:', error);\n        setError('No se pudo cargar la encuesta. Verifique que el ID sea correcto y que la encuesta esté activa.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchSurvey();\n    \n    // Inicializar sistema de voz\n    audioService.initSpeechSystem();\n    \n    // Configurar el callback para cambios en el permiso del micrófono\n    audioService.onPermissionChange((granted, errorMsg) => {\n      setMicPermission(granted ? 'granted' : 'denied');\n      if (!granted && errorMsg) {\n        setConversationMessage(`Error de permiso: ${errorMsg}`);\n        setConversationState('permission_denied');\n      }\n    });\n    \n    return () => {\n      // Detener cualquier síntesis y reconocimiento al desmontar\n      if (speakTimeoutRef.current) {\n        clearTimeout(speakTimeoutRef.current);\n      }\n      audioService.stop();\n      conversationActive.current = false;\n      \n      if (window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n    };\n  }, [surveyId]);\n  \n  // Iniciar la conversación una vez que la encuesta esté cargada\n  useEffect(() => {\n    if (survey && voiceEnabled && !conversationActive.current) {\n      // Primero verificar permiso de micrófono\n      if (micPermission === 'granted') {\n        startConversation();\n      } else if (micPermission === 'unknown') {\n        // Mostrar diálogo de permiso\n        setShowPermissionDialog(true);\n      }\n    }\n  }, [survey, voiceEnabled, micPermission]);\n  \n  // Función para iniciar la conversación\n  const startConversation = () => {\n    if (!voiceEnabled || !survey) return;\n    \n    conversationActive.current = true;\n    \n    // Dar un mensaje de bienvenida\n    if (survey.welcomeMessage) {\n      speakText(survey.welcomeMessage, () => {\n        // Después de la bienvenida, preguntar la primera pregunta\n        speakCurrentQuestion();\n      });\n    } else {\n      // Si no hay mensaje de bienvenida, ir directamente a la primera pregunta\n      speakCurrentQuestion();\n    }\n  };\n  \n  // Función para hablar el texto usando el servicio de audio con pausas naturales\n  const speakText = (text, onEndCallback) => {\n    if (!voiceEnabled) {\n      if (onEndCallback) onEndCallback();\n      return;\n    }\n    \n    console.log('Preparando para hablar:', text);\n    \n    // Cancela cualquier síntesis en curso y limpia los timeouts anteriores\n    if (window.speechSynthesis) {\n      window.speechSynthesis.cancel();\n    }\n    \n    if (speakTimeoutRef.current) {\n      clearTimeout(speakTimeoutRef.current);\n      speakTimeoutRef.current = null;\n    }\n    \n    // Detener cualquier reconocimiento en curso para evitar conflictos\n    audioService.stop();\n    \n    // Pausa significativa antes de comenzar a hablar (1 segundo)\n    speakTimeoutRef.current = setTimeout(() => {\n      setConversationState('speaking');\n      setConversationMessage('Hablando: ' + text.substring(0, 30) + (text.length > 30 ? '...' : ''));\n      \n      // Calcular un tiempo estimado basado en la longitud del texto (125ms por carácter para ser más conservador)\n      const estimatedSpeakTime = Math.max(4000, text.length * 125);\n      console.log(`Tiempo estimado para hablar: ${estimatedSpeakTime}ms`);\n      \n      audioService.speakText(\n        text,\n        () => {\n          console.log('Comenzando a hablar:', text);\n        },\n        () => {\n          console.log('Terminó de hablar la frase completa');\n          setConversationState('processing');\n          setConversationMessage('Procesando...');\n          \n          // Esperar un tiempo más largo después de hablar (2 segundos) para una pausa natural\n          // Esta pausa simula el tiempo que una persona tomaría para procesar lo que escuchó\n          speakTimeoutRef.current = setTimeout(() => {\n            setConversationState('idle');\n            if (onEndCallback) {\n              onEndCallback();\n            }\n          }, 2000);\n        },\n        (error) => {\n          console.error('Error al hablar:', error);\n          setConversationState('error');\n          setConversationMessage(`Error: ${error}`);\n          \n          // En caso de error, esperar un poco antes de continuar\n          speakTimeoutRef.current = setTimeout(() => {\n            setConversationState('idle');\n            if (onEndCallback) {\n              onEndCallback();\n            }\n          }, 1500);\n        }\n      );\n    }, 1000); // Esperar 1 segundo antes de iniciar una nueva síntesis para asegurar separación clara\n  };\n  \n  // Función para hablar la pregunta actual\n  const speakCurrentQuestion = () => {\n    if (!survey || !voiceEnabled) return;\n    \n    const currentQuestion = survey.questions[currentQuestionIndex];\n    if (!currentQuestion) return;\n    \n    let questionText = `Pregunta ${currentQuestionIndex + 1}: ${currentQuestion.text}`;\n    \n    // Agregar información sobre opciones si es pregunta de opción múltiple\n    if (currentQuestion.type === 'multiple_choice' && currentQuestion.options) {\n      questionText += '. Las opciones son: ';\n      questionText += currentQuestion.options.map((option, idx) => \n        `Opción ${idx + 1}: ${option}`\n      ).join(', ');\n    }\n    \n    speakText(questionText, () => {\n      // Después de hablar la pregunta, iniciar el reconocimiento de voz\n      startListening();\n    });\n  };\n  \n  // Función para iniciar la escucha de la respuesta del usuario\n  const startListening = async () => {\n    if (!voiceEnabled) return;\n    \n    if (!audioService.isSupportedByBrowser()) {\n      setError('Tu navegador no soporta reconocimiento de voz');\n      return;\n    }\n    \n    if (micPermission !== 'granted') {\n      await requestMicrophonePermission();\n      return;\n    }\n    \n    audioService.init('es-ES');\n    \n    setRecognizedText('');\n    \n    audioService.onResult((transcript, isFinal) => {\n      setCurrentResponse(transcript);\n      setStatus(isFinal ? 'Procesando...' : 'Escuchando...');\n    });\n    \n    audioService.onEnd((finalTranscript) => {\n      setIsListening(false);\n      setConversationState('processing');\n      setConversationMessage('Procesando respuesta...');\n      \n      // Guardar la respuesta y continuar la conversación\n      handleVoiceResponse(finalTranscript);\n    });\n    \n    audioService.onError((errorMessage) => {\n      console.error('Error de reconocimiento:', errorMessage);\n      setError(`Error de reconocimiento: ${errorMessage}`);\n      setIsListening(false);\n      setConversationState('idle');\n      \n      // Reintentar la escucha después de un error\n      speakTimeoutRef.current = setTimeout(() => {\n        speakText('No pude entender tu respuesta. Por favor, inténtalo de nuevo.', () => {\n          startListening();\n        });\n      }, 1000);\n    });\n    \n    try {\n      const started = await audioService.start();\n      if (started) {\n        setIsListening(true);\n        setConversationState('listening');\n        setConversationMessage('Escuchando...');\n      } else {\n        setError('No se pudo iniciar el reconocimiento de voz');\n        setConversationState('idle');\n      }\n    } catch (error) {\n      setError(`Error al iniciar reconocimiento: ${error.message || 'Error desconocido'}`);\n      setConversationState('idle');\n    }\n  };\n  \n  // Manejar la respuesta por voz\n  const handleVoiceResponse = (response) => {\n    if (!response || response.trim() === '') {\n      // Si no hay respuesta, pedir que repita\n      speakText('No he escuchado ninguna respuesta. Por favor, intenta de nuevo.', () => {\n        startListening();\n      });\n      return;\n    }\n    \n    // Guardar la respuesta actual\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = response;\n    setResponses(updatedResponses);\n    \n    // Dar feedback al usuario\n    speakText(`He registrado tu respuesta: ${response}.`, () => {\n      // Pasar a la siguiente pregunta o finalizar\n      if (currentQuestionIndex < survey.questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n        setCurrentResponse('');\n        // Hablar la siguiente pregunta después de un breve pausa\n        speakTimeoutRef.current = setTimeout(() => {\n          speakCurrentQuestion();\n        }, 1000);\n      } else {\n        // Si es la última pregunta, mostrar confirmación\n        setShowConfirmation(true);\n        speakText('Hemos terminado todas las preguntas. Ahora te mostraré un resumen de tus respuestas para que las confirmes.', () => {\n          speakConfirmationSummary();\n        });\n      }\n    });\n  };\n  \n  // Leer el resumen de confirmación\n  const speakConfirmationSummary = () => {\n    if (!voiceEnabled || !showConfirmation) return;\n    \n    let summaryText = 'Resumen de tus respuestas: ';\n    \n    survey.questions.forEach((question, index) => {\n      summaryText += `Pregunta ${index + 1}: ${question.text}. Tu respuesta: ${responses[index] || \"Sin respuesta\"}. `;\n    });\n    \n    summaryText += '¿Deseas enviar estas respuestas o volver para revisar alguna?';\n    \n    speakText(summaryText, () => {\n      // Escuchar confirmación del usuario\n      listenForConfirmation();\n    });\n  };\n  \n  // Escuchar la confirmación del usuario usando NLP para mejor reconocimiento\n  const listenForConfirmation = () => {\n    if (!voiceEnabled) return;\n    \n    // Esperar un momento antes de empezar a escuchar para dar tiempo a que termine de hablar\n    // y para simular un ritmo de conversación natural\n    setConversationState('waiting');\n    setConversationMessage('Esperando tu respuesta...');\n    \n    // Esperar 3 segundos antes de empezar a escuchar para una interacción más natural\n    setTimeout(() => {\n      audioService.init('es-ES');\n      \n      audioService.onResult((transcript, isFinal) => {\n        // Mostrar lo que está diciendo el usuario en tiempo real\n        setCurrentResponse(transcript);\n        setConversationMessage(isFinal ? 'Procesando tu respuesta...' : `Escuchando: ${transcript}`);\n      });\n      \n      audioService.onEnd((finalTranscript) => {\n        setIsListening(false);\n        setConversationState('processing');\n        setConversationMessage('Analizando respuesta...');\n        \n        console.log('Respuesta final recibida:', finalTranscript);\n        \n        // Usar una pausa para procesar la respuesta y dar una sensación más natural\n        setTimeout(() => {\n          // Analizar respuesta utilizando NLP para una mejor comprensión\n          try {\n            // Utilizar el servicio NLP para analizar respuesta de forma más precisa\n            const result = nlpService.analyzeYesNo(finalTranscript.toLowerCase());\n            console.log('Análisis NLP:', result);\n            \n            if (result.isAffirmative) {\n              // Confirmado - enviar respuestas\n              setConversationState('confirmed');\n              setConversationMessage('Confirmado. Enviando respuestas...');\n              \n              speakText('Perfecto, estoy enviando tus respuestas ahora.', () => {\n                handleSubmit();\n              });\n            } else if (result.isNegative) {\n              // Volver a revisar\n              setConversationState('reviewing');\n              setConversationMessage('Volviendo a revisar las preguntas...');\n              \n              setShowConfirmation(false);\n              speakText('De acuerdo, volvamos a revisar las preguntas. Puedes navegar entre ellas usando los botones de anterior y siguiente.', null);\n            } else {\n              // Respuesta no clara - pedir clarificación\n              setConversationState('unclear');\n              setConversationMessage('No entendí tu respuesta...');\n              \n              speakText('No he entendido si deseas confirmar o revisar. Por favor, dime claramente \"confirmar\" para enviar las respuestas o \"revisar\" para volver a las preguntas.', () => {\n                // Intentar nuevamente después de una pausa \n                setTimeout(() => {\n                  listenForConfirmation();\n                }, 2000); // Esperar 2 segundos antes de volver a escuchar\n              });\n            }\n          } catch (error) {\n            console.error('Error al procesar la respuesta con NLP:', error);\n            // Fallback al método simple en caso de error con NLP\n            const lowerResponse = finalTranscript.toLowerCase();\n            \n            if (lowerResponse.includes('sí') || lowerResponse.includes('si') || \n                lowerResponse.includes('confirmar') || lowerResponse.includes('enviar')) {\n              speakText('Perfecto, enviando tus respuestas.', () => {\n                handleSubmit();\n              });\n            } else if (lowerResponse.includes('no') || lowerResponse.includes('revisar')) {\n              setShowConfirmation(false);\n              speakText('De acuerdo, volvamos a revisar las preguntas.', null);\n            } else {\n              speakText('No he entendido tu respuesta. Por favor, intenta de nuevo.', () => {\n                setTimeout(() => {\n                  listenForConfirmation();\n                }, 2000);\n              });\n            }\n          }\n        }, 1500); // Pausa para procesar la respuesta\n      });\n      \n      audioService.onError((errorMessage) => {\n        console.error('Error en reconocimiento de voz:', errorMessage);\n        setIsListening(false);\n        setConversationState('error');\n        setConversationMessage(`Error al escuchar: ${errorMessage}`);\n        \n        speakText('Hubo un problema al escuchar tu confirmación. Por favor, usa los botones en pantalla para confirmar o volver, o intenta hablar más claramente.', null);\n      });\n      \n      // Iniciar el reconocimiento de voz\n      audioService.start();\n      setIsListening(true);\n      setConversationState('listening');\n      setConversationMessage('Escuchando tu confirmación...');\n      \n      // Reproducir un sonido suave para indicar que está listo para escuchar\n      try {\n        const beep = new Audio('/assets/sounds/listen-beep.mp3');\n        beep.volume = 0.3;\n        beep.play();\n      } catch (error) {\n        console.log('No se pudo reproducir el sonido de inicio de escucha');\n      }\n    }, 3000); // Pausa considerable antes de empezar a escuchar\n  };\n  \n  // Enviar todas las respuestas\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    \n    try {\n      // Preparar objeto de respuesta\n      const responseData = {\n        surveyId: survey._id,\n        responses: survey.questions.map((question, index) => ({\n          questionId: question._id,\n          questionText: question.text,\n          responseText: responses[index] || '',\n          questionType: question.type\n        }))\n      };\n      \n      // Enviar respuesta a la API\n      await ResponseService.submitResponse(responseData);\n      \n      // Mensaje de despedida\n      if (voiceEnabled) {\n        speakText(survey.farewell || '¡Gracias por completar la encuesta!', () => {\n          // Redirigir a página de agradecimiento\n          navigate(`/thank-you`, { \n            state: { \n              message: survey.farewell || '¡Gracias por completar la encuesta!' \n            } \n          });\n        });\n      } else {\n        // Redirigir a página de agradecimiento sin hablar\n        navigate(`/thank-you`, { \n          state: { \n            message: survey.farewell || '¡Gracias por completar la encuesta!' \n          } \n        });\n      }\n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setError('Ocurrió un error al enviar tus respuestas. Por favor, intenta nuevamente.');\n      setIsSubmitting(false);\n      \n      if (voiceEnabled) {\n        speakText('Ha ocurrido un error al enviar tus respuestas. Por favor, intenta nuevamente.', null);\n      }\n    }\n  };\n  \n  // Renderizar pantalla de carga\n  if (loading) {\n    return <LoadingSpinner />;\n  }\n  \n  // Renderizar mensaje de error\n  if (error) {\n    return <ErrorMessage message={error} />;\n  }\n  \n  // Si no hay encuesta\n  if (!survey) {\n    return <ErrorMessage message=\"No se encontró la encuesta solicitada.\" />;\n  }\n  \n  // Obtener la pregunta actual\n  const currentQuestion = survey.questions[currentQuestionIndex];\n  \n  return (\n    <div className=\"max-w-3xl mx-auto p-4\">\n      {/* Estado de la conversación - Simplificado */}\n      <div className=\"mb-4 p-3 rounded-lg shadow-sm text-center bg-gray-100\">\n        <h2 className=\"text-lg font-bold mb-2\">{survey.title}</h2>\n        <p className=\"text-sm mb-3\">{survey.description}</p>\n        \n        {micPermission === 'unknown' && (\n          <button\n            onClick={requestMicrophonePermission}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md mb-2\"\n          >\n            Permitir micrófono para continuar\n          </button>\n        )}\n        \n        {micPermission === 'denied' && (\n          <p className=\"text-red-600 mb-2\">Se necesita acceso al micrófono para usar la función de voz.</p>\n        )}\n        \n        <p className=\"font-semibold\">\n          {showConfirmation \n            ? \"Confirmación de respuestas\" \n            : `Pregunta ${currentQuestionIndex + 1} de ${survey.questions.length}`}\n        </p>\n        \n        {conversationState !== 'idle' && (\n          <p className=\"mt-2 text-blue-700\">{conversationMessage}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TakeSurvey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}