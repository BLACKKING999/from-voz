{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\Sistema de Encuestas por Voz\\\\client\\\\src\\\\pages\\\\TakeSurvey.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { isSpeechRecognitionSupported, listenForSpeech, checkMicrophonePermission } from '../utils/voiceSurveyAPI';\nimport { SurveyService, ResponseService } from '../services/apiService';\nimport { FaSpinner, FaMicrophone, FaVolumeUp, FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport SimpleVoice from '../components/SimpleVoice';\nimport NLPService from '../services/nlpService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TakeSurvey = () => {\n  _s();\n  var _survey$questions2;\n  const {\n    surveyId\n  } = useParams();\n  const navigate = useNavigate();\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [currentStep, setCurrentStep] = useState('initial'); // 'initial', 'name', 'questions', 'thanks'\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [userName, setUserName] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [browserSupported, setBrowserSupported] = useState(true);\n  const [microphonePermission, setMicrophonePermission] = useState(null);\n  const [showThankYouMessage, setShowThankYouMessage] = useState(false);\n  const [voiceText, setVoiceText] = useState('');\n  const [speakEndCallback, setSpeakEndCallback] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Conjunto de frases adaptativas clasificadas por tono para mejorar la naturalidad\n  const ADAPTIVE_PHRASES = {\n    acknowledgments: [{\n      text: 'Gracias por su respuesta.',\n      tone: 'neutral'\n    }, {\n      text: '¡Excelente! He registrado su respuesta.',\n      tone: 'positive'\n    }, {\n      text: 'Perfecto, continuemos.',\n      tone: 'positive'\n    }, {\n      text: 'Entendido, muchas gracias.',\n      tone: 'neutral'\n    }, {\n      text: 'He anotado su respuesta.',\n      tone: 'neutral'\n    }, {\n      text: '¡Genial! Avancemos.',\n      tone: 'positive'\n    }, {\n      text: 'Comprendo, continuamos.',\n      tone: 'supportive'\n    }, {\n      text: 'Gracias por compartir su opinión.',\n      tone: 'supportive'\n    }],\n    transitions: [{\n      text: 'Pasemos a la siguiente pregunta.',\n      tone: 'neutral'\n    }, {\n      text: 'Continuemos con la siguiente pregunta.',\n      tone: 'neutral'\n    }, {\n      text: 'Ahora, la siguiente pregunta.',\n      tone: 'neutral'\n    }, {\n      text: 'Avancemos a la siguiente pregunta.',\n      tone: 'positive'\n    }, {\n      text: 'Me gustaría preguntarle ahora sobre...',\n      tone: 'supportive'\n    }],\n    clarifications: [{\n      text: 'Disculpe, no he entendido su respuesta. ¿Podría repetirla?',\n      tone: 'neutral'\n    }, {\n      text: 'Parece que no pude entender correctamente. ¿Podría decirlo de otra manera?',\n      tone: 'supportive'\n    }, {\n      text: 'Necesito una respuesta más clara. ¿Podría intentarlo nuevamente?',\n      tone: 'neutral'\n    }, {\n      text: 'No capté bien su respuesta. ¿Podría hablar un poco más claro?',\n      tone: 'supportive'\n    }],\n    greetings: [{\n      text: 'Bienvenido a nuestra encuesta. Apreciamos mucho su participación.',\n      tone: 'positive'\n    }, {\n      text: 'Gracias por participar en esta encuesta. Sus opiniones son muy importantes.',\n      tone: 'neutral'\n    }, {\n      text: 'Le damos la bienvenida a esta encuesta. Valoramos su tiempo y sus respuestas.',\n      tone: 'supportive'\n    }],\n    farewells: [{\n      text: '¡Muchas gracias por completar la encuesta! Sus respuestas son muy valiosas para nosotros.',\n      tone: 'positive'\n    }, {\n      text: 'La encuesta ha finalizado. Agradecemos su participación y su tiempo.',\n      tone: 'neutral'\n    }, {\n      text: 'Hemos llegado al final de la encuesta. Realmente apreciamos sus opiniones.',\n      tone: 'supportive'\n    }]\n  };\n\n  // Comprobar compatibilidad del navegador y permisos\n  useEffect(() => {\n    const checkCompatibility = async () => {\n      // Verificar si el navegador soporta reconocimiento de voz\n      const speechRecognitionSupported = isSpeechRecognitionSupported();\n      const speechSynthesisSupported = true; // isSpeechSynthesisSupported();\n\n      if (!speechRecognitionSupported || !speechSynthesisSupported) {\n        setBrowserSupported(false);\n        setErrorMessage('Su navegador no soporta las tecnologías de voz necesarias para esta encuesta. Por favor, use Chrome, Edge o Safari.');\n        return;\n      }\n\n      // Verificar permisos de micrófono\n      const hasMicrophonePermission = await checkMicrophonePermission();\n      setMicrophonePermission(hasMicrophonePermission);\n      if (!hasMicrophonePermission) {\n        setErrorMessage('Necesitamos permiso para usar su micrófono. Por favor, permita el acceso cuando se le solicite.');\n      }\n    };\n    checkCompatibility();\n  }, []);\n\n  // Inicialización de la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        // Usar getPublicSurvey en lugar de getSurveyById que no existe\n        const surveyData = await SurveyService.getPublicSurvey(surveyId);\n        setSurvey(surveyData);\n        setLoading(false);\n        // Registrar el tiempo de inicio de la encuesta\n        setStartTime(new Date());\n\n        // Inicializar array de respuestas vacío\n        if (surveyData && surveyData.questions) {\n          setResponses(Array(surveyData.questions.length).fill(null).map(() => ({\n            value: '',\n            timestamp: null,\n            index: 0,\n            required_clarification: false\n          })));\n        }\n      } catch (error) {\n        console.error('Error al obtener encuesta:', error);\n        setErrorMessage('No se pudo cargar la encuesta. Por favor, inténtelo de nuevo más tarde.');\n        setLoading(false);\n      }\n    };\n    fetchSurvey();\n  }, [surveyId]);\n\n  // Iniciar conversación automáticamente cuando la encuesta está cargada\n  useEffect(() => {\n    if (survey && currentStep === 'initial') {\n      startConversation();\n    }\n  }, [survey, currentStep]);\n\n  // Iniciar la conversación automática\n  const startConversation = async () => {\n    console.log('Función startConversation ejecutada');\n    console.log('Estado actual:', survey);\n    try {\n      // Obtener la hora del día para personalizar el saludo\n      const hour = new Date().getHours();\n      let greeting;\n      if (hour < 12) {\n        greeting = 'Buenos días';\n      } else if (hour < 18) {\n        greeting = 'Buenas tardes';\n      } else {\n        greeting = 'Buenas noches';\n      }\n\n      // Construir un mensaje de bienvenida completo y natural\n      const welcomeMessage = `${greeting}. Bienvenido a nuestra encuesta. Apreciamos mucho su participación. Esta encuesta es sobre: ${survey.title}. ${survey.description || ''} Para comenzar, ¿podría decirme su nombre por favor?`;\n      console.log('Enviando mensaje de bienvenida con solicitud de nombre:', welcomeMessage);\n\n      // Cambiar el estado para mostrar que estamos en el paso de solicitar nombre\n      setCurrentStep('name');\n\n      // Primero asegurarnos de que no estamos hablando\n      if (isSpeaking) {\n        await new Promise(resolve => {\n          const checkInterval = setInterval(() => {\n            if (!isSpeaking) {\n              clearInterval(checkInterval);\n              resolve();\n            }\n          }, 100);\n        });\n      }\n\n      // Hablar el mensaje de bienvenida con solicitud de nombre\n      await speakText(welcomeMessage);\n      console.log('Mensaje de bienvenida completado');\n\n      // Esperar un momento antes de comenzar a escuchar\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      console.log('Iniciando reconocimiento de voz para captar nombre...');\n      startListening();\n    } catch (error) {\n      console.error('Error al iniciar conversación:', error);\n      setErrorMessage('Ocurrió un error al iniciar la encuesta. Por favor, recargue la página e intente nuevamente.');\n    }\n  };\n\n  // Mover a la sección de preguntas\n  const moveToQuestions = async () => {\n    console.log('Moviendo a la sección de preguntas...');\n    setCurrentStep('questions');\n    setCurrentQuestionIndex(0);\n    // Pequeña pausa para asegurar que los estados se actualicen\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await speakCurrentQuestion();\n  };\n\n  // Hablar la pregunta actual\n  const speakCurrentQuestion = async () => {\n    console.log('Hablando pregunta actual:', currentQuestionIndex);\n    if (!survey || currentQuestionIndex >= survey.questions.length) {\n      var _survey$questions;\n      console.error('No hay más preguntas o índice inválido:', {\n        currentQuestionIndex,\n        questionsLength: survey === null || survey === void 0 ? void 0 : (_survey$questions = survey.questions) === null || _survey$questions === void 0 ? void 0 : _survey$questions.length\n      });\n      return;\n    }\n    const question = survey.questions[currentQuestionIndex];\n    console.log('Pregunta a formular:', question);\n    let questionText = question.text;\n\n    // Añadir instrucciones específicas según tipo de pregunta\n    if (question.type === 'rating') {\n      questionText += ' Por favor, responda con un número del 1 al 5, donde 1 es lo más bajo y 5 lo más alto.';\n    } else if (question.type === 'yesno') {\n      questionText += ' Por favor, responda sí o no.';\n    }\n\n    // Hablar la pregunta\n    setIsSpeaking(true);\n    try {\n      await speakText(questionText);\n      console.log('Pregunta terminada de hablar, iniciando escucha...');\n      setIsSpeaking(false);\n      // Pequeña pausa antes de empezar a escuchar\n      setTimeout(async () => {\n        console.log('Iniciando escucha desde setTimeout después de hablar pregunta');\n        await startListening();\n      }, 800);\n    } catch (error) {\n      console.error('Error al hablar la pregunta:', error);\n      setIsSpeaking(false);\n      // Reintentar en caso de error\n      setTimeout(() => speakCurrentQuestion(), 1500);\n    }\n  };\n\n  // Función para cuando termina de hablar la pregunta\n  const onQuestionSpeakEnd = () => {\n    setTimeout(startListening, 500);\n  };\n\n  // Función para cuando termina de hablar el mensaje de agradecimiento\n  const onThankYouSpeakEnd = async () => {\n    try {\n      // Enviar respuestas al servidor\n      await submitResponses();\n    } catch (error) {\n      console.error('Error submitting responses:', error);\n    }\n  };\n\n  // Función para enviar respuestas al servidor\n  const submitResponses = async () => {\n    try {\n      console.log('Enviando respuestas al servidor:', responses);\n\n      // Calcular la duración total de la encuesta\n      const endTime = new Date();\n      const durationMs = startTime ? endTime - startTime : 0;\n      const durationMinutes = Math.round(durationMs / 60000 * 10) / 10; // Duración en minutos con 1 decimal\n\n      // Calcular el sentimiento general de las respuestas\n      const sentimentScores = responses.map(r => {\n        // Solo analizar respuestas abiertas, no calificaciones numéricas o sí/no\n        if (typeof r.value === 'string' && r.value.length > 3) {\n          const sentiment = NLPService.analyzeSentiment(r.value);\n          return sentiment.score;\n        }\n        return null;\n      }).filter(score => score !== null);\n\n      // Calcular el sentimiento promedio si hay suficientes datos\n      let averageSentiment = 0;\n      let sentimentLabel = 'neutral';\n      if (sentimentScores.length > 0) {\n        averageSentiment = sentimentScores.reduce((sum, score) => sum + score, 0) / sentimentScores.length;\n        if (averageSentiment > 0.2) {\n          sentimentLabel = 'positive';\n        } else if (averageSentiment < -0.2) {\n          sentimentLabel = 'negative';\n        }\n      }\n\n      // Incluir metadatos de IA con las respuestas\n      const formattedResponses = {\n        responses: responses.map(r => ({\n          questionId: survey.questions[r.index]._id,\n          questionText: survey.questions[r.index].text,\n          response: r.value,\n          responseTime: r.timestamp\n        })),\n        metadata: {\n          completionTime: durationMinutes,\n          overallSentiment: sentimentLabel,\n          sentimentScore: averageSentiment,\n          interactionQuality: calculateInteractionQuality()\n        }\n      };\n\n      // Enviar respuestas con metadatos de IA\n      await ResponseService.submitResponse({\n        surveyId: survey._id,\n        surveyTitle: survey.title,\n        respondentName: userName || 'Anónimo',\n        responses: formattedResponses\n      });\n\n      // Seleccionar mensaje de despedida basado en el sentimiento general\n      let farewellPool;\n      if (sentimentLabel === 'positive') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'positive');\n      } else if (sentimentLabel === 'negative') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'supportive');\n      } else {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'neutral');\n      }\n\n      // Si no hay mensajes del tipo adecuado, usar cualquiera\n      if (farewellPool.length === 0) {\n        farewellPool = ADAPTIVE_PHRASES.farewells;\n      }\n      const thankYouMessage = farewellPool[Math.floor(Math.random() * farewellPool.length)].text;\n\n      // Cambiar a pantalla de agradecimiento\n      setCurrentStep('thanks');\n\n      // Hablar mensaje de agradecimiento personalizado\n      await speakText(thankYouMessage);\n      setShowThankYouMessage(true);\n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setErrorMessage('Hubo un problema al enviar sus respuestas. Por favor, inténtelo de nuevo más tarde.');\n    }\n  };\n\n  // Calcular una puntuación de calidad de interacción basada en métricas de la encuesta\n  const calculateInteractionQuality = () => {\n    // Si no hay respuestas, calidad desconocida\n    if (!responses || responses.length === 0) return 'unknown';\n\n    // Verificar tiempos de respuesta\n    const avgResponseTime = responses.reduce((sum, r) => sum + (r.timestamp ? new Date(r.timestamp) - new Date(startTime) : 0), 0) / responses.length;\n\n    // Verificar cantidad de repeticiones/clarificaciones (basado en logs)\n    const clarificationCount = responses.filter(r => r.required_clarification).length;\n\n    // Calcular puntaje de 1-10\n    let score = 10;\n\n    // Penalizar tiempos de respuesta largos (más de 15 segundos por pregunta en promedio)\n    if (avgResponseTime > 15000) {\n      score -= Math.min(3, (avgResponseTime - 15000) / 5000);\n    }\n\n    // Penalizar por cada clarificación requerida\n    score -= clarificationCount * 1.5;\n\n    // Limitar el rango a 1-10\n    score = Math.max(1, Math.min(10, score));\n\n    // Clasificar la calidad\n    if (score >= 8) return 'excellent';\n    if (score >= 6) return 'good';\n    if (score >= 4) return 'fair';\n    return 'poor';\n  };\n\n  // Función para iniciar escucha automáticamente\n  const startListening = async () => {\n    try {\n      console.log('Iniciando escucha...');\n\n      // Verificar soporte y permisos antes de continuar\n      if (!browserSupported) {\n        setErrorMessage('Su navegador no es compatible con el reconocimiento de voz');\n        return;\n      }\n      console.log('Activando el reconocimiento de voz...');\n      setIsListening(true);\n      setTranscript('');\n\n      // Esperar a que termine cualquier síntesis de voz en curso\n      if (isSpeaking) {\n        console.log('Esperando que termine la síntesis de voz...');\n        await new Promise(resolve => {\n          const checkSpeaking = setInterval(() => {\n            if (!isSpeaking) {\n              clearInterval(checkSpeaking);\n              resolve();\n            }\n          }, 100);\n        });\n\n        // Añadir una pausa de 1 segundo después de que termine de hablar\n        // para dar tiempo al usuario de procesar lo que escuchó\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n      console.log('Configurando listenForSpeech...');\n\n      // Número máximo de intentos antes de pasar a la siguiente pregunta\n      const MAX_RETRY_ATTEMPTS = 3;\n\n      // Crear un estado local de intentos para evitar problemas con closures\n      let attemptCount = 0;\n\n      // Para guardar la instancia de reconocimiento\n      let recognitionInstance = null;\n\n      // Función para manejar el resultado del reconocimiento\n      const handleRecognitionResult = result => {\n        console.log('Reconocimiento exitoso:', result);\n        setTranscript(result.transcript);\n        setIsListening(false);\n        if (recognitionInstance) {\n          recognitionInstance.stop();\n        }\n\n        // Procesar la respuesta recibida\n        processResponse(result.transcript);\n      };\n\n      // Función para manejar el fin del reconocimiento\n      const handleRecognitionEnd = async () => {\n        // Si no hay transcript, es porque no se detectó habla\n        if (!transcript) {\n          attemptCount++;\n          console.log(`Intento ${attemptCount}/${MAX_RETRY_ATTEMPTS} sin respuesta detectada`);\n\n          // Seleccionar mensaje de clarificación según el número de intento\n          let clarificationMessage;\n          if (attemptCount === 1) {\n            clarificationMessage = 'No capté bien su respuesta. ¿Podría hablar un poco más claro?';\n          } else if (attemptCount === 2) {\n            clarificationMessage = 'Necesito una respuesta más clara. ¿Podría intentarlo nuevamente?';\n          } else {\n            clarificationMessage = 'Parece que no pude entender correctamente. ¿Podría decirlo de otra manera?';\n          }\n\n          // Hablar mensaje de clarificación\n          await speakText(clarificationMessage);\n\n          // Si aún no alcanzamos el máximo de intentos, intentar de nuevo\n          if (attemptCount < MAX_RETRY_ATTEMPTS) {\n            // Iniciar un nuevo reconocimiento después de una pausa\n            setTimeout(() => {\n              // Crear una nueva instancia de reconocimiento\n              recognitionInstance = listenForSpeech(handleRecognitionResult, error => {\n                console.error('Error en reconocimiento de voz:', error);\n                // No mostrar errores de no-speech al usuario\n                if (!error.includes('no-speech')) {\n                  setErrorMessage(error);\n                }\n              }, handleRecognitionEnd, 0 // Sin timeout\n              );\n            }, 500);\n          } else {\n            // Si alcanzamos el máximo de intentos, pasar a la siguiente pregunta\n            if (currentStep === 'name') {\n              // Si estamos en el paso del nombre, usar 'Anónimo'\n              setUserName('Anónimo');\n              await speakText('Continuaremos sin registrar su nombre.');\n              moveToQuestions();\n            } else if (currentStep === 'questions') {\n              // Si estamos en preguntas, guardar respuesta como 'No responde'\n              saveResponse('No responde');\n            }\n          }\n        }\n      };\n\n      // Configurar reconocimiento con callbacks\n      recognitionInstance = listenForSpeech(handleRecognitionResult, error => {\n        console.error('Error en reconocimiento de voz:', error);\n        // No mostrar errores de no-speech al usuario\n        if (!error.includes('no-speech')) {\n          setErrorMessage(error);\n        }\n      }, handleRecognitionEnd, 0 // Sin timeout - dejamos que el reconocimiento continúe hasta que haya resultado\n      );\n      console.log('Configuración de reconocimiento completada, iniciando...');\n    } catch (error) {\n      console.error('Error al iniciar el reconocimiento de voz:', error);\n      setIsListening(false);\n      setErrorMessage(`Error: ${error.message}`);\n    }\n  };\n\n  // Función para procesar la respuesta del usuario con NLP mejorado\n  const processResponse = async text => {\n    console.log('Procesando respuesta:', text);\n    if (!text || text.trim() === '') {\n      console.log('Respuesta vacía, volviendo a escuchar...');\n      setTimeout(() => startListening(), 1000);\n      return;\n    }\n    setTranscript(text);\n    try {\n      // Analizar el sentimiento general de la respuesta del usuario\n      const sentimentAnalysis = NLPService.analyzeSentiment(text);\n      console.log('Análisis de sentimiento:', sentimentAnalysis);\n      if (currentStep === 'name') {\n        console.log('Procesando nombre:', text);\n\n        // Usar el servicio de NLP avanzado para extraer el nombre\n        const intent = NLPService.analyzeIntent(text);\n\n        // Si la respuesta es una pregunta, manejarla apropiadamente\n        if (intent.intent === 'question') {\n          const supportiveResponse = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'supportive').map(r => r.text);\n          const response = supportiveResponse[Math.floor(Math.random() * supportiveResponse.length)];\n          await speakText('Disculpe, solo necesito saber su nombre para registrar sus respuestas. ¿Cómo se llama?');\n          setTimeout(() => startListening(), 1000);\n          return;\n        }\n\n        // Extraer el nombre usando el servicio NLP\n        let possibleName = NLPService.extractName(text);\n        console.log('Nombre extraído usando NLP:', possibleName);\n\n        // Si no pudimos extraer un nombre válido, usar un nombre genérico\n        if (!possibleName) {\n          possibleName = 'Estimado participante';\n        }\n\n        // Guardar el nombre y continuar\n        setUserName(possibleName);\n\n        // Elegir respuesta basada en el sentimiento detectado\n        let responsePhrase;\n        if (sentimentAnalysis.sentiment === 'positive') {\n          responsePhrase = '¡Encantado de conocerle, ' + possibleName + '! Vamos a comenzar con la primera pregunta.';\n        } else if (sentimentAnalysis.sentiment === 'negative') {\n          responsePhrase = 'Gracias, ' + possibleName + '. Vamos a iniciar la encuesta con la primera pregunta.';\n        } else {\n          responsePhrase = 'Muy bien, ' + possibleName + '. Comencemos con la primera pregunta.';\n        }\n\n        // Confirmar y seguir\n        await speakText(responsePhrase);\n\n        // Pasar a las preguntas con un retraso para asegurar la actualización de estado\n        setTimeout(async () => {\n          console.log('Pasando a las preguntas de la encuesta...');\n          await moveToQuestions();\n        }, 800);\n        return;\n      }\n      if (currentStep === 'questions') {\n        console.log('Procesando respuesta a pregunta:', currentQuestionIndex);\n        const currentQuestion = survey.questions[currentQuestionIndex];\n\n        // Procesar la respuesta usando el servicio NLP avanzado\n        const processedResponse = await NLPService.processResponse(text, currentQuestion.type);\n        console.log('Respuesta procesada con NLP:', processedResponse);\n        if (processedResponse !== null) {\n          // Respuesta válida\n          saveResponse(processedResponse);\n\n          // Seleccionar una respuesta adaptativa basada en el sentimiento del usuario\n          let responsePool;\n          if (sentimentAnalysis.sentiment === 'positive') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'positive');\n          } else if (sentimentAnalysis.sentiment === 'negative') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'supportive');\n          } else {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'neutral');\n          }\n\n          // Si no hay respuestas del tipo adecuado, usar cualquiera\n          if (responsePool.length === 0) {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments;\n          }\n\n          // Seleccionar respuesta adaptativa\n          const acknowledgment = responsePool[Math.floor(Math.random() * responsePool.length)].text;\n          await speakText(acknowledgment);\n\n          // Transición a siguiente pregunta o finalizar\n          if (currentQuestionIndex < survey.questions.length - 1) {\n            // Seleccionar transición según sentimiento\n            let transitionPool;\n            if (sentimentAnalysis.sentiment === 'positive') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'positive');\n            } else if (sentimentAnalysis.sentiment === 'negative') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'supportive');\n            } else {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'neutral');\n            }\n            if (transitionPool.length === 0) {\n              transitionPool = ADAPTIVE_PHRASES.transitions;\n            }\n            const transition = transitionPool[Math.floor(Math.random() * transitionPool.length)].text;\n            await speakText(transition);\n\n            // Incrementar el índice y pasar a la siguiente pregunta\n            setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n\n            // Esperar a que se actualice el estado antes de continuar\n            console.log('Avanzando a la siguiente pregunta...');\n\n            // Usar setTimeout para asegurar que el cambio de estado se complete\n            setTimeout(async () => {\n              console.log('Ejecutando speakCurrentQuestion desde setTimeout');\n              await speakCurrentQuestion();\n            }, 1000);\n          } else {\n            // Finalizar encuesta con un mensaje adaptativo basado en el sentimiento general\n            console.log('Terminando encuesta, enviando respuestas...');\n            await submitResponses();\n          }\n        } else {\n          // Respuesta inválida, elegir clarificación basada en sentimiento\n          console.log('Respuesta inválida, pidiendo aclaración...');\n          let clarificationPool;\n          if (sentimentAnalysis.sentiment === 'negative') {\n            // Si el usuario parece frustrado, usar tono de apoyo\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'supportive');\n          } else {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'neutral');\n          }\n          if (clarificationPool.length === 0) {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications;\n          }\n          const clarification = clarificationPool[Math.floor(Math.random() * clarificationPool.length)].text;\n          await speakText(clarification);\n\n          // Usar setTimeout para evitar problemas con promesas anidadas\n          setTimeout(async () => {\n            console.log('Reiniciando escucha después de aclaración');\n            await startListening();\n          }, 800);\n        }\n      }\n    } catch (error) {\n      console.error('Error durante el procesamiento de la respuesta:', error);\n      // Intentar recuperarse del error\n      setTimeout(async () => {\n        if (currentStep === 'name') {\n          await speakText('Lo siento, hubo un problema. Intentemos de nuevo. ¿Podría decirme su nombre?');\n          setTimeout(() => startListening(), 1000);\n        } else if (currentStep === 'questions') {\n          await speakCurrentQuestion();\n        }\n      }, 1500);\n    }\n  };\n\n  // Función para extraer un nombre de texto\n  const extractName = text => {\n    console.log('Extrayendo nombre de:', text);\n\n    // Si el texto está vacío o no es una cadena\n    if (!text || typeof text !== 'string') {\n      console.log('Texto vacío o no es cadena, usando nombre genérico');\n      return 'Estimado participante';\n    }\n\n    // Eliminar signos de puntuación y normalizar texto\n    const normalizedText = text.replace(/[.,;:¡!¿?]/g, '').trim();\n\n    // Frases comunes al indicar un nombre\n    const namePhrases = ['me llamo', 'mi nombre es', 'soy', 'yo soy', 'puedes llamarme', 'puede llamarme', 'llámame', 'llamame'];\n\n    // Buscar frases de presentación\n    let cleanedText = normalizedText;\n    for (const phrase of namePhrases) {\n      if (normalizedText.toLowerCase().includes(phrase)) {\n        // Extraer texto después de la frase de presentación\n        const parts = normalizedText.toLowerCase().split(phrase);\n        if (parts.length > 1 && parts[1].trim()) {\n          cleanedText = parts[1].trim();\n          console.log(`Frase de presentación '${phrase}' encontrada, texto limpio: '${cleanedText}'`);\n          break;\n        }\n      }\n    }\n\n    // Palabras comunes para ignorar al final\n    const commonWords = ['gracias', 'por favor', 'aquí', 'señor', 'señora', 'mucho gusto'];\n    for (const word of commonWords) {\n      if (cleanedText.toLowerCase().endsWith(word)) {\n        cleanedText = cleanedText.slice(0, -word.length).trim();\n      }\n    }\n\n    // Si el texto limpio está vacío, usar el original\n    if (!cleanedText) {\n      cleanedText = normalizedText;\n    }\n\n    // Obtener las palabras del texto\n    const words = cleanedText.split(/\\s+/);\n\n    // Si solo hay una palabra, asumimos que es el nombre\n    if (words.length === 1) {\n      const name = words[0];\n      console.log('Nombre extraído (una palabra):', name);\n      // Capitalizar primera letra\n      return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n    }\n\n    // Si hay más palabras, tomar hasta 3 palabras como nombre completo\n    const nameWords = words.slice(0, Math.min(3, words.length));\n    let extractedName = nameWords.join(' ');\n\n    // Capitalizar cada palabra\n    extractedName = extractedName.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    console.log('Nombre extraído (múltiples palabras):', extractedName);\n    return extractedName;\n  };\n\n  // Función para guardar respuesta y pasar a la siguiente pregunta\n  const saveResponse = value => {\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = {\n      value,\n      timestamp: new Date().toISOString(),\n      index: currentQuestionIndex\n    };\n    setResponses(updatedResponses);\n\n    // Verificar si hay más preguntas\n    if (currentQuestionIndex < survey.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Fin de la encuesta\n      setCurrentStep('thanks');\n    }\n  };\n\n  // Manejar clic en botón de micrófono\n  const handleMicrophoneClick = () => {\n    if (isListening) {\n      setIsListening(false);\n    } else {\n      startListening();\n    }\n  };\n\n  // Manejar clic en botones de opciones \n  const handleOptionClick = value => {\n    if (isListening) return;\n    processResponse(value);\n  };\n\n  // Solicitar permisos de micrófono\n  const requestMicrophonePermission = async () => {\n    try {\n      const permission = await checkMicrophonePermission();\n      setMicrophonePermission(permission);\n      if (permission) {\n        // Iniciar la encuesta si se conceden los permisos\n        setCurrentStep('welcome');\n      } else {\n        setErrorMessage('No se pudo obtener permiso para el micrófono. Por favor, permita el acceso en la configuración de su navegador.');\n      }\n    } catch (error) {\n      console.error('Error al solicitar permisos de micrófono:', error);\n      setErrorMessage('Error al solicitar permisos de micrófono.');\n    }\n  };\n\n  // Función centralizada para solicitar síntesis de voz\n  const speakText = async text => {\n    if (!text) return Promise.resolve();\n    console.log('Solicitando síntesis de voz para:', text);\n\n    // Evitar interrupción de síntesis en curso y garantizar una experiencia fluida\n    return new Promise(resolve => {\n      setVoiceText(text);\n      setIsSpeaking(true);\n\n      // Configurar callback que se ejecutará cuando termine la síntesis\n      setSpeakEndCallback(() => {\n        console.log('Síntesis de voz completada para:', text);\n        setIsSpeaking(false);\n        setSpeakEndCallback(null);\n        resolve();\n      });\n    });\n  };\n  useEffect(() => {\n    setStartTime(new Date());\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center my-12\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"animate-spin h-8 w-8 text-primary-500\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          className: \"opacity-25\",\n          cx: \"12\",\n          cy: \"12\",\n          r: \"10\",\n          stroke: \"currentColor\",\n          strokeWidth: \"4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          className: \"opacity-75\",\n          fill: \"currentColor\",\n          d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 825,\n      columnNumber: 7\n    }, this);\n  }\n  if (!survey) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"h-16 w-16 mx-auto text-gray-400 mb-4\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-800 mb-2\",\n        children: \"Encuesta no encontrada\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 840,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-6\",\n        children: \"La encuesta que est\\xE1s buscando no existe o ha sido eliminada.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        className: \"btn btn-primary\",\n        children: \"Volver al Inicio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 836,\n      columnNumber: 7\n    }, this);\n  }\n  if (!browserSupported) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"h-16 w-16 mx-auto text-orange-400 mb-4\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-800 mb-2\",\n        children: \"Navegador no compatible\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 855,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-6\",\n        children: \"Esta aplicaci\\xF3n requiere un navegador compatible con la API de Reconocimiento de Voz. Por favor, utilice Chrome, Edge o Safari para continuar.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        className: \"btn btn-primary\",\n        children: \"Intentar Nuevamente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 7\n    }, this);\n  }\n  if (microphonePermission === false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"h-16 w-16 mx-auto text-orange-400 mb-4\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4a1 1 0 01-1-1h-2a1 1 0 01-1-1v-2a1 1 0 01 1-1h2a1 1 0 01 1 1v2a1 1 0 01 1 1h2a1 1 0 01 1 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-800 mb-2\",\n        children: \"Permiso de Micr\\xF3fono Requerido\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-6\",\n        children: \"Para participar en esta encuesta por voz, necesitamos permiso para usar su micr\\xF3fono. Por favor, haga clic en el bot\\xF3n debajo para conceder acceso.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 875,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: requestMicrophonePermission,\n        className: \"btn btn-primary\",\n        children: \"Permitir Micr\\xF3fono\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 879,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 869,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow-md rounded-lg p-6 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: loading ? 'Cargando encuesta...' : survey ? survey.title : 'Encuesta no encontrada'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 890,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 895,\n          columnNumber: 13\n        }, this), !microphonePermission && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: requestMicrophonePermission,\n          className: \"mt-2 btn btn-primary\",\n          children: \"Permitir acceso al micr\\xF3fono\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 894,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center items-center h-40\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 911,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 13\n        }, this) : !browserSupported ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Su navegador no soporta las tecnolog\\xEDas de voz necesarias para esta encuesta.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 915,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-2\",\n            children: \"Por favor, use un navegador compatible como Chrome, Edge o Safari.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fixed bottom-4 right-4 bg-primary-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5 mr-2\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              stroke: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 2,\n                d: \"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 924,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 923,\n              columnNumber: 19\n            }, this), \"Escuchando...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 17\n          }, this), isSpeaking && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fixed bottom-4 left-4 bg-blue-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5 mr-2\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              stroke: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 2,\n                d: \"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 017.072 0m-9.9-2.828a9 9 0 0112.728 0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 934,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 933,\n              columnNumber: 19\n            }, this), \"Hablando...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 932,\n            columnNumber: 17\n          }, this), transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-100 p-4 rounded-lg mb-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-500 mb-1\",\n              children: \"Su respuesta:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 943,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-lg\",\n              children: transcript\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 944,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 942,\n            columnNumber: 17\n          }, this), currentStep === 'questions' && currentQuestionIndex < (survey === null || survey === void 0 ? void 0 : (_survey$questions2 = survey.questions) === null || _survey$questions2 === void 0 ? void 0 : _survey$questions2.length) && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"text-lg font-semibold mb-2\",\n                children: [\"Pregunta \", currentQuestionIndex + 1, \" de \", survey.questions.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 952,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-lg\",\n                children: survey.questions[currentQuestionIndex].text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 955,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 951,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 950,\n            columnNumber: 17\n          }, this), currentStep === 'questions' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-full bg-gray-200 rounded-full h-2.5\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-primary-500 h-2.5 rounded-full\",\n                style: {\n                  width: `${currentQuestionIndex / survey.questions.length * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 964,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 963,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-xs text-gray-500 mt-2\",\n              children: [currentQuestionIndex, \" de \", survey.questions.length, \" preguntas completadas\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 969,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 962,\n            columnNumber: 17\n          }, this), currentStep === 'thanks' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-6 space-y-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-green-600\",\n              children: \"Sus respuestas han sido guardadas correctamente.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 978,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: survey.farewell || 'Gracias por completar esta encuesta.'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 979,\n              columnNumber: 19\n            }, this), showThankYouMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-6 flex space-x-4 justify-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => navigate('/surveys/public'),\n                className: \"btn btn-primary\",\n                children: \"Ver Otras Encuestas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 983,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => navigate('/'),\n                className: \"btn btn-outline\",\n                children: \"Volver al Inicio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 989,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 982,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 977,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 919,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 888,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8 bg-sky-50 p-4 rounded-lg shadow-sm border border-sky-100\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Consejos para una buena experiencia:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1006,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc pl-5 space-y-1 text-gray-700\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Utilice un micr\\xF3fono en un entorno sin ruido\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1008,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Espere a que la aplicaci\\xF3n termine de hablar antes de responder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1009,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Hable con claridad para que el sistema pueda entenderle correctamente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1007,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1005,\n      columnNumber: 7\n    }, this), isSpeaking && /*#__PURE__*/_jsxDEV(SimpleVoice, {\n      text: voiceText,\n      onEnd: speakEndCallback,\n      autoSpeak: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1014,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 887,\n    columnNumber: 5\n  }, this);\n};\n_s(TakeSurvey, \"WXKIa8Wo2MxmMCwjTHNakjYp64Q=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = TakeSurvey;\nexport default TakeSurvey;\nvar _c;\n$RefreshReg$(_c, \"TakeSurvey\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","isSpeechRecognitionSupported","listenForSpeech","checkMicrophonePermission","SurveyService","ResponseService","FaSpinner","FaMicrophone","FaVolumeUp","FaCheckCircle","FaTimesCircle","SimpleVoice","NLPService","jsxDEV","_jsxDEV","TakeSurvey","_s","_survey$questions2","surveyId","navigate","survey","setSurvey","loading","setLoading","currentStep","setCurrentStep","currentQuestionIndex","setCurrentQuestionIndex","responses","setResponses","userName","setUserName","transcript","setTranscript","isSpeaking","setIsSpeaking","isListening","setIsListening","browserSupported","setBrowserSupported","microphonePermission","setMicrophonePermission","showThankYouMessage","setShowThankYouMessage","voiceText","setVoiceText","speakEndCallback","setSpeakEndCallback","startTime","setStartTime","errorMessage","setErrorMessage","ADAPTIVE_PHRASES","acknowledgments","text","tone","transitions","clarifications","greetings","farewells","checkCompatibility","speechRecognitionSupported","speechSynthesisSupported","hasMicrophonePermission","fetchSurvey","surveyData","getPublicSurvey","Date","questions","Array","length","fill","map","value","timestamp","index","required_clarification","error","console","startConversation","log","hour","getHours","greeting","welcomeMessage","title","description","Promise","resolve","checkInterval","setInterval","clearInterval","speakText","setTimeout","startListening","moveToQuestions","speakCurrentQuestion","_survey$questions","questionsLength","question","questionText","type","onQuestionSpeakEnd","onThankYouSpeakEnd","submitResponses","endTime","durationMs","durationMinutes","Math","round","sentimentScores","r","sentiment","analyzeSentiment","score","filter","averageSentiment","sentimentLabel","reduce","sum","formattedResponses","questionId","_id","response","responseTime","metadata","completionTime","overallSentiment","sentimentScore","interactionQuality","calculateInteractionQuality","submitResponse","surveyTitle","respondentName","farewellPool","f","thankYouMessage","floor","random","avgResponseTime","clarificationCount","min","max","checkSpeaking","MAX_RETRY_ATTEMPTS","attemptCount","recognitionInstance","handleRecognitionResult","result","stop","processResponse","handleRecognitionEnd","clarificationMessage","includes","saveResponse","message","trim","sentimentAnalysis","intent","analyzeIntent","supportiveResponse","possibleName","extractName","responsePhrase","currentQuestion","processedResponse","responsePool","acknowledgment","transitionPool","transition","prevIndex","clarificationPool","clarification","normalizedText","replace","namePhrases","cleanedText","phrase","toLowerCase","parts","split","commonWords","word","endsWith","slice","words","name","charAt","toUpperCase","nameWords","extractedName","join","updatedResponses","toISOString","handleMicrophoneClick","handleOptionClick","requestMicrophonePermission","permission","className","children","xmlns","viewBox","cx","cy","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","d","strokeLinecap","strokeLinejoin","onClick","window","location","reload","style","width","farewell","onEnd","autoSpeak","_c","$RefreshReg$"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/pages/TakeSurvey.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { \n  isSpeechRecognitionSupported,\n  listenForSpeech,\n  checkMicrophonePermission\n} from '../utils/voiceSurveyAPI';\nimport { SurveyService, ResponseService } from '../services/apiService';\nimport { FaSpinner, FaMicrophone, FaVolumeUp, FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport SimpleVoice from '../components/SimpleVoice';\nimport NLPService from '../services/nlpService';\n\nconst TakeSurvey = () => {\n  const { surveyId } = useParams();\n  const navigate = useNavigate();\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [currentStep, setCurrentStep] = useState('initial'); // 'initial', 'name', 'questions', 'thanks'\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [userName, setUserName] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [browserSupported, setBrowserSupported] = useState(true);\n  const [microphonePermission, setMicrophonePermission] = useState(null);\n  const [showThankYouMessage, setShowThankYouMessage] = useState(false);\n  const [voiceText, setVoiceText] = useState('');\n  const [speakEndCallback, setSpeakEndCallback] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Conjunto de frases adaptativas clasificadas por tono para mejorar la naturalidad\n  const ADAPTIVE_PHRASES = {\n    acknowledgments: [\n      { text: 'Gracias por su respuesta.', tone: 'neutral' },\n      { text: '¡Excelente! He registrado su respuesta.', tone: 'positive' },\n      { text: 'Perfecto, continuemos.', tone: 'positive' },\n      { text: 'Entendido, muchas gracias.', tone: 'neutral' },\n      { text: 'He anotado su respuesta.', tone: 'neutral' },\n      { text: '¡Genial! Avancemos.', tone: 'positive' },\n      { text: 'Comprendo, continuamos.', tone: 'supportive' },\n      { text: 'Gracias por compartir su opinión.', tone: 'supportive' }\n    ],\n    transitions: [\n      { text: 'Pasemos a la siguiente pregunta.', tone: 'neutral' },\n      { text: 'Continuemos con la siguiente pregunta.', tone: 'neutral' },\n      { text: 'Ahora, la siguiente pregunta.', tone: 'neutral' },\n      { text: 'Avancemos a la siguiente pregunta.', tone: 'positive' },\n      { text: 'Me gustaría preguntarle ahora sobre...', tone: 'supportive' }\n    ],\n    clarifications: [\n      { text: 'Disculpe, no he entendido su respuesta. ¿Podría repetirla?', tone: 'neutral' },\n      { text: 'Parece que no pude entender correctamente. ¿Podría decirlo de otra manera?', tone: 'supportive' },\n      { text: 'Necesito una respuesta más clara. ¿Podría intentarlo nuevamente?', tone: 'neutral' },\n      { text: 'No capté bien su respuesta. ¿Podría hablar un poco más claro?', tone: 'supportive' }\n    ],\n    greetings: [\n      { text: 'Bienvenido a nuestra encuesta. Apreciamos mucho su participación.', tone: 'positive' },\n      { text: 'Gracias por participar en esta encuesta. Sus opiniones son muy importantes.', tone: 'neutral' },\n      { text: 'Le damos la bienvenida a esta encuesta. Valoramos su tiempo y sus respuestas.', tone: 'supportive' }\n    ],\n    farewells: [\n      { text: '¡Muchas gracias por completar la encuesta! Sus respuestas son muy valiosas para nosotros.', tone: 'positive' },\n      { text: 'La encuesta ha finalizado. Agradecemos su participación y su tiempo.', tone: 'neutral' },\n      { text: 'Hemos llegado al final de la encuesta. Realmente apreciamos sus opiniones.', tone: 'supportive' }\n    ]\n  };\n\n  // Comprobar compatibilidad del navegador y permisos\n  useEffect(() => {\n    const checkCompatibility = async () => {\n      // Verificar si el navegador soporta reconocimiento de voz\n      const speechRecognitionSupported = isSpeechRecognitionSupported();\n      const speechSynthesisSupported = true; // isSpeechSynthesisSupported();\n\n      if (!speechRecognitionSupported || !speechSynthesisSupported) {\n        setBrowserSupported(false);\n        setErrorMessage('Su navegador no soporta las tecnologías de voz necesarias para esta encuesta. Por favor, use Chrome, Edge o Safari.');\n        return;\n      }\n\n      // Verificar permisos de micrófono\n      const hasMicrophonePermission = await checkMicrophonePermission();\n      setMicrophonePermission(hasMicrophonePermission);\n\n      if (!hasMicrophonePermission) {\n        setErrorMessage('Necesitamos permiso para usar su micrófono. Por favor, permita el acceso cuando se le solicite.');\n      }\n    };\n\n    checkCompatibility();\n  }, []);\n\n  // Inicialización de la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        // Usar getPublicSurvey en lugar de getSurveyById que no existe\n        const surveyData = await SurveyService.getPublicSurvey(surveyId);\n        setSurvey(surveyData);\n        setLoading(false);\n        // Registrar el tiempo de inicio de la encuesta\n        setStartTime(new Date());\n        \n        // Inicializar array de respuestas vacío\n        if (surveyData && surveyData.questions) {\n          setResponses(Array(surveyData.questions.length).fill(null).map(() => ({ \n            value: '', \n            timestamp: null,\n            index: 0,\n            required_clarification: false\n          })));\n        }\n      } catch (error) {\n        console.error('Error al obtener encuesta:', error);\n        setErrorMessage('No se pudo cargar la encuesta. Por favor, inténtelo de nuevo más tarde.');\n        setLoading(false);\n      }\n    };\n\n    fetchSurvey();\n  }, [surveyId]);\n\n  // Iniciar conversación automáticamente cuando la encuesta está cargada\n  useEffect(() => {\n    if (survey && currentStep === 'initial') {\n      startConversation();\n    }\n  }, [survey, currentStep]);\n\n  // Iniciar la conversación automática\n  const startConversation = async () => {\n    console.log('Función startConversation ejecutada');\n    console.log('Estado actual:', survey);\n    \n    try {\n      // Obtener la hora del día para personalizar el saludo\n      const hour = new Date().getHours();\n      let greeting;\n      \n      if (hour < 12) {\n        greeting = 'Buenos días';\n      } else if (hour < 18) {\n        greeting = 'Buenas tardes';\n      } else {\n        greeting = 'Buenas noches';\n      }\n      \n      // Construir un mensaje de bienvenida completo y natural\n      const welcomeMessage = `${greeting}. Bienvenido a nuestra encuesta. Apreciamos mucho su participación. Esta encuesta es sobre: ${survey.title}. ${survey.description || ''} Para comenzar, ¿podría decirme su nombre por favor?`;\n      \n      console.log('Enviando mensaje de bienvenida con solicitud de nombre:', welcomeMessage);\n      \n      // Cambiar el estado para mostrar que estamos en el paso de solicitar nombre\n      setCurrentStep('name');\n      \n      // Primero asegurarnos de que no estamos hablando\n      if (isSpeaking) {\n        await new Promise(resolve => {\n          const checkInterval = setInterval(() => {\n            if (!isSpeaking) {\n              clearInterval(checkInterval);\n              resolve();\n            }\n          }, 100);\n        });\n      }\n      \n      // Hablar el mensaje de bienvenida con solicitud de nombre\n      await speakText(welcomeMessage);\n      \n      console.log('Mensaje de bienvenida completado');\n      \n      // Esperar un momento antes de comenzar a escuchar\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      console.log('Iniciando reconocimiento de voz para captar nombre...');\n      startListening();\n    } catch (error) {\n      console.error('Error al iniciar conversación:', error);\n      setErrorMessage('Ocurrió un error al iniciar la encuesta. Por favor, recargue la página e intente nuevamente.');\n    }\n  };\n\n  // Mover a la sección de preguntas\n  const moveToQuestions = async () => {\n    console.log('Moviendo a la sección de preguntas...');\n    setCurrentStep('questions');\n    setCurrentQuestionIndex(0);\n    // Pequeña pausa para asegurar que los estados se actualicen\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await speakCurrentQuestion();\n  };\n\n  // Hablar la pregunta actual\n  const speakCurrentQuestion = async () => {\n    console.log('Hablando pregunta actual:', currentQuestionIndex);\n    if (!survey || currentQuestionIndex >= survey.questions.length) {\n      console.error('No hay más preguntas o índice inválido:', {currentQuestionIndex, questionsLength: survey?.questions?.length});\n      return;\n    }\n    \n    const question = survey.questions[currentQuestionIndex];\n    console.log('Pregunta a formular:', question);\n    let questionText = question.text;\n    \n    // Añadir instrucciones específicas según tipo de pregunta\n    if (question.type === 'rating') {\n      questionText += ' Por favor, responda con un número del 1 al 5, donde 1 es lo más bajo y 5 lo más alto.';\n    } else if (question.type === 'yesno') {\n      questionText += ' Por favor, responda sí o no.';\n    }\n    \n    // Hablar la pregunta\n    setIsSpeaking(true);\n    try {\n      await speakText(questionText);\n      console.log('Pregunta terminada de hablar, iniciando escucha...');\n      setIsSpeaking(false);\n      // Pequeña pausa antes de empezar a escuchar\n      setTimeout(async () => {\n        console.log('Iniciando escucha desde setTimeout después de hablar pregunta');\n        await startListening();\n      }, 800);\n    } catch (error) {\n      console.error('Error al hablar la pregunta:', error);\n      setIsSpeaking(false);\n      // Reintentar en caso de error\n      setTimeout(() => speakCurrentQuestion(), 1500);\n    }\n  };\n\n  // Función para cuando termina de hablar la pregunta\n  const onQuestionSpeakEnd = () => {\n    setTimeout(startListening, 500);\n  };\n\n  // Función para cuando termina de hablar el mensaje de agradecimiento\n  const onThankYouSpeakEnd = async () => {\n    try {\n      // Enviar respuestas al servidor\n      await submitResponses();\n    } catch (error) {\n      console.error('Error submitting responses:', error);\n    }\n  };\n\n  // Función para enviar respuestas al servidor\n  const submitResponses = async () => {\n    try {\n      console.log('Enviando respuestas al servidor:', responses);\n      \n      // Calcular la duración total de la encuesta\n      const endTime = new Date();\n      const durationMs = startTime ? endTime - startTime : 0;\n      const durationMinutes = Math.round(durationMs / 60000 * 10) / 10; // Duración en minutos con 1 decimal\n      \n      // Calcular el sentimiento general de las respuestas\n      const sentimentScores = responses.map(r => {\n        // Solo analizar respuestas abiertas, no calificaciones numéricas o sí/no\n        if (typeof r.value === 'string' && r.value.length > 3) {\n          const sentiment = NLPService.analyzeSentiment(r.value);\n          return sentiment.score;\n        }\n        return null;\n      }).filter(score => score !== null);\n      \n      // Calcular el sentimiento promedio si hay suficientes datos\n      let averageSentiment = 0;\n      let sentimentLabel = 'neutral';\n      \n      if (sentimentScores.length > 0) {\n        averageSentiment = sentimentScores.reduce((sum, score) => sum + score, 0) / sentimentScores.length;\n        \n        if (averageSentiment > 0.2) {\n          sentimentLabel = 'positive';\n        } else if (averageSentiment < -0.2) {\n          sentimentLabel = 'negative';\n        }\n      }\n      \n      // Incluir metadatos de IA con las respuestas\n      const formattedResponses = {\n        responses: responses.map(r => ({\n          questionId: survey.questions[r.index]._id,\n          questionText: survey.questions[r.index].text,\n          response: r.value,\n          responseTime: r.timestamp\n        })),\n        metadata: {\n          completionTime: durationMinutes,\n          overallSentiment: sentimentLabel,\n          sentimentScore: averageSentiment,\n          interactionQuality: calculateInteractionQuality()\n        }\n      };\n      \n      // Enviar respuestas con metadatos de IA\n      await ResponseService.submitResponse({\n        surveyId: survey._id,\n        surveyTitle: survey.title,\n        respondentName: userName || 'Anónimo',\n        responses: formattedResponses\n      });\n      \n      // Seleccionar mensaje de despedida basado en el sentimiento general\n      let farewellPool;\n      if (sentimentLabel === 'positive') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'positive');\n      } else if (sentimentLabel === 'negative') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'supportive');\n      } else {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'neutral');\n      }\n      \n      // Si no hay mensajes del tipo adecuado, usar cualquiera\n      if (farewellPool.length === 0) {\n        farewellPool = ADAPTIVE_PHRASES.farewells;\n      }\n      \n      const thankYouMessage = farewellPool[Math.floor(Math.random() * farewellPool.length)].text;\n      \n      // Cambiar a pantalla de agradecimiento\n      setCurrentStep('thanks');\n      \n      // Hablar mensaje de agradecimiento personalizado\n      await speakText(thankYouMessage);\n      setShowThankYouMessage(true);\n      \n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setErrorMessage('Hubo un problema al enviar sus respuestas. Por favor, inténtelo de nuevo más tarde.');\n    }\n  };\n  \n  // Calcular una puntuación de calidad de interacción basada en métricas de la encuesta\n  const calculateInteractionQuality = () => {\n    // Si no hay respuestas, calidad desconocida\n    if (!responses || responses.length === 0) return 'unknown';\n    \n    // Verificar tiempos de respuesta\n    const avgResponseTime = responses.reduce((sum, r) => sum + (r.timestamp ? new Date(r.timestamp) - new Date(startTime) : 0), 0) / responses.length;\n    \n    // Verificar cantidad de repeticiones/clarificaciones (basado en logs)\n    const clarificationCount = responses.filter(r => r.required_clarification).length;\n    \n    // Calcular puntaje de 1-10\n    let score = 10;\n    \n    // Penalizar tiempos de respuesta largos (más de 15 segundos por pregunta en promedio)\n    if (avgResponseTime > 15000) {\n      score -= Math.min(3, (avgResponseTime - 15000) / 5000);\n    }\n    \n    // Penalizar por cada clarificación requerida\n    score -= clarificationCount * 1.5;\n    \n    // Limitar el rango a 1-10\n    score = Math.max(1, Math.min(10, score));\n    \n    // Clasificar la calidad\n    if (score >= 8) return 'excellent';\n    if (score >= 6) return 'good';\n    if (score >= 4) return 'fair';\n    return 'poor';\n  };\n\n  // Función para iniciar escucha automáticamente\n  const startListening = async () => {\n    try {\n      console.log('Iniciando escucha...');\n      \n      // Verificar soporte y permisos antes de continuar\n      if (!browserSupported) {\n        setErrorMessage('Su navegador no es compatible con el reconocimiento de voz');\n        return;\n      }\n      \n      console.log('Activando el reconocimiento de voz...');\n      setIsListening(true);\n      setTranscript('');\n      \n      // Esperar a que termine cualquier síntesis de voz en curso\n      if (isSpeaking) {\n        console.log('Esperando que termine la síntesis de voz...');\n        await new Promise(resolve => {\n          const checkSpeaking = setInterval(() => {\n            if (!isSpeaking) {\n              clearInterval(checkSpeaking);\n              resolve();\n            }\n          }, 100);\n        });\n        \n        // Añadir una pausa de 1 segundo después de que termine de hablar\n        // para dar tiempo al usuario de procesar lo que escuchó\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n      \n      console.log('Configurando listenForSpeech...');\n      \n      // Número máximo de intentos antes de pasar a la siguiente pregunta\n      const MAX_RETRY_ATTEMPTS = 3;\n      \n      // Crear un estado local de intentos para evitar problemas con closures\n      let attemptCount = 0;\n      \n      // Para guardar la instancia de reconocimiento\n      let recognitionInstance = null;\n      \n      // Función para manejar el resultado del reconocimiento\n      const handleRecognitionResult = (result) => {\n        console.log('Reconocimiento exitoso:', result);\n        setTranscript(result.transcript);\n        setIsListening(false);\n        \n        if (recognitionInstance) {\n          recognitionInstance.stop();\n        }\n        \n        // Procesar la respuesta recibida\n        processResponse(result.transcript);\n      };\n      \n      // Función para manejar el fin del reconocimiento\n      const handleRecognitionEnd = async () => {\n        // Si no hay transcript, es porque no se detectó habla\n        if (!transcript) {\n          attemptCount++;\n          console.log(`Intento ${attemptCount}/${MAX_RETRY_ATTEMPTS} sin respuesta detectada`);\n          \n          // Seleccionar mensaje de clarificación según el número de intento\n          let clarificationMessage;\n          if (attemptCount === 1) {\n            clarificationMessage = 'No capté bien su respuesta. ¿Podría hablar un poco más claro?';\n          } else if (attemptCount === 2) {\n            clarificationMessage = 'Necesito una respuesta más clara. ¿Podría intentarlo nuevamente?';\n          } else {\n            clarificationMessage = 'Parece que no pude entender correctamente. ¿Podría decirlo de otra manera?';\n          }\n          \n          // Hablar mensaje de clarificación\n          await speakText(clarificationMessage);\n          \n          // Si aún no alcanzamos el máximo de intentos, intentar de nuevo\n          if (attemptCount < MAX_RETRY_ATTEMPTS) {\n            // Iniciar un nuevo reconocimiento después de una pausa\n            setTimeout(() => {\n              // Crear una nueva instancia de reconocimiento\n              recognitionInstance = listenForSpeech(\n                handleRecognitionResult,\n                (error) => {\n                  console.error('Error en reconocimiento de voz:', error);\n                  // No mostrar errores de no-speech al usuario\n                  if (!error.includes('no-speech')) {\n                    setErrorMessage(error);\n                  }\n                },\n                handleRecognitionEnd,\n                0 // Sin timeout\n              );\n            }, 500);\n          } else {\n            // Si alcanzamos el máximo de intentos, pasar a la siguiente pregunta\n            if (currentStep === 'name') {\n              // Si estamos en el paso del nombre, usar 'Anónimo'\n              setUserName('Anónimo');\n              await speakText('Continuaremos sin registrar su nombre.');\n              moveToQuestions();\n            } else if (currentStep === 'questions') {\n              // Si estamos en preguntas, guardar respuesta como 'No responde'\n              saveResponse('No responde');\n            }\n          }\n        }\n      };\n      \n      // Configurar reconocimiento con callbacks\n      recognitionInstance = listenForSpeech(\n        handleRecognitionResult,\n        (error) => {\n          console.error('Error en reconocimiento de voz:', error);\n          // No mostrar errores de no-speech al usuario\n          if (!error.includes('no-speech')) {\n            setErrorMessage(error);\n          }\n        },\n        handleRecognitionEnd,\n        0 // Sin timeout - dejamos que el reconocimiento continúe hasta que haya resultado\n      );\n      \n      console.log('Configuración de reconocimiento completada, iniciando...');\n      \n    } catch (error) {\n      console.error('Error al iniciar el reconocimiento de voz:', error);\n      setIsListening(false);\n      setErrorMessage(`Error: ${error.message}`);\n    }\n  };\n\n  // Función para procesar la respuesta del usuario con NLP mejorado\n  const processResponse = async (text) => {\n    console.log('Procesando respuesta:', text);\n    if (!text || text.trim() === '') {\n      console.log('Respuesta vacía, volviendo a escuchar...');\n      setTimeout(() => startListening(), 1000);\n      return;\n    }\n    \n    setTranscript(text);\n    \n    try {\n      // Analizar el sentimiento general de la respuesta del usuario\n      const sentimentAnalysis = NLPService.analyzeSentiment(text);\n      console.log('Análisis de sentimiento:', sentimentAnalysis);\n      \n      if (currentStep === 'name') {\n        console.log('Procesando nombre:', text);\n        \n        // Usar el servicio de NLP avanzado para extraer el nombre\n        const intent = NLPService.analyzeIntent(text);\n        \n        // Si la respuesta es una pregunta, manejarla apropiadamente\n        if (intent.intent === 'question') {\n          const supportiveResponse = ADAPTIVE_PHRASES.clarifications\n            .filter(r => r.tone === 'supportive')\n            .map(r => r.text);\n          \n          const response = supportiveResponse[Math.floor(Math.random() * supportiveResponse.length)];\n          await speakText('Disculpe, solo necesito saber su nombre para registrar sus respuestas. ¿Cómo se llama?');\n          setTimeout(() => startListening(), 1000);\n          return;\n        }\n        \n        // Extraer el nombre usando el servicio NLP\n        let possibleName = NLPService.extractName(text);\n        console.log('Nombre extraído usando NLP:', possibleName);\n        \n        // Si no pudimos extraer un nombre válido, usar un nombre genérico\n        if (!possibleName) {\n          possibleName = 'Estimado participante';\n        }\n        \n        // Guardar el nombre y continuar\n        setUserName(possibleName);\n        \n        // Elegir respuesta basada en el sentimiento detectado\n        let responsePhrase;\n        if (sentimentAnalysis.sentiment === 'positive') {\n          responsePhrase = '¡Encantado de conocerle, ' + possibleName + '! Vamos a comenzar con la primera pregunta.';\n        } else if (sentimentAnalysis.sentiment === 'negative') {\n          responsePhrase = 'Gracias, ' + possibleName + '. Vamos a iniciar la encuesta con la primera pregunta.';\n        } else {\n          responsePhrase = 'Muy bien, ' + possibleName + '. Comencemos con la primera pregunta.';\n        }\n        \n        // Confirmar y seguir\n        await speakText(responsePhrase);\n        \n        // Pasar a las preguntas con un retraso para asegurar la actualización de estado\n        setTimeout(async () => {\n          console.log('Pasando a las preguntas de la encuesta...');\n          await moveToQuestions();\n        }, 800);\n        \n        return;\n      }\n      \n      if (currentStep === 'questions') {\n        console.log('Procesando respuesta a pregunta:', currentQuestionIndex);\n        const currentQuestion = survey.questions[currentQuestionIndex];\n        \n        // Procesar la respuesta usando el servicio NLP avanzado\n        const processedResponse = await NLPService.processResponse(text, currentQuestion.type);\n        console.log('Respuesta procesada con NLP:', processedResponse);\n        \n        if (processedResponse !== null) {\n          // Respuesta válida\n          saveResponse(processedResponse);\n          \n          // Seleccionar una respuesta adaptativa basada en el sentimiento del usuario\n          let responsePool;\n          if (sentimentAnalysis.sentiment === 'positive') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'positive');\n          } else if (sentimentAnalysis.sentiment === 'negative') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'supportive');\n          } else {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'neutral');\n          }\n          \n          // Si no hay respuestas del tipo adecuado, usar cualquiera\n          if (responsePool.length === 0) {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments;\n          }\n          \n          // Seleccionar respuesta adaptativa\n          const acknowledgment = responsePool[Math.floor(Math.random() * responsePool.length)].text;\n          await speakText(acknowledgment);\n          \n          // Transición a siguiente pregunta o finalizar\n          if (currentQuestionIndex < survey.questions.length - 1) {\n            // Seleccionar transición según sentimiento\n            let transitionPool;\n            if (sentimentAnalysis.sentiment === 'positive') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'positive');\n            } else if (sentimentAnalysis.sentiment === 'negative') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'supportive');\n            } else {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'neutral');\n            }\n            \n            if (transitionPool.length === 0) {\n              transitionPool = ADAPTIVE_PHRASES.transitions;\n            }\n            \n            const transition = transitionPool[Math.floor(Math.random() * transitionPool.length)].text;\n            await speakText(transition);\n            \n            // Incrementar el índice y pasar a la siguiente pregunta\n            setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n            \n            // Esperar a que se actualice el estado antes de continuar\n            console.log('Avanzando a la siguiente pregunta...');\n            \n            // Usar setTimeout para asegurar que el cambio de estado se complete\n            setTimeout(async () => {\n              console.log('Ejecutando speakCurrentQuestion desde setTimeout');\n              await speakCurrentQuestion();\n            }, 1000);\n          } else {\n            // Finalizar encuesta con un mensaje adaptativo basado en el sentimiento general\n            console.log('Terminando encuesta, enviando respuestas...');\n            await submitResponses();\n          }\n        } else {\n          // Respuesta inválida, elegir clarificación basada en sentimiento\n          console.log('Respuesta inválida, pidiendo aclaración...');\n          \n          let clarificationPool;\n          if (sentimentAnalysis.sentiment === 'negative') {\n            // Si el usuario parece frustrado, usar tono de apoyo\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'supportive');\n          } else {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'neutral');\n          }\n          \n          if (clarificationPool.length === 0) {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications;\n          }\n          \n          const clarification = clarificationPool[Math.floor(Math.random() * clarificationPool.length)].text;\n          await speakText(clarification);\n          \n          // Usar setTimeout para evitar problemas con promesas anidadas\n          setTimeout(async () => {\n            console.log('Reiniciando escucha después de aclaración');\n            await startListening();\n          }, 800);\n        }\n      }\n    } catch (error) {\n      console.error('Error durante el procesamiento de la respuesta:', error);\n      // Intentar recuperarse del error\n      setTimeout(async () => {\n        if (currentStep === 'name') {\n          await speakText('Lo siento, hubo un problema. Intentemos de nuevo. ¿Podría decirme su nombre?');\n          setTimeout(() => startListening(), 1000);\n        } else if (currentStep === 'questions') {\n          await speakCurrentQuestion();\n        }\n      }, 1500);\n    }\n  };\n\n  // Función para extraer un nombre de texto\n  const extractName = (text) => {\n    console.log('Extrayendo nombre de:', text);\n    \n    // Si el texto está vacío o no es una cadena\n    if (!text || typeof text !== 'string') {\n      console.log('Texto vacío o no es cadena, usando nombre genérico');\n      return 'Estimado participante';\n    }\n    \n    // Eliminar signos de puntuación y normalizar texto\n    const normalizedText = text.replace(/[.,;:¡!¿?]/g, '').trim();\n    \n    // Frases comunes al indicar un nombre\n    const namePhrases = [\n      'me llamo', 'mi nombre es', 'soy', 'yo soy', \n      'puedes llamarme', 'puede llamarme', 'llámame', 'llamame'\n    ];\n    \n    // Buscar frases de presentación\n    let cleanedText = normalizedText;\n    for (const phrase of namePhrases) {\n      if (normalizedText.toLowerCase().includes(phrase)) {\n        // Extraer texto después de la frase de presentación\n        const parts = normalizedText.toLowerCase().split(phrase);\n        if (parts.length > 1 && parts[1].trim()) {\n          cleanedText = parts[1].trim();\n          console.log(`Frase de presentación '${phrase}' encontrada, texto limpio: '${cleanedText}'`);\n          break;\n        }\n      }\n    }\n    \n    // Palabras comunes para ignorar al final\n    const commonWords = ['gracias', 'por favor', 'aquí', 'señor', 'señora', 'mucho gusto'];\n    for (const word of commonWords) {\n      if (cleanedText.toLowerCase().endsWith(word)) {\n        cleanedText = cleanedText.slice(0, -(word.length)).trim();\n      }\n    }\n    \n    // Si el texto limpio está vacío, usar el original\n    if (!cleanedText) {\n      cleanedText = normalizedText;\n    }\n    \n    // Obtener las palabras del texto\n    const words = cleanedText.split(/\\s+/);\n    \n    // Si solo hay una palabra, asumimos que es el nombre\n    if (words.length === 1) {\n      const name = words[0];\n      console.log('Nombre extraído (una palabra):', name);\n      // Capitalizar primera letra\n      return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n    }\n    \n    // Si hay más palabras, tomar hasta 3 palabras como nombre completo\n    const nameWords = words.slice(0, Math.min(3, words.length));\n    let extractedName = nameWords.join(' ');\n    \n    // Capitalizar cada palabra\n    extractedName = extractedName.split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n    \n    console.log('Nombre extraído (múltiples palabras):', extractedName);\n    return extractedName;\n  };\n\n  // Función para guardar respuesta y pasar a la siguiente pregunta\n  const saveResponse = (value) => {\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = {\n      value,\n      timestamp: new Date().toISOString(),\n      index: currentQuestionIndex\n    };\n    setResponses(updatedResponses);\n\n    // Verificar si hay más preguntas\n    if (currentQuestionIndex < survey.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Fin de la encuesta\n      setCurrentStep('thanks');\n    }\n  };\n\n  // Manejar clic en botón de micrófono\n  const handleMicrophoneClick = () => {\n    if (isListening) {\n      setIsListening(false);\n    } else {\n      startListening();\n    }\n  };\n\n  // Manejar clic en botones de opciones \n  const handleOptionClick = (value) => {\n    if (isListening) return;\n\n    processResponse(value);\n  };\n\n  // Solicitar permisos de micrófono\n  const requestMicrophonePermission = async () => {\n    try {\n      const permission = await checkMicrophonePermission();\n      setMicrophonePermission(permission);\n\n      if (permission) {\n        // Iniciar la encuesta si se conceden los permisos\n        setCurrentStep('welcome');\n      } else {\n        setErrorMessage('No se pudo obtener permiso para el micrófono. Por favor, permita el acceso en la configuración de su navegador.');\n      }\n    } catch (error) {\n      console.error('Error al solicitar permisos de micrófono:', error);\n      setErrorMessage('Error al solicitar permisos de micrófono.');\n    }\n  };\n\n  // Función centralizada para solicitar síntesis de voz\n  const speakText = async (text) => {\n    if (!text) return Promise.resolve();\n    console.log('Solicitando síntesis de voz para:', text);\n    \n    // Evitar interrupción de síntesis en curso y garantizar una experiencia fluida\n    return new Promise((resolve) => {\n      setVoiceText(text);\n      setIsSpeaking(true);\n      \n      // Configurar callback que se ejecutará cuando termine la síntesis\n      setSpeakEndCallback(() => {\n        console.log('Síntesis de voz completada para:', text);\n        setIsSpeaking(false);\n        setSpeakEndCallback(null);\n        resolve();\n      });\n    });\n  };\n\n  useEffect(() => {\n    setStartTime(new Date());\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center my-12\">\n        <svg className=\"animate-spin h-8 w-8 text-primary-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n      </div>\n    );\n  }\n\n  if (!survey) {\n    return (\n      <div className=\"card text-center py-12\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n        </svg>\n        <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Encuesta no encontrada</h3>\n        <p className=\"text-gray-600 mb-6\">La encuesta que estás buscando no existe o ha sido eliminada.</p>\n        <button onClick={() => navigate('/')} className=\"btn btn-primary\">\n          Volver al Inicio\n        </button>\n      </div>\n    );\n  }\n\n  if (!browserSupported) {\n    return (\n      <div className=\"card text-center py-12\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-orange-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n        </svg>\n        <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Navegador no compatible</h3>\n        <p className=\"text-gray-600 mb-6\">\n          Esta aplicación requiere un navegador compatible con la API de Reconocimiento de Voz.\n          Por favor, utilice Chrome, Edge o Safari para continuar.\n        </p>\n        <button onClick={() => window.location.reload()} className=\"btn btn-primary\">\n          Intentar Nuevamente\n        </button>\n      </div>\n    );\n  }\n\n  if (microphonePermission === false) {\n    return (\n      <div className=\"card text-center py-12\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-orange-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4a1 1 0 01-1-1h-2a1 1 0 01-1-1v-2a1 1 0 01 1-1h2a1 1 0 01 1 1v2a1 1 0 01 1 1h2a1 1 0 01 1 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2z\" />\n        </svg>\n        <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Permiso de Micrófono Requerido</h3>\n        <p className=\"text-gray-600 mb-6\">\n          Para participar en esta encuesta por voz, necesitamos permiso para usar su micrófono.\n          Por favor, haga clic en el botón debajo para conceder acceso.\n        </p>\n        <button onClick={requestMicrophonePermission} className=\"btn btn-primary\">\n          Permitir Micrófono\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-4\">\n      <div className=\"bg-white shadow-md rounded-lg p-6 mb-6\">\n        {/* Encabezado */}\n        <h1 className=\"text-2xl font-bold mb-4\">{loading ? 'Cargando encuesta...' : (survey ? survey.title : 'Encuesta no encontrada')}</h1>\n        \n        {/* Mensajes de error */}\n        {errorMessage && (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n            <p>{errorMessage}</p>\n            {!microphonePermission && (\n              <button\n                onClick={requestMicrophonePermission}\n                className=\"mt-2 btn btn-primary\"\n              >\n                Permitir acceso al micrófono\n              </button>\n            )}\n          </div>\n        )}\n\n        {/* Contenido principal */}\n        <div className=\"mb-6\">\n          {loading ? (\n            <div className=\"flex justify-center items-center h-40\">\n              <div className=\"spinner\"></div>\n            </div>\n          ) : !browserSupported ? (\n            <div className=\"bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded\">\n              <p>Su navegador no soporta las tecnologías de voz necesarias para esta encuesta.</p>\n              <p className=\"mt-2\">Por favor, use un navegador compatible como Chrome, Edge o Safari.</p>\n            </div>\n          ) : (\n            <div>\n              {/* Indicador de escucha activa */}\n              {isListening && (\n                <div className=\"fixed bottom-4 right-4 bg-primary-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\" />\n                  </svg>\n                  Escuchando...\n                </div>\n              )}\n              \n              {/* Indicador de habla activa */}\n              {isSpeaking && (\n                <div className=\"fixed bottom-4 left-4 bg-blue-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 017.072 0m-9.9-2.828a9 9 0 0112.728 0\" />\n                  </svg>\n                  Hablando...\n                </div>\n              )}\n              \n              {/* Transcripción de voz */}\n              {transcript && (\n                <div className=\"bg-gray-100 p-4 rounded-lg mb-6\">\n                  <div className=\"text-sm text-gray-500 mb-1\">Su respuesta:</div>\n                  <div className=\"text-lg\">{transcript}</div>\n                </div>\n              )}\n              \n              {/* Contenido según el paso actual */}\n              {currentStep === 'questions' && currentQuestionIndex < survey?.questions?.length && (\n                <div>\n                  <div className=\"mb-4\">\n                    <h3 className=\"text-lg font-semibold mb-2\">\n                      Pregunta {currentQuestionIndex + 1} de {survey.questions.length}\n                    </h3>\n                    <p className=\"text-lg\">{survey.questions[currentQuestionIndex].text}</p>\n                  </div>\n                </div>\n              )}\n              \n              {/* Progreso de la encuesta */}\n              {currentStep === 'questions' && (\n                <div className=\"mt-8\">\n                  <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                    <div\n                      className=\"bg-primary-500 h-2.5 rounded-full\"\n                      style={{ width: `${((currentQuestionIndex) / survey.questions.length) * 100}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-2\">\n                    {currentQuestionIndex} de {survey.questions.length} preguntas completadas\n                  </div>\n                </div>\n              )}\n              \n              {/* Mensaje final */}\n              {currentStep === 'thanks' && (\n                <div className=\"mt-6 space-y-4\">\n                  <p className=\"text-green-600\">Sus respuestas han sido guardadas correctamente.</p>\n                  <p>{survey.farewell || 'Gracias por completar esta encuesta.'}</p>\n                  \n                  {showThankYouMessage && (\n                    <div className=\"mt-6 flex space-x-4 justify-center\">\n                      <button\n                        onClick={() => navigate('/surveys/public')}\n                        className=\"btn btn-primary\"\n                      >\n                        Ver Otras Encuestas\n                      </button>\n                      <button\n                        onClick={() => navigate('/')}\n                        className=\"btn btn-outline\"\n                      >\n                        Volver al Inicio\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Instrucciones actualizadas */}\n      <div className=\"mt-8 bg-sky-50 p-4 rounded-lg shadow-sm border border-sky-100\">\n        <h3 className=\"text-lg font-semibold mb-2\">Consejos para una buena experiencia:</h3>\n        <ul className=\"list-disc pl-5 space-y-1 text-gray-700\">\n          <li>Utilice un micrófono en un entorno sin ruido</li>\n          <li>Espere a que la aplicación termine de hablar antes de responder</li>\n          <li>Hable con claridad para que el sistema pueda entenderle correctamente</li>\n        </ul>\n      </div>\n      {isSpeaking && (\n        <SimpleVoice\n          text={voiceText}\n          onEnd={speakEndCallback}\n          autoSpeak={true}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default TakeSurvey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}