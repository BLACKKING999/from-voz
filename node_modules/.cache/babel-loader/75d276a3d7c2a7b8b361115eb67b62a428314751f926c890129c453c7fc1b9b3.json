{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\Sistema de Encuestas por Voz\\\\client\\\\src\\\\components\\\\SimpleVoice.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\n\n/**\n * Componente automático para síntesis de voz\n * Habla automáticamente al montarse y notifica cuando termina\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleVoice = ({\n  text,\n  onEnd,\n  autoPlay = true\n}) => {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const synthesisRef = useRef(null);\n\n  // Efecto para iniciar la síntesis de voz automáticamente\n  useEffect(() => {\n    if (autoPlay && text && text.trim() !== '') {\n      console.log('SimpleVoice recibió texto para hablar:', text);\n      speak();\n    }\n\n    // Limpieza al desmontar o cambiar el texto\n    return () => {\n      if (window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n    };\n  }, [text, autoPlay]);\n\n  // Efecto de limpieza al desmontar\n  useEffect(() => {\n    return () => {\n      // Cancelar síntesis al desmontar\n      if (window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n    };\n  }, []);\n  const speak = () => {\n    if (!window.speechSynthesis) {\n      console.error(\"Speech synthesis no está disponible en este navegador\");\n      if (onEnd) {\n        setTimeout(() => onEnd(), 500); // Llamar al callback en caso de error\n      }\n      return;\n    }\n    if (!text || text.trim() === '') {\n      console.warn(\"Se intentó hablar un texto vacío\");\n      if (onEnd) {\n        setTimeout(() => onEnd(), 500); // Llamar al callback con texto vacío\n      }\n      return;\n    }\n    try {\n      // Cancelar cualquier síntesis anterior\n      window.speechSynthesis.cancel();\n      console.log('Iniciando síntesis de voz en SimpleVoice');\n\n      // Crear un nuevo utterance\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'es-ES';\n      utterance.rate = 1;\n      utterance.pitch = 1;\n      utterance.volume = 1;\n\n      // Guardar referencia para poder cancelar si es necesario\n      synthesisRef.current = utterance;\n\n      // Configurar eventos\n      setIsSpeaking(true);\n      utterance.onend = () => {\n        console.log('SimpleVoice: Síntesis completada para:', text);\n        setIsSpeaking(false);\n        if (onEnd) {\n          console.log('SimpleVoice: Ejecutando callback onEnd');\n          // Usar setTimeout para evitar problemas de sincronización\n          setTimeout(() => onEnd(), 100);\n        }\n      };\n      utterance.onerror = error => {\n        console.error('Error en síntesis de voz:', error);\n        setIsSpeaking(false);\n        if (onEnd) {\n          console.log('SimpleVoice: Ejecutando callback onEnd después de error');\n          setTimeout(() => onEnd(), 100);\n        }\n      };\n\n      // Intentar obtener voces en español\n      let voices = window.speechSynthesis.getVoices().filter(voice => voice.lang.includes('es') || voice.name.includes('Spanish'));\n\n      // Si no hay voces en español, usar la primera disponible\n      if (voices.length > 0) {\n        utterance.voice = voices[0];\n        console.log('Usando voz:', voices[0].name);\n      }\n\n      // Hablar automáticamente\n      window.speechSynthesis.speak(utterance);\n\n      // Backup en caso de que no se dispare el evento onend\n      // Esto ocurre en algunos navegadores\n      const maxSpeakingTime = Math.max(5000, text.length * 90); // Estimación de tiempo basada en longitud\n      setTimeout(() => {\n        if (isSpeaking) {\n          console.warn('SimpleVoice: No se detectó fin de síntesis, forzando llamada al callback');\n          setIsSpeaking(false);\n          if (onEnd) {\n            onEnd();\n          }\n        }\n      }, maxSpeakingTime);\n\n      // Workaround para solucionar el problema de Chrome donde la síntesis se detiene\n      // después de unos 15 segundos\n      const resumeSynthesis = () => {\n        if (window.speechSynthesis.paused) {\n          window.speechSynthesis.resume();\n        }\n      };\n      const resumeInterval = setInterval(resumeSynthesis, 5000);\n      utterance.onend = function () {\n        clearInterval(resumeInterval);\n        console.log('SimpleVoice: Síntesis completada para:', text);\n        setIsSpeaking(false);\n        if (onEnd) {\n          console.log('SimpleVoice: Ejecutando callback onEnd');\n          setTimeout(() => onEnd(), 100);\n        }\n      };\n    } catch (error) {\n      console.error('Error al iniciar síntesis de voz:', error);\n      setIsSpeaking(false);\n      if (onEnd) {\n        setTimeout(() => onEnd(), 100);\n      }\n    }\n  };\n\n  // Ya no mostramos botón, solo un indicador de estado\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-2\",\n    children: isSpeaking && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-primary-500 text-sm animate-pulse\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"inline-block mr-2\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"h-4 w-4\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          stroke: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: 2,\n            d: \"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), \"Hablando...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleVoice, \"wyHlQftiPHFVgjJnb1xruJwz7No=\");\n_c = SimpleVoice;\nexport default SimpleVoice;\nvar _c;\n$RefreshReg$(_c, \"SimpleVoice\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SimpleVoice","text","onEnd","autoPlay","_s","isSpeaking","setIsSpeaking","synthesisRef","trim","console","log","speak","window","speechSynthesis","cancel","error","setTimeout","warn","utterance","SpeechSynthesisUtterance","lang","rate","pitch","volume","current","onend","onerror","voices","getVoices","filter","voice","includes","name","length","maxSpeakingTime","Math","max","resumeSynthesis","paused","resume","resumeInterval","setInterval","clearInterval","className","children","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/components/SimpleVoice.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\n/**\n * Componente automático para síntesis de voz\n * Habla automáticamente al montarse y notifica cuando termina\n */\nconst SimpleVoice = ({ text, onEnd, autoPlay = true }) => {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const synthesisRef = useRef(null);\n\n  // Efecto para iniciar la síntesis de voz automáticamente\n  useEffect(() => {\n    if (autoPlay && text && text.trim() !== '') {\n      console.log('SimpleVoice recibió texto para hablar:', text);\n      speak();\n    }\n    \n    // Limpieza al desmontar o cambiar el texto\n    return () => {\n      if (window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n    };\n  }, [text, autoPlay]);\n\n  // Efecto de limpieza al desmontar\n  useEffect(() => {\n    return () => {\n      // Cancelar síntesis al desmontar\n      if (window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n    };\n  }, []);\n\n  const speak = () => {\n    if (!window.speechSynthesis) {\n      console.error(\"Speech synthesis no está disponible en este navegador\");\n      if (onEnd) {\n        setTimeout(() => onEnd(), 500); // Llamar al callback en caso de error\n      }\n      return;\n    }\n    \n    if (!text || text.trim() === '') {\n      console.warn(\"Se intentó hablar un texto vacío\");\n      if (onEnd) {\n        setTimeout(() => onEnd(), 500); // Llamar al callback con texto vacío\n      }\n      return;\n    }\n    \n    try {\n      // Cancelar cualquier síntesis anterior\n      window.speechSynthesis.cancel();\n      \n      console.log('Iniciando síntesis de voz en SimpleVoice');\n      \n      // Crear un nuevo utterance\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'es-ES';\n      utterance.rate = 1;\n      utterance.pitch = 1;\n      utterance.volume = 1;\n      \n      // Guardar referencia para poder cancelar si es necesario\n      synthesisRef.current = utterance;\n      \n      // Configurar eventos\n      setIsSpeaking(true);\n      \n      utterance.onend = () => {\n        console.log('SimpleVoice: Síntesis completada para:', text);\n        setIsSpeaking(false);\n        if (onEnd) {\n          console.log('SimpleVoice: Ejecutando callback onEnd');\n          // Usar setTimeout para evitar problemas de sincronización\n          setTimeout(() => onEnd(), 100);\n        }\n      };\n      \n      utterance.onerror = (error) => {\n        console.error('Error en síntesis de voz:', error);\n        setIsSpeaking(false);\n        if (onEnd) {\n          console.log('SimpleVoice: Ejecutando callback onEnd después de error');\n          setTimeout(() => onEnd(), 100);\n        }\n      };\n      \n      // Intentar obtener voces en español\n      let voices = window.speechSynthesis.getVoices().filter(voice => \n        voice.lang.includes('es') || voice.name.includes('Spanish')\n      );\n      \n      // Si no hay voces en español, usar la primera disponible\n      if (voices.length > 0) {\n        utterance.voice = voices[0];\n        console.log('Usando voz:', voices[0].name);\n      }\n      \n      // Hablar automáticamente\n      window.speechSynthesis.speak(utterance);\n      \n      // Backup en caso de que no se dispare el evento onend\n      // Esto ocurre en algunos navegadores\n      const maxSpeakingTime = Math.max(5000, text.length * 90); // Estimación de tiempo basada en longitud\n      setTimeout(() => {\n        if (isSpeaking) {\n          console.warn('SimpleVoice: No se detectó fin de síntesis, forzando llamada al callback');\n          setIsSpeaking(false);\n          if (onEnd) {\n            onEnd();\n          }\n        }\n      }, maxSpeakingTime);\n      \n      // Workaround para solucionar el problema de Chrome donde la síntesis se detiene\n      // después de unos 15 segundos\n      const resumeSynthesis = () => {\n        if (window.speechSynthesis.paused) {\n          window.speechSynthesis.resume();\n        }\n      };\n      \n      const resumeInterval = setInterval(resumeSynthesis, 5000);\n      \n      utterance.onend = function() {\n        clearInterval(resumeInterval);\n        console.log('SimpleVoice: Síntesis completada para:', text);\n        setIsSpeaking(false);\n        if (onEnd) {\n          console.log('SimpleVoice: Ejecutando callback onEnd');\n          setTimeout(() => onEnd(), 100);\n        }\n      };\n      \n    } catch (error) {\n      console.error('Error al iniciar síntesis de voz:', error);\n      setIsSpeaking(false);\n      if (onEnd) {\n        setTimeout(() => onEnd(), 100);\n      }\n    }\n  };\n\n  // Ya no mostramos botón, solo un indicador de estado\n  return (\n    <div className=\"my-2\">\n      {isSpeaking && (\n        <div className=\"text-primary-500 text-sm animate-pulse\">\n          <span className=\"inline-block mr-2\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\" />\n            </svg>\n          </span>\n          Hablando...\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SimpleVoice;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAE1D;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,WAAW,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC,QAAQ,GAAG;AAAK,CAAC,KAAK;EAAAC,EAAA;EACxD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMY,YAAY,GAAGV,MAAM,CAAC,IAAI,CAAC;;EAEjC;EACAD,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,IAAIF,IAAI,IAAIA,IAAI,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC1CC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAET,IAAI,CAAC;MAC3DU,KAAK,CAAC,CAAC;IACT;;IAEA;IACA,OAAO,MAAM;MACX,IAAIC,MAAM,CAACC,eAAe,EAAE;QAC1BD,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,CAACb,IAAI,EAAEE,QAAQ,CAAC,CAAC;;EAEpB;EACAP,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX;MACA,IAAIgB,MAAM,CAACC,eAAe,EAAE;QAC1BD,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMH,KAAK,GAAGA,CAAA,KAAM;IAClB,IAAI,CAACC,MAAM,CAACC,eAAe,EAAE;MAC3BJ,OAAO,CAACM,KAAK,CAAC,uDAAuD,CAAC;MACtE,IAAIb,KAAK,EAAE;QACTc,UAAU,CAAC,MAAMd,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MAClC;MACA;IACF;IAEA,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC/BC,OAAO,CAACQ,IAAI,CAAC,kCAAkC,CAAC;MAChD,IAAIf,KAAK,EAAE;QACTc,UAAU,CAAC,MAAMd,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MAClC;MACA;IACF;IAEA,IAAI;MACF;MACAU,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;MAE/BL,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;;MAEvD;MACA,MAAMQ,SAAS,GAAG,IAAIC,wBAAwB,CAAClB,IAAI,CAAC;MACpDiB,SAAS,CAACE,IAAI,GAAG,OAAO;MACxBF,SAAS,CAACG,IAAI,GAAG,CAAC;MAClBH,SAAS,CAACI,KAAK,GAAG,CAAC;MACnBJ,SAAS,CAACK,MAAM,GAAG,CAAC;;MAEpB;MACAhB,YAAY,CAACiB,OAAO,GAAGN,SAAS;;MAEhC;MACAZ,aAAa,CAAC,IAAI,CAAC;MAEnBY,SAAS,CAACO,KAAK,GAAG,MAAM;QACtBhB,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAET,IAAI,CAAC;QAC3DK,aAAa,CAAC,KAAK,CAAC;QACpB,IAAIJ,KAAK,EAAE;UACTO,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;UACrD;UACAM,UAAU,CAAC,MAAMd,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;QAChC;MACF,CAAC;MAEDgB,SAAS,CAACQ,OAAO,GAAIX,KAAK,IAAK;QAC7BN,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDT,aAAa,CAAC,KAAK,CAAC;QACpB,IAAIJ,KAAK,EAAE;UACTO,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;UACtEM,UAAU,CAAC,MAAMd,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;QAChC;MACF,CAAC;;MAED;MACA,IAAIyB,MAAM,GAAGf,MAAM,CAACC,eAAe,CAACe,SAAS,CAAC,CAAC,CAACC,MAAM,CAACC,KAAK,IAC1DA,KAAK,CAACV,IAAI,CAACW,QAAQ,CAAC,IAAI,CAAC,IAAID,KAAK,CAACE,IAAI,CAACD,QAAQ,CAAC,SAAS,CAC5D,CAAC;;MAED;MACA,IAAIJ,MAAM,CAACM,MAAM,GAAG,CAAC,EAAE;QACrBf,SAAS,CAACY,KAAK,GAAGH,MAAM,CAAC,CAAC,CAAC;QAC3BlB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEiB,MAAM,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC;MAC5C;;MAEA;MACApB,MAAM,CAACC,eAAe,CAACF,KAAK,CAACO,SAAS,CAAC;;MAEvC;MACA;MACA,MAAMgB,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,EAAEnC,IAAI,CAACgC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC;MAC1DjB,UAAU,CAAC,MAAM;QACf,IAAIX,UAAU,EAAE;UACdI,OAAO,CAACQ,IAAI,CAAC,0EAA0E,CAAC;UACxFX,aAAa,CAAC,KAAK,CAAC;UACpB,IAAIJ,KAAK,EAAE;YACTA,KAAK,CAAC,CAAC;UACT;QACF;MACF,CAAC,EAAEgC,eAAe,CAAC;;MAEnB;MACA;MACA,MAAMG,eAAe,GAAGA,CAAA,KAAM;QAC5B,IAAIzB,MAAM,CAACC,eAAe,CAACyB,MAAM,EAAE;UACjC1B,MAAM,CAACC,eAAe,CAAC0B,MAAM,CAAC,CAAC;QACjC;MACF,CAAC;MAED,MAAMC,cAAc,GAAGC,WAAW,CAACJ,eAAe,EAAE,IAAI,CAAC;MAEzDnB,SAAS,CAACO,KAAK,GAAG,YAAW;QAC3BiB,aAAa,CAACF,cAAc,CAAC;QAC7B/B,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAET,IAAI,CAAC;QAC3DK,aAAa,CAAC,KAAK,CAAC;QACpB,IAAIJ,KAAK,EAAE;UACTO,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;UACrDM,UAAU,CAAC,MAAMd,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;QAChC;MACF,CAAC;IAEH,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzDT,aAAa,CAAC,KAAK,CAAC;MACpB,IAAIJ,KAAK,EAAE;QACTc,UAAU,CAAC,MAAMd,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC;MAChC;IACF;EACF,CAAC;;EAED;EACA,oBACEH,OAAA;IAAK4C,SAAS,EAAC,MAAM;IAAAC,QAAA,EAClBvC,UAAU,iBACTN,OAAA;MAAK4C,SAAS,EAAC,wCAAwC;MAAAC,QAAA,gBACrD7C,OAAA;QAAM4C,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eACjC7C,OAAA;UAAK8C,KAAK,EAAC,4BAA4B;UAACF,SAAS,EAAC,SAAS;UAACG,IAAI,EAAC,MAAM;UAACC,OAAO,EAAC,WAAW;UAACC,MAAM,EAAC,cAAc;UAAAJ,QAAA,eAC/G7C,OAAA;YAAMkD,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAACC,WAAW,EAAE,CAAE;YAACC,CAAC,EAAC;UAAwG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7K;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAET;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpD,EAAA,CA3JIJ,WAAW;AAAAyD,EAAA,GAAXzD,WAAW;AA6JjB,eAAeA,WAAW;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}