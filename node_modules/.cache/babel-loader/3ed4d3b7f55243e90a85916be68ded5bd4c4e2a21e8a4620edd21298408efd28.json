{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\Sistema de Encuestas por Voz\\\\client\\\\src\\\\pages\\\\TakeSurvey.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { SurveyService, ResponseService } from '../services/apiService';\n\n// Componentes\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport ErrorMessage from '../components/ErrorMessage';\nimport audioService from '../services/audioService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TakeSurvey = () => {\n  _s();\n  const {\n    surveyId\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Referencias para controlar el flujo de la conversación\n  const conversationActive = useRef(false);\n  const speakTimeoutRef = useRef(null);\n\n  // Estados\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [currentResponse, setCurrentResponse] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [voiceEnabled, setVoiceEnabled] = useState(true);\n  const [conversationState, setConversationState] = useState('idle'); // idle, speaking, listening, processing\n  const [conversationMessage, setConversationMessage] = useState('');\n\n  // Cargar la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        const data = await SurveyService.getPublicSurvey(surveyId);\n        console.log('Encuesta cargada:', data);\n        setSurvey(data);\n        // Inicializar respuestas vacías\n        setResponses(new Array(data.questions.length).fill(''));\n      } catch (error) {\n        console.error('Error al cargar la encuesta:', error);\n        setError('No se pudo cargar la encuesta. Verifique que el ID sea correcto y que la encuesta esté activa.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSurvey();\n\n    // Inicializar sistema de voz\n    audioService.initSpeechSystem();\n    return () => {\n      // Detener cualquier síntesis y reconocimiento al desmontar\n      if (speakTimeoutRef.current) {\n        clearTimeout(speakTimeoutRef.current);\n      }\n      audioService.stop();\n      conversationActive.current = false;\n      if (window.speechSynthesis) {\n        window.speechSynthesis.cancel();\n      }\n    };\n  }, [surveyId]);\n\n  // Iniciar la conversación una vez que la encuesta esté cargada\n  useEffect(() => {\n    if (survey && voiceEnabled && !conversationActive.current) {\n      startConversation();\n    }\n  }, [survey, voiceEnabled]);\n\n  // Función para iniciar la conversación\n  const startConversation = () => {\n    if (!voiceEnabled || !survey) return;\n    conversationActive.current = true;\n\n    // Dar un mensaje de bienvenida\n    if (survey.welcomeMessage) {\n      speakText(survey.welcomeMessage, () => {\n        // Después de la bienvenida, preguntar la primera pregunta\n        speakCurrentQuestion();\n      });\n    } else {\n      // Si no hay mensaje de bienvenida, ir directamente a la primera pregunta\n      speakCurrentQuestion();\n    }\n  };\n\n  // Función para hablar el texto usando el servicio de audio\n  const speakText = (text, onEndCallback) => {\n    if (!voiceEnabled) {\n      if (onEndCallback) onEndCallback();\n      return;\n    }\n    setConversationState('speaking');\n    setConversationMessage('Hablando...');\n    audioService.speakText(text, () => {\n      console.log('Hablando:', text);\n    }, () => {\n      console.log('Terminó de hablar');\n      setConversationState('idle');\n      if (onEndCallback) {\n        // Pequeño retraso para una experiencia más natural\n        speakTimeoutRef.current = setTimeout(onEndCallback, 500);\n      }\n    }, error => {\n      console.error('Error al hablar:', error);\n      setConversationState('idle');\n      if (onEndCallback) onEndCallback();\n    });\n  };\n\n  // Función para hablar la pregunta actual\n  const speakCurrentQuestion = () => {\n    if (!survey || !voiceEnabled) return;\n    const currentQuestion = survey.questions[currentQuestionIndex];\n    if (!currentQuestion) return;\n    let questionText = `Pregunta ${currentQuestionIndex + 1}: ${currentQuestion.text}`;\n\n    // Agregar información sobre opciones si es pregunta de opción múltiple\n    if (currentQuestion.type === 'multiple_choice' && currentQuestion.options) {\n      questionText += '. Las opciones son: ';\n      questionText += currentQuestion.options.map((option, idx) => `Opción ${idx + 1}: ${option}`).join(', ');\n    }\n    speakText(questionText, () => {\n      // Después de hablar la pregunta, iniciar el reconocimiento de voz\n      startListening();\n    });\n  };\n\n  // Función para iniciar la escucha de la respuesta del usuario\n  const startListening = () => {\n    if (!voiceEnabled) return;\n    if (!audioService.isSupportedByBrowser()) {\n      setError('Tu navegador no soporta reconocimiento de voz');\n      return;\n    }\n    audioService.init('es-ES');\n    audioService.onResult((transcript, isFinal) => {\n      setCurrentResponse(transcript);\n      if (isFinal) {\n        setConversationState('processing');\n        setConversationMessage('Procesando respuesta...');\n      }\n    });\n    audioService.onEnd(finalTranscript => {\n      setIsListening(false);\n      setConversationState('processing');\n      setConversationMessage('Procesando respuesta...');\n\n      // Guardar la respuesta y continuar la conversación\n      handleVoiceResponse(finalTranscript);\n    });\n    audioService.onError(errorMessage => {\n      console.error('Error de reconocimiento:', errorMessage);\n      setError(`Error de reconocimiento: ${errorMessage}`);\n      setIsListening(false);\n      setConversationState('idle');\n\n      // Reintentar la escucha después de un error\n      speakTimeoutRef.current = setTimeout(() => {\n        speakText('No pude entender tu respuesta. Por favor, inténtalo de nuevo.', () => {\n          startListening();\n        });\n      }, 1000);\n    });\n    const started = audioService.start();\n    if (started) {\n      setIsListening(true);\n      setConversationState('listening');\n      setConversationMessage('Escuchando...');\n    } else {\n      setError('No se pudo iniciar el reconocimiento de voz');\n      setConversationState('idle');\n    }\n  };\n\n  // Manejar la respuesta por voz\n  const handleVoiceResponse = response => {\n    if (!response || response.trim() === '') {\n      // Si no hay respuesta, pedir que repita\n      speakText('No he escuchado ninguna respuesta. Por favor, intenta de nuevo.', () => {\n        startListening();\n      });\n      return;\n    }\n\n    // Guardar la respuesta actual\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = response;\n    setResponses(updatedResponses);\n\n    // Dar feedback al usuario\n    speakText(`He registrado tu respuesta: ${response}.`, () => {\n      // Pasar a la siguiente pregunta o finalizar\n      if (currentQuestionIndex < survey.questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n        setCurrentResponse('');\n        // Hablar la siguiente pregunta después de un breve pausa\n        speakTimeoutRef.current = setTimeout(() => {\n          speakCurrentQuestion();\n        }, 1000);\n      } else {\n        // Si es la última pregunta, mostrar confirmación\n        setShowConfirmation(true);\n        speakText('Hemos terminado todas las preguntas. Ahora te mostraré un resumen de tus respuestas para que las confirmes.', () => {\n          speakConfirmationSummary();\n        });\n      }\n    });\n  };\n\n  // Leer el resumen de confirmación\n  const speakConfirmationSummary = () => {\n    if (!voiceEnabled || !showConfirmation) return;\n    let summaryText = 'Resumen de tus respuestas: ';\n    survey.questions.forEach((question, index) => {\n      summaryText += `Pregunta ${index + 1}: ${question.text}. Tu respuesta: ${responses[index] || \"Sin respuesta\"}. `;\n    });\n    summaryText += '¿Deseas enviar estas respuestas o volver para revisar alguna?';\n    speakText(summaryText, () => {\n      // Escuchar confirmación del usuario\n      listenForConfirmation();\n    });\n  };\n\n  // Escuchar la confirmación del usuario\n  const listenForConfirmation = () => {\n    if (!voiceEnabled) return;\n    audioService.init('es-ES');\n    audioService.onResult((transcript, isFinal) => {\n      // Mostrar lo que está diciendo el usuario\n      setCurrentResponse(transcript);\n    });\n    audioService.onEnd(finalTranscript => {\n      setIsListening(false);\n\n      // Analizar respuesta para determinar si es confirmación o no\n      const lowerResponse = finalTranscript.toLowerCase();\n      if (lowerResponse.includes('sí') || lowerResponse.includes('si') || lowerResponse.includes('confirmar') || lowerResponse.includes('enviar') || lowerResponse.includes('aceptar') || lowerResponse.includes('está bien')) {\n        // Confirmado - enviar respuestas\n        speakText('Perfecto, enviando tus respuestas.', () => {\n          handleSubmit();\n        });\n      } else if (lowerResponse.includes('no') || lowerResponse.includes('volver') || lowerResponse.includes('revisar') || lowerResponse.includes('regresar')) {\n        // Volver a revisar\n        setShowConfirmation(false);\n        speakText('De acuerdo, volvamos a revisar las preguntas. Puedes navegar entre ellas usando los botones de anterior y siguiente.', null);\n      } else {\n        // Respuesta no clara\n        speakText('No he entendido si deseas confirmar o revisar. Por favor, dime \"confirmar\" para enviar las respuestas o \"revisar\" para volver a las preguntas.', () => {\n          listenForConfirmation();\n        });\n      }\n    });\n    audioService.onError(() => {\n      setIsListening(false);\n      speakText('Hubo un error al escuchar tu confirmación. Por favor, usa los botones en pantalla para confirmar o volver.', null);\n    });\n    audioService.start();\n    setIsListening(true);\n    setConversationState('listening');\n    setConversationMessage('Esperando confirmación...');\n  };\n\n  // Manejar el cambio de respuesta manual\n  const handleResponseChange = e => {\n    setCurrentResponse(e.target.value);\n  };\n\n  // Guardar la respuesta actual y avanzar a la siguiente pregunta manualmente\n  const handleNextQuestion = () => {\n    // Cancelar cualquier síntesis o reconocimiento en curso\n    if (window.speechSynthesis) {\n      window.speechSynthesis.cancel();\n    }\n    audioService.stop();\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = currentResponse;\n    setResponses(updatedResponses);\n    if (currentQuestionIndex < survey.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setCurrentResponse('');\n\n      // Si está habilitada la voz, hablar la siguiente pregunta\n      if (voiceEnabled) {\n        speakTimeoutRef.current = setTimeout(() => {\n          speakCurrentQuestion();\n        }, 500);\n      }\n    } else {\n      setShowConfirmation(true);\n      if (voiceEnabled) {\n        speakText('Hemos terminado todas las preguntas. Ahora te mostraré un resumen de tus respuestas para que las confirmes.', () => {\n          speakConfirmationSummary();\n        });\n      }\n    }\n  };\n\n  // Volver a la pregunta anterior manualmente\n  const handlePreviousQuestion = () => {\n    // Cancelar cualquier síntesis o reconocimiento en curso\n    if (window.speechSynthesis) {\n      window.speechSynthesis.cancel();\n    }\n    audioService.stop();\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n      setCurrentResponse(responses[currentQuestionIndex - 1]);\n\n      // Si está habilitada la voz, hablar la pregunta anterior\n      if (voiceEnabled) {\n        speakTimeoutRef.current = setTimeout(() => {\n          speakCurrentQuestion();\n        }, 500);\n      }\n    }\n  };\n\n  // Enviar todas las respuestas\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    try {\n      // Preparar objeto de respuesta\n      const responseData = {\n        surveyId: survey._id,\n        responses: survey.questions.map((question, index) => ({\n          questionId: question._id,\n          questionText: question.text,\n          responseText: responses[index] || '',\n          questionType: question.type\n        }))\n      };\n\n      // Enviar respuesta a la API\n      await ResponseService.submitResponse(responseData);\n\n      // Mensaje de despedida\n      if (voiceEnabled) {\n        speakText(survey.farewell || '¡Gracias por completar la encuesta!', () => {\n          // Redirigir a página de agradecimiento\n          navigate(`/thank-you`, {\n            state: {\n              message: survey.farewell || '¡Gracias por completar la encuesta!'\n            }\n          });\n        });\n      } else {\n        // Redirigir a página de agradecimiento sin hablar\n        navigate(`/thank-you`, {\n          state: {\n            message: survey.farewell || '¡Gracias por completar la encuesta!'\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setError('Ocurrió un error al enviar tus respuestas. Por favor, intenta nuevamente.');\n      setIsSubmitting(false);\n      if (voiceEnabled) {\n        speakText('Ha ocurrido un error al enviar tus respuestas. Por favor, intenta nuevamente.', null);\n      }\n    }\n  };\n\n  // Iniciar reconocimiento de voz manual\n  const startVoiceRecognition = () => {\n    if (isListening) return;\n\n    // Cancelar cualquier síntesis en curso\n    if (window.speechSynthesis) {\n      window.speechSynthesis.cancel();\n    }\n    startListening();\n  };\n\n  // Detener reconocimiento de voz manual\n  const stopVoiceRecognition = () => {\n    audioService.stop();\n    setIsListening(false);\n    setConversationState('idle');\n  };\n\n  // Alternar el uso de voz\n  const toggleVoice = () => {\n    // Cancelar cualquier síntesis o reconocimiento en curso\n    if (window.speechSynthesis) {\n      window.speechSynthesis.cancel();\n    }\n    audioService.stop();\n    const newVoiceEnabled = !voiceEnabled;\n    setVoiceEnabled(newVoiceEnabled);\n    if (newVoiceEnabled && !conversationActive.current) {\n      // Si se activa la voz, iniciar conversación\n      conversationActive.current = false; // Reset para que startConversation funcione\n      startConversation();\n    }\n  };\n\n  // Renderizar pantalla de carga\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Renderizar mensaje de error\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Si no hay encuesta\n  if (!survey) {\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: \"No se encontr\\xF3 la encuesta solicitada.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Obtener la pregunta actual\n  const currentQuestion = survey.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-end mb-2\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVoice,\n        className: `px-3 py-1 rounded text-sm ${voiceEnabled ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-700'}`,\n        children: voiceEnabled ? '🔊 Voz Activada' : '🔇 Voz Desactivada'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this), voiceEnabled && conversationState !== 'idle' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `mb-4 p-2 rounded text-center ${conversationState === 'speaking' ? 'bg-blue-100 text-blue-700' : conversationState === 'listening' ? 'bg-green-100 text-green-700' : 'bg-yellow-100 text-yellow-700'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-semibold\",\n        children: [conversationState === 'speaking' && '🔊 ', conversationState === 'listening' && '🎤 ', conversationState === 'processing' && '⏳ ', conversationMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 11\n      }, this), isListening && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm mt-1\",\n        children: \"Habla tu respuesta claramente...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold mb-2\",\n        children: survey.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: survey.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), currentQuestionIndex === 0 && survey.welcomeMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 p-4 bg-blue-50 rounded-lg\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: survey.welcomeMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full bg-gray-200 rounded-full h-2.5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-blue-600 h-2.5 rounded-full\",\n          style: {\n            width: `${(currentQuestionIndex + 1) / survey.questions.length * 100}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-right text-sm mt-1\",\n        children: [\"Pregunta \", currentQuestionIndex + 1, \" de \", survey.questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }, this), showConfirmation ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-lg p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: \"Confirmar env\\xEDo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-4\",\n        children: \"\\xBFEst\\xE1s seguro de que deseas enviar tus respuestas?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-bold mb-2\",\n          children: \"Resumen de respuestas:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 13\n        }, this), survey.questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium\",\n            children: [index + 1, \". \", question.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700 pl-4\",\n            children: responses[index] || \"(Sin respuesta)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 17\n          }, this)]\n        }, question._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 11\n      }, this), isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-100 p-3 rounded mb-4 animate-pulse\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-green-800\",\n          children: \"\\uD83C\\uDFA4 Di \\\"confirmar\\\" para enviar o \\\"revisar\\\" para volver\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 15\n        }, this), currentResponse && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm italic text-center mt-1\",\n          children: [\"\\\"\", currentResponse, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowConfirmation(false);\n            if (voiceEnabled) {\n              speakText('Volvamos a revisar las preguntas.', null);\n            }\n          },\n          className: \"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300\",\n          disabled: isSubmitting,\n          children: \"Volver\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          className: \"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\",\n          disabled: isSubmitting,\n          children: isSubmitting ? 'Enviando...' : 'Confirmar envío'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold mb-4\",\n          children: currentQuestion.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 13\n        }, this), currentQuestion.type === 'multiple_choice' && currentQuestion.options && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-600 mb-2\",\n            children: \"Opciones:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-disc pl-5\",\n            children: currentQuestion.options.map((option, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"mb-1\",\n              children: option\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Tu respuesta:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: currentResponse,\n            onChange: handleResponseChange,\n            className: \"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\",\n            rows: \"3\",\n            placeholder: \"Escribe tu respuesta...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center mt-2\",\n            children: [!isListening ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: startVoiceRecognition,\n              className: \"flex items-center px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mr-1\",\n                children: \"\\uD83C\\uDFA4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 21\n              }, this), \" Responder por voz\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: stopVoiceRecognition,\n              className: \"flex items-center px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 animate-pulse\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mr-1\",\n                children: \"\\u23F9\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 21\n              }, this), \" Detener grabaci\\xF3n\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 19\n            }, this), isListening && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ml-2 text-red-500 animate-pulse\",\n              children: \"Escuchando...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousQuestion,\n          disabled: currentQuestionIndex === 0,\n          className: `px-4 py-2 rounded ${currentQuestionIndex === 0 ? 'bg-gray-200 text-gray-400 cursor-not-allowed' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`,\n          children: \"Anterior\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextQuestion,\n          className: \"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\",\n          children: currentQuestionIndex < survey.questions.length - 1 ? 'Siguiente' : 'Finalizar'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 5\n  }, this);\n};\n_s(TakeSurvey, \"qWvLD+CAVxwLg9bd0gEJ+HkRU/o=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = TakeSurvey;\nexport default TakeSurvey;\nvar _c;\n$RefreshReg$(_c, \"TakeSurvey\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","SurveyService","ResponseService","LoadingSpinner","ErrorMessage","audioService","jsxDEV","_jsxDEV","Fragment","_Fragment","TakeSurvey","_s","surveyId","navigate","conversationActive","speakTimeoutRef","survey","setSurvey","loading","setLoading","error","setError","currentQuestionIndex","setCurrentQuestionIndex","responses","setResponses","isSubmitting","setIsSubmitting","showConfirmation","setShowConfirmation","currentResponse","setCurrentResponse","isListening","setIsListening","voiceEnabled","setVoiceEnabled","conversationState","setConversationState","conversationMessage","setConversationMessage","fetchSurvey","data","getPublicSurvey","console","log","Array","questions","length","fill","initSpeechSystem","current","clearTimeout","stop","window","speechSynthesis","cancel","startConversation","welcomeMessage","speakText","speakCurrentQuestion","text","onEndCallback","setTimeout","currentQuestion","questionText","type","options","map","option","idx","join","startListening","isSupportedByBrowser","init","onResult","transcript","isFinal","onEnd","finalTranscript","handleVoiceResponse","onError","errorMessage","started","start","response","trim","updatedResponses","speakConfirmationSummary","summaryText","forEach","question","index","listenForConfirmation","lowerResponse","toLowerCase","includes","handleSubmit","handleResponseChange","e","target","value","handleNextQuestion","handlePreviousQuestion","responseData","_id","questionId","responseText","questionType","submitResponse","farewell","state","message","startVoiceRecognition","stopVoiceRecognition","toggleVoice","newVoiceEnabled","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","title","description","style","width","disabled","onChange","rows","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/pages/TakeSurvey.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { SurveyService, ResponseService } from '../services/apiService';\r\n\r\n// Componentes\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport ErrorMessage from '../components/ErrorMessage';\r\nimport audioService from '../services/audioService';\r\n\r\nconst TakeSurvey = () => {\r\n  const { surveyId } = useParams();\r\n  const navigate = useNavigate();\r\n  \r\n  // Referencias para controlar el flujo de la conversación\r\n  const conversationActive = useRef(false);\r\n  const speakTimeoutRef = useRef(null);\r\n  \r\n  // Estados\r\n  const [survey, setSurvey] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [responses, setResponses] = useState([]);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n  const [currentResponse, setCurrentResponse] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [voiceEnabled, setVoiceEnabled] = useState(true);\r\n  const [conversationState, setConversationState] = useState('idle'); // idle, speaking, listening, processing\r\n  const [conversationMessage, setConversationMessage] = useState('');\r\n  \r\n  // Cargar la encuesta\r\n  useEffect(() => {\r\n    const fetchSurvey = async () => {\r\n      try {\r\n        const data = await SurveyService.getPublicSurvey(surveyId);\r\n        console.log('Encuesta cargada:', data);\r\n        setSurvey(data);\r\n        // Inicializar respuestas vacías\r\n        setResponses(new Array(data.questions.length).fill(''));\r\n      } catch (error) {\r\n        console.error('Error al cargar la encuesta:', error);\r\n        setError('No se pudo cargar la encuesta. Verifique que el ID sea correcto y que la encuesta esté activa.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchSurvey();\r\n    \r\n    // Inicializar sistema de voz\r\n    audioService.initSpeechSystem();\r\n    \r\n    return () => {\r\n      // Detener cualquier síntesis y reconocimiento al desmontar\r\n      if (speakTimeoutRef.current) {\r\n        clearTimeout(speakTimeoutRef.current);\r\n      }\r\n      audioService.stop();\r\n      conversationActive.current = false;\r\n      \r\n      if (window.speechSynthesis) {\r\n        window.speechSynthesis.cancel();\r\n      }\r\n    };\r\n  }, [surveyId]);\r\n  \r\n  // Iniciar la conversación una vez que la encuesta esté cargada\r\n  useEffect(() => {\r\n    if (survey && voiceEnabled && !conversationActive.current) {\r\n      startConversation();\r\n    }\r\n  }, [survey, voiceEnabled]);\r\n  \r\n  // Función para iniciar la conversación\r\n  const startConversation = () => {\r\n    if (!voiceEnabled || !survey) return;\r\n    \r\n    conversationActive.current = true;\r\n    \r\n    // Dar un mensaje de bienvenida\r\n    if (survey.welcomeMessage) {\r\n      speakText(survey.welcomeMessage, () => {\r\n        // Después de la bienvenida, preguntar la primera pregunta\r\n        speakCurrentQuestion();\r\n      });\r\n    } else {\r\n      // Si no hay mensaje de bienvenida, ir directamente a la primera pregunta\r\n      speakCurrentQuestion();\r\n    }\r\n  };\r\n  \r\n  // Función para hablar el texto usando el servicio de audio\r\n  const speakText = (text, onEndCallback) => {\r\n    if (!voiceEnabled) {\r\n      if (onEndCallback) onEndCallback();\r\n      return;\r\n    }\r\n    \r\n    setConversationState('speaking');\r\n    setConversationMessage('Hablando...');\r\n    \r\n    audioService.speakText(\r\n      text,\r\n      () => {\r\n        console.log('Hablando:', text);\r\n      },\r\n      () => {\r\n        console.log('Terminó de hablar');\r\n        setConversationState('idle');\r\n        if (onEndCallback) {\r\n          // Pequeño retraso para una experiencia más natural\r\n          speakTimeoutRef.current = setTimeout(onEndCallback, 500);\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error('Error al hablar:', error);\r\n        setConversationState('idle');\r\n        if (onEndCallback) onEndCallback();\r\n      }\r\n    );\r\n  };\r\n  \r\n  // Función para hablar la pregunta actual\r\n  const speakCurrentQuestion = () => {\r\n    if (!survey || !voiceEnabled) return;\r\n    \r\n    const currentQuestion = survey.questions[currentQuestionIndex];\r\n    if (!currentQuestion) return;\r\n    \r\n    let questionText = `Pregunta ${currentQuestionIndex + 1}: ${currentQuestion.text}`;\r\n    \r\n    // Agregar información sobre opciones si es pregunta de opción múltiple\r\n    if (currentQuestion.type === 'multiple_choice' && currentQuestion.options) {\r\n      questionText += '. Las opciones son: ';\r\n      questionText += currentQuestion.options.map((option, idx) => \r\n        `Opción ${idx + 1}: ${option}`\r\n      ).join(', ');\r\n    }\r\n    \r\n    speakText(questionText, () => {\r\n      // Después de hablar la pregunta, iniciar el reconocimiento de voz\r\n      startListening();\r\n    });\r\n  };\r\n  \r\n  // Función para iniciar la escucha de la respuesta del usuario\r\n  const startListening = () => {\r\n    if (!voiceEnabled) return;\r\n    \r\n    if (!audioService.isSupportedByBrowser()) {\r\n      setError('Tu navegador no soporta reconocimiento de voz');\r\n      return;\r\n    }\r\n    \r\n    audioService.init('es-ES');\r\n    \r\n    audioService.onResult((transcript, isFinal) => {\r\n      setCurrentResponse(transcript);\r\n      if (isFinal) {\r\n        setConversationState('processing');\r\n        setConversationMessage('Procesando respuesta...');\r\n      }\r\n    });\r\n    \r\n    audioService.onEnd((finalTranscript) => {\r\n      setIsListening(false);\r\n      setConversationState('processing');\r\n      setConversationMessage('Procesando respuesta...');\r\n      \r\n      // Guardar la respuesta y continuar la conversación\r\n      handleVoiceResponse(finalTranscript);\r\n    });\r\n    \r\n    audioService.onError((errorMessage) => {\r\n      console.error('Error de reconocimiento:', errorMessage);\r\n      setError(`Error de reconocimiento: ${errorMessage}`);\r\n      setIsListening(false);\r\n      setConversationState('idle');\r\n      \r\n      // Reintentar la escucha después de un error\r\n      speakTimeoutRef.current = setTimeout(() => {\r\n        speakText('No pude entender tu respuesta. Por favor, inténtalo de nuevo.', () => {\r\n          startListening();\r\n        });\r\n      }, 1000);\r\n    });\r\n    \r\n    const started = audioService.start();\r\n    if (started) {\r\n      setIsListening(true);\r\n      setConversationState('listening');\r\n      setConversationMessage('Escuchando...');\r\n    } else {\r\n      setError('No se pudo iniciar el reconocimiento de voz');\r\n      setConversationState('idle');\r\n    }\r\n  };\r\n  \r\n  // Manejar la respuesta por voz\r\n  const handleVoiceResponse = (response) => {\r\n    if (!response || response.trim() === '') {\r\n      // Si no hay respuesta, pedir que repita\r\n      speakText('No he escuchado ninguna respuesta. Por favor, intenta de nuevo.', () => {\r\n        startListening();\r\n      });\r\n      return;\r\n    }\r\n    \r\n    // Guardar la respuesta actual\r\n    const updatedResponses = [...responses];\r\n    updatedResponses[currentQuestionIndex] = response;\r\n    setResponses(updatedResponses);\r\n    \r\n    // Dar feedback al usuario\r\n    speakText(`He registrado tu respuesta: ${response}.`, () => {\r\n      // Pasar a la siguiente pregunta o finalizar\r\n      if (currentQuestionIndex < survey.questions.length - 1) {\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        setCurrentResponse('');\r\n        // Hablar la siguiente pregunta después de un breve pausa\r\n        speakTimeoutRef.current = setTimeout(() => {\r\n          speakCurrentQuestion();\r\n        }, 1000);\r\n      } else {\r\n        // Si es la última pregunta, mostrar confirmación\r\n        setShowConfirmation(true);\r\n        speakText('Hemos terminado todas las preguntas. Ahora te mostraré un resumen de tus respuestas para que las confirmes.', () => {\r\n          speakConfirmationSummary();\r\n        });\r\n      }\r\n    });\r\n  };\r\n  \r\n  // Leer el resumen de confirmación\r\n  const speakConfirmationSummary = () => {\r\n    if (!voiceEnabled || !showConfirmation) return;\r\n    \r\n    let summaryText = 'Resumen de tus respuestas: ';\r\n    \r\n    survey.questions.forEach((question, index) => {\r\n      summaryText += `Pregunta ${index + 1}: ${question.text}. Tu respuesta: ${responses[index] || \"Sin respuesta\"}. `;\r\n    });\r\n    \r\n    summaryText += '¿Deseas enviar estas respuestas o volver para revisar alguna?';\r\n    \r\n    speakText(summaryText, () => {\r\n      // Escuchar confirmación del usuario\r\n      listenForConfirmation();\r\n    });\r\n  };\r\n  \r\n  // Escuchar la confirmación del usuario\r\n  const listenForConfirmation = () => {\r\n    if (!voiceEnabled) return;\r\n    \r\n    audioService.init('es-ES');\r\n    \r\n    audioService.onResult((transcript, isFinal) => {\r\n      // Mostrar lo que está diciendo el usuario\r\n      setCurrentResponse(transcript);\r\n    });\r\n    \r\n    audioService.onEnd((finalTranscript) => {\r\n      setIsListening(false);\r\n      \r\n      // Analizar respuesta para determinar si es confirmación o no\r\n      const lowerResponse = finalTranscript.toLowerCase();\r\n      if (\r\n        lowerResponse.includes('sí') || \r\n        lowerResponse.includes('si') || \r\n        lowerResponse.includes('confirmar') || \r\n        lowerResponse.includes('enviar') ||\r\n        lowerResponse.includes('aceptar') ||\r\n        lowerResponse.includes('está bien')\r\n      ) {\r\n        // Confirmado - enviar respuestas\r\n        speakText('Perfecto, enviando tus respuestas.', () => {\r\n          handleSubmit();\r\n        });\r\n      } else if (\r\n        lowerResponse.includes('no') || \r\n        lowerResponse.includes('volver') || \r\n        lowerResponse.includes('revisar') ||\r\n        lowerResponse.includes('regresar')\r\n      ) {\r\n        // Volver a revisar\r\n        setShowConfirmation(false);\r\n        speakText('De acuerdo, volvamos a revisar las preguntas. Puedes navegar entre ellas usando los botones de anterior y siguiente.', null);\r\n      } else {\r\n        // Respuesta no clara\r\n        speakText('No he entendido si deseas confirmar o revisar. Por favor, dime \"confirmar\" para enviar las respuestas o \"revisar\" para volver a las preguntas.', () => {\r\n          listenForConfirmation();\r\n        });\r\n      }\r\n    });\r\n    \r\n    audioService.onError(() => {\r\n      setIsListening(false);\r\n      speakText('Hubo un error al escuchar tu confirmación. Por favor, usa los botones en pantalla para confirmar o volver.', null);\r\n    });\r\n    \r\n    audioService.start();\r\n    setIsListening(true);\r\n    setConversationState('listening');\r\n    setConversationMessage('Esperando confirmación...');\r\n  };\r\n  \r\n  // Manejar el cambio de respuesta manual\r\n  const handleResponseChange = (e) => {\r\n    setCurrentResponse(e.target.value);\r\n  };\r\n  \r\n  // Guardar la respuesta actual y avanzar a la siguiente pregunta manualmente\r\n  const handleNextQuestion = () => {\r\n    // Cancelar cualquier síntesis o reconocimiento en curso\r\n    if (window.speechSynthesis) {\r\n      window.speechSynthesis.cancel();\r\n    }\r\n    audioService.stop();\r\n    \r\n    const updatedResponses = [...responses];\r\n    updatedResponses[currentQuestionIndex] = currentResponse;\r\n    setResponses(updatedResponses);\r\n    \r\n    if (currentQuestionIndex < survey.questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      setCurrentResponse('');\r\n      \r\n      // Si está habilitada la voz, hablar la siguiente pregunta\r\n      if (voiceEnabled) {\r\n        speakTimeoutRef.current = setTimeout(() => {\r\n          speakCurrentQuestion();\r\n        }, 500);\r\n      }\r\n    } else {\r\n      setShowConfirmation(true);\r\n      if (voiceEnabled) {\r\n        speakText('Hemos terminado todas las preguntas. Ahora te mostraré un resumen de tus respuestas para que las confirmes.', () => {\r\n          speakConfirmationSummary();\r\n        });\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Volver a la pregunta anterior manualmente\r\n  const handlePreviousQuestion = () => {\r\n    // Cancelar cualquier síntesis o reconocimiento en curso\r\n    if (window.speechSynthesis) {\r\n      window.speechSynthesis.cancel();\r\n    }\r\n    audioService.stop();\r\n    \r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n      setCurrentResponse(responses[currentQuestionIndex - 1]);\r\n      \r\n      // Si está habilitada la voz, hablar la pregunta anterior\r\n      if (voiceEnabled) {\r\n        speakTimeoutRef.current = setTimeout(() => {\r\n          speakCurrentQuestion();\r\n        }, 500);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Enviar todas las respuestas\r\n  const handleSubmit = async () => {\r\n    setIsSubmitting(true);\r\n    \r\n    try {\r\n      // Preparar objeto de respuesta\r\n      const responseData = {\r\n        surveyId: survey._id,\r\n        responses: survey.questions.map((question, index) => ({\r\n          questionId: question._id,\r\n          questionText: question.text,\r\n          responseText: responses[index] || '',\r\n          questionType: question.type\r\n        }))\r\n      };\r\n      \r\n      // Enviar respuesta a la API\r\n      await ResponseService.submitResponse(responseData);\r\n      \r\n      // Mensaje de despedida\r\n      if (voiceEnabled) {\r\n        speakText(survey.farewell || '¡Gracias por completar la encuesta!', () => {\r\n          // Redirigir a página de agradecimiento\r\n          navigate(`/thank-you`, { \r\n            state: { \r\n              message: survey.farewell || '¡Gracias por completar la encuesta!' \r\n            } \r\n          });\r\n        });\r\n      } else {\r\n        // Redirigir a página de agradecimiento sin hablar\r\n        navigate(`/thank-you`, { \r\n          state: { \r\n            message: survey.farewell || '¡Gracias por completar la encuesta!' \r\n          } \r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al enviar respuestas:', error);\r\n      setError('Ocurrió un error al enviar tus respuestas. Por favor, intenta nuevamente.');\r\n      setIsSubmitting(false);\r\n      \r\n      if (voiceEnabled) {\r\n        speakText('Ha ocurrido un error al enviar tus respuestas. Por favor, intenta nuevamente.', null);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Iniciar reconocimiento de voz manual\r\n  const startVoiceRecognition = () => {\r\n    if (isListening) return;\r\n    \r\n    // Cancelar cualquier síntesis en curso\r\n    if (window.speechSynthesis) {\r\n      window.speechSynthesis.cancel();\r\n    }\r\n    \r\n    startListening();\r\n  };\r\n  \r\n  // Detener reconocimiento de voz manual\r\n  const stopVoiceRecognition = () => {\r\n    audioService.stop();\r\n    setIsListening(false);\r\n    setConversationState('idle');\r\n  };\r\n  \r\n  // Alternar el uso de voz\r\n  const toggleVoice = () => {\r\n    // Cancelar cualquier síntesis o reconocimiento en curso\r\n    if (window.speechSynthesis) {\r\n      window.speechSynthesis.cancel();\r\n    }\r\n    audioService.stop();\r\n    \r\n    const newVoiceEnabled = !voiceEnabled;\r\n    setVoiceEnabled(newVoiceEnabled);\r\n    \r\n    if (newVoiceEnabled && !conversationActive.current) {\r\n      // Si se activa la voz, iniciar conversación\r\n      conversationActive.current = false; // Reset para que startConversation funcione\r\n      startConversation();\r\n    }\r\n  };\r\n  \r\n  // Renderizar pantalla de carga\r\n  if (loading) {\r\n    return <LoadingSpinner />;\r\n  }\r\n  \r\n  // Renderizar mensaje de error\r\n  if (error) {\r\n    return <ErrorMessage message={error} />;\r\n  }\r\n  \r\n  // Si no hay encuesta\r\n  if (!survey) {\r\n    return <ErrorMessage message=\"No se encontró la encuesta solicitada.\" />;\r\n  }\r\n  \r\n  // Obtener la pregunta actual\r\n  const currentQuestion = survey.questions[currentQuestionIndex];\r\n  \r\n  return (\r\n    <div className=\"max-w-3xl mx-auto p-4\">\r\n      {/* Control de voz */}\r\n      <div className=\"flex justify-end mb-2\">\r\n        <button \r\n          onClick={toggleVoice} \r\n          className={`px-3 py-1 rounded text-sm ${voiceEnabled ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-700'}`}\r\n        >\r\n          {voiceEnabled ? '🔊 Voz Activada' : '🔇 Voz Desactivada'}\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Estado de la conversación */}\r\n      {voiceEnabled && conversationState !== 'idle' && (\r\n        <div className={`mb-4 p-2 rounded text-center ${\r\n          conversationState === 'speaking' ? 'bg-blue-100 text-blue-700' : \r\n          conversationState === 'listening' ? 'bg-green-100 text-green-700' : \r\n          'bg-yellow-100 text-yellow-700'\r\n        }`}>\r\n          <p className=\"font-semibold\">\r\n            {conversationState === 'speaking' && '🔊 '} \r\n            {conversationState === 'listening' && '🎤 '}\r\n            {conversationState === 'processing' && '⏳ '}\r\n            {conversationMessage}\r\n          </p>\r\n          {isListening && (\r\n            <p className=\"text-sm mt-1\">Habla tu respuesta claramente...</p>\r\n          )}\r\n        </div>\r\n      )}\r\n      \r\n      {/* Encabezado de la encuesta */}\r\n      <div className=\"mb-8 text-center\">\r\n        <h1 className=\"text-3xl font-bold mb-2\">{survey.title}</h1>\r\n        <p className=\"text-gray-600\">{survey.description}</p>\r\n        {currentQuestionIndex === 0 && survey.welcomeMessage && (\r\n          <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\r\n            <p>{survey.welcomeMessage}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Progreso */}\r\n      <div className=\"mb-6\">\r\n        <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n          <div \r\n            className=\"bg-blue-600 h-2.5 rounded-full\" \r\n            style={{ width: `${((currentQuestionIndex + 1) / survey.questions.length) * 100}%` }}\r\n          ></div>\r\n        </div>\r\n        <p className=\"text-right text-sm mt-1\">\r\n          Pregunta {currentQuestionIndex + 1} de {survey.questions.length}\r\n        </p>\r\n      </div>\r\n      \r\n      {/* Pantalla de confirmación */}\r\n      {showConfirmation ? (\r\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n          <h2 className=\"text-2xl font-bold mb-4\">Confirmar envío</h2>\r\n          <p className=\"mb-4\">¿Estás seguro de que deseas enviar tus respuestas?</p>\r\n          \r\n          <div className=\"mb-6\">\r\n            <h3 className=\"font-bold mb-2\">Resumen de respuestas:</h3>\r\n            {survey.questions.map((question, index) => (\r\n              <div key={question._id} className=\"mb-3\">\r\n                <p className=\"font-medium\">{index + 1}. {question.text}</p>\r\n                <p className=\"text-gray-700 pl-4\">{responses[index] || \"(Sin respuesta)\"}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          {isListening && (\r\n            <div className=\"bg-green-100 p-3 rounded mb-4 animate-pulse\">\r\n              <p className=\"text-center text-green-800\">\r\n                🎤 Di \"confirmar\" para enviar o \"revisar\" para volver\r\n              </p>\r\n              {currentResponse && (\r\n                <p className=\"text-sm italic text-center mt-1\">\"{currentResponse}\"</p>\r\n              )}\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"flex justify-between\">\r\n            <button\r\n              onClick={() => {\r\n                setShowConfirmation(false);\r\n                if (voiceEnabled) {\r\n                  speakText('Volvamos a revisar las preguntas.', null);\r\n                }\r\n              }}\r\n              className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300\"\r\n              disabled={isSubmitting}\r\n            >\r\n              Volver\r\n            </button>\r\n            <button\r\n              onClick={handleSubmit}\r\n              className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\r\n              disabled={isSubmitting}\r\n            >\r\n              {isSubmitting ? 'Enviando...' : 'Confirmar envío'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {/* Pregunta actual */}\r\n          <div className=\"bg-white rounded-lg shadow-lg p-6 mb-6\">\r\n            <h2 className=\"text-xl font-bold mb-4\">{currentQuestion.text}</h2>\r\n            \r\n            {/* Opciones para preguntas de tipo opción */}\r\n            {currentQuestion.type === 'multiple_choice' && currentQuestion.options && (\r\n              <div className=\"mb-4\">\r\n                <p className=\"text-sm text-gray-600 mb-2\">Opciones:</p>\r\n                <ul className=\"list-disc pl-5\">\r\n                  {currentQuestion.options.map((option, idx) => (\r\n                    <li key={idx} className=\"mb-1\">{option}</li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Área de respuesta */}\r\n            <div className=\"mt-4\">\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Tu respuesta:\r\n              </label>\r\n              <textarea\r\n                value={currentResponse}\r\n                onChange={handleResponseChange}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\r\n                rows=\"3\"\r\n                placeholder=\"Escribe tu respuesta...\"\r\n              ></textarea>\r\n              \r\n              {/* Controles de reconocimiento de voz */}\r\n              <div className=\"flex items-center mt-2\">\r\n                {!isListening ? (\r\n                  <button\r\n                    onClick={startVoiceRecognition}\r\n                    className=\"flex items-center px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                  >\r\n                    <span className=\"mr-1\">🎤</span> Responder por voz\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    onClick={stopVoiceRecognition}\r\n                    className=\"flex items-center px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 animate-pulse\"\r\n                  >\r\n                    <span className=\"mr-1\">⏹️</span> Detener grabación\r\n                  </button>\r\n                )}\r\n                {isListening && (\r\n                  <span className=\"ml-2 text-red-500 animate-pulse\">Escuchando...</span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Botones de navegación */}\r\n          <div className=\"flex justify-between\">\r\n            <button\r\n              onClick={handlePreviousQuestion}\r\n              disabled={currentQuestionIndex === 0}\r\n              className={`px-4 py-2 rounded ${\r\n                currentQuestionIndex === 0\r\n                  ? 'bg-gray-200 text-gray-400 cursor-not-allowed'\r\n                  : 'bg-gray-200 text-gray-800 hover:bg-gray-300'\r\n              }`}\r\n            >\r\n              Anterior\r\n            </button>\r\n            \r\n            <button\r\n              onClick={handleNextQuestion}\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n            >\r\n              {currentQuestionIndex < survey.questions.length - 1 ? 'Siguiente' : 'Finalizar'}\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TakeSurvey; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}