{"ast":null,"code":"/**\n * Utilidades para manejar la API de reconocimiento y síntesis de voz\n */\n\n// Verifica si el navegador soporta la API de reconocimiento de voz\nexport const isSpeechRecognitionSupported = () => {\n  return 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;\n};\n\n// Verifica si el navegador soporta la API de síntesis de voz\nexport const isSpeechSynthesisSupported = () => {\n  return 'speechSynthesis' in window;\n};\n\n// Obtiene instancia de reconocimiento de voz\nexport const getSpeechRecognition = () => {\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!SpeechRecognition) {\n    throw new Error('El navegador no soporta reconocimiento de voz');\n  }\n  const recognition = new SpeechRecognition();\n  recognition.continuous = false;\n  recognition.lang = 'es-ES';\n  recognition.interimResults = false;\n  recognition.maxAlternatives = 1;\n  return recognition;\n};\n\n// Función para hablar texto\nexport const speakText = (text, options = {}) => {\n  return new Promise((resolve, reject) => {\n    if (!('speechSynthesis' in window)) {\n      reject(new Error('El navegador no soporta síntesis de voz'));\n      return;\n    }\n\n    // Cancelar cualquier habla en curso\n    window.speechSynthesis.cancel();\n    const utterance = new SpeechSynthesisUtterance(text);\n\n    // Configurar opciones\n    utterance.lang = options.lang || 'es-ES';\n    utterance.rate = options.rate || 1;\n    utterance.pitch = options.pitch || 1;\n    utterance.volume = options.volume || 1;\n\n    // Eventos\n    utterance.onend = () => resolve();\n    utterance.onerror = error => reject(error);\n\n    // Hablar\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Función para escuchar al usuario\nexport const listenForSpeech = () => {\n  return new Promise((resolve, reject) => {\n    try {\n      const recognition = getSpeechRecognition();\n      recognition.onresult = event => {\n        const speechResult = event.results[0][0].transcript;\n        resolve(speechResult);\n      };\n      recognition.onerror = event => {\n        reject(new Error(`Error en reconocimiento de voz: ${event.error}`));\n      };\n      recognition.start();\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\n// Procesa una respuesta de voz basada en el tipo de pregunta\nexport const processVoiceResponse = (response, questionType) => {\n  const text = response.toLowerCase().trim();\n  switch (questionType) {\n    case 'yesno':\n      if (text.includes('sí') || text.includes('si') || text.includes('claro') || text.includes('por supuesto') || text.includes('afirmativo')) {\n        return 'Sí';\n      } else if (text.includes('no') || text.includes('negativo') || text.includes('nunca') || text.includes('jamás')) {\n        return 'No';\n      } else {\n        return null; // Respuesta inválida\n      }\n    case 'rating':\n      // Buscar un número del 1 al 5 en la respuesta\n      const ratingMatch = text.match(/\\b([1-5])\\b/);\n      return ratingMatch ? ratingMatch[1] : null;\n    case 'single':\n    case 'multiple':\n    case 'open':\n    default:\n      return text;\n    // Devolver el texto tal cual para otros tipos\n  }\n};\n\n// Obtener las voces disponibles para la síntesis\nexport const getAvailableVoices = () => {\n  return new Promise(resolve => {\n    // Función para obtener voces\n    const getVoices = () => {\n      const voices = window.speechSynthesis.getVoices();\n      resolve(voices);\n    };\n\n    // Si las voces ya están disponibles, obtenerlas directamente\n    const voices = window.speechSynthesis.getVoices();\n    if (voices && voices.length > 0) {\n      resolve(voices);\n      return;\n    }\n\n    // Si no, esperar al evento voiceschanged\n    window.speechSynthesis.onvoiceschanged = getVoices;\n  });\n};\n\n// Verificar los permisos de micrófono\nexport const checkMicrophonePermission = async () => {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    // Detener todas las pistas de audio para liberar el micrófono\n    stream.getTracks().forEach(track => track.stop());\n    return true;\n  } catch (error) {\n    console.error('Error al verificar permisos de micrófono:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["isSpeechRecognitionSupported","window","isSpeechSynthesisSupported","getSpeechRecognition","SpeechRecognition","webkitSpeechRecognition","Error","recognition","continuous","lang","interimResults","maxAlternatives","speakText","text","options","Promise","resolve","reject","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","rate","pitch","volume","onend","onerror","error","speak","listenForSpeech","onresult","event","speechResult","results","transcript","start","processVoiceResponse","response","questionType","toLowerCase","trim","includes","ratingMatch","match","getAvailableVoices","getVoices","voices","length","onvoiceschanged","checkMicrophonePermission","stream","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","track","stop","console"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/utils/voiceSurveyAPI.js"],"sourcesContent":["/**\n * Utilidades para manejar la API de reconocimiento y síntesis de voz\n */\n\n// Verifica si el navegador soporta la API de reconocimiento de voz\nexport const isSpeechRecognitionSupported = () => {\n  return 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;\n};\n\n// Verifica si el navegador soporta la API de síntesis de voz\nexport const isSpeechSynthesisSupported = () => {\n  return 'speechSynthesis' in window;\n};\n\n// Obtiene instancia de reconocimiento de voz\nexport const getSpeechRecognition = () => {\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  if (!SpeechRecognition) {\n    throw new Error('El navegador no soporta reconocimiento de voz');\n  }\n  \n  const recognition = new SpeechRecognition();\n  recognition.continuous = false;\n  recognition.lang = 'es-ES';\n  recognition.interimResults = false;\n  recognition.maxAlternatives = 1;\n  \n  return recognition;\n};\n\n// Función para hablar texto\nexport const speakText = (text, options = {}) => {\n  return new Promise((resolve, reject) => {\n    if (!('speechSynthesis' in window)) {\n      reject(new Error('El navegador no soporta síntesis de voz'));\n      return;\n    }\n\n    // Cancelar cualquier habla en curso\n    window.speechSynthesis.cancel();\n    \n    const utterance = new SpeechSynthesisUtterance(text);\n    \n    // Configurar opciones\n    utterance.lang = options.lang || 'es-ES';\n    utterance.rate = options.rate || 1;\n    utterance.pitch = options.pitch || 1;\n    utterance.volume = options.volume || 1;\n    \n    // Eventos\n    utterance.onend = () => resolve();\n    utterance.onerror = (error) => reject(error);\n    \n    // Hablar\n    window.speechSynthesis.speak(utterance);\n  });\n};\n\n// Función para escuchar al usuario\nexport const listenForSpeech = () => {\n  return new Promise((resolve, reject) => {\n    try {\n      const recognition = getSpeechRecognition();\n      \n      recognition.onresult = (event) => {\n        const speechResult = event.results[0][0].transcript;\n        resolve(speechResult);\n      };\n      \n      recognition.onerror = (event) => {\n        reject(new Error(`Error en reconocimiento de voz: ${event.error}`));\n      };\n      \n      recognition.start();\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\n// Procesa una respuesta de voz basada en el tipo de pregunta\nexport const processVoiceResponse = (response, questionType) => {\n  const text = response.toLowerCase().trim();\n  \n  switch (questionType) {\n    case 'yesno':\n      if (text.includes('sí') || text.includes('si') || text.includes('claro') || \n          text.includes('por supuesto') || text.includes('afirmativo')) {\n        return 'Sí';\n      } else if (text.includes('no') || text.includes('negativo') || \n                text.includes('nunca') || text.includes('jamás')) {\n        return 'No';\n      } else {\n        return null; // Respuesta inválida\n      }\n    \n    case 'rating':\n      // Buscar un número del 1 al 5 en la respuesta\n      const ratingMatch = text.match(/\\b([1-5])\\b/);\n      return ratingMatch ? ratingMatch[1] : null;\n      \n    case 'single':\n    case 'multiple':\n    case 'open':\n    default:\n      return text; // Devolver el texto tal cual para otros tipos\n  }\n};\n\n// Obtener las voces disponibles para la síntesis\nexport const getAvailableVoices = () => {\n  return new Promise((resolve) => {\n    // Función para obtener voces\n    const getVoices = () => {\n      const voices = window.speechSynthesis.getVoices();\n      resolve(voices);\n    };\n\n    // Si las voces ya están disponibles, obtenerlas directamente\n    const voices = window.speechSynthesis.getVoices();\n    if (voices && voices.length > 0) {\n      resolve(voices);\n      return;\n    }\n\n    // Si no, esperar al evento voiceschanged\n    window.speechSynthesis.onvoiceschanged = getVoices;\n  });\n};\n\n// Verificar los permisos de micrófono\nexport const checkMicrophonePermission = async () => {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    // Detener todas las pistas de audio para liberar el micrófono\n    stream.getTracks().forEach(track => track.stop());\n    return true;\n  } catch (error) {\n    console.error('Error al verificar permisos de micrófono:', error);\n    return false;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}