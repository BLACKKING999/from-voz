{"ast":null,"code":"/**\n * Servicio de síntesis de voz avanzado usando PlayHT\n * Proporciona funciones para sintetizar voz de alta calidad\n */\nimport * as PlayHT from 'playht';\n\n// Inicializar el cliente PlayHT con las credenciales\nPlayHT.init({\n  userId: 'F6TL9BrRk2fgw1uKQjkZw1QRSbv2',\n  apiKey: 'ak-c69b8479b0894a76aa0bcdd6e12e33c9'\n});\n\n// Cache de archivos de audio para evitar crear múltiples archivos\nconst audioCache = {};\n\n/**\n * Genera un hash simple para usar como clave de caché\n */\nconst generateKey = (text, voice) => {\n  return `${text.substring(0, 50)}_${voice}`.replace(/[^a-zA-Z0-9]/g, '_');\n};\n\n/**\n * Reproduce el texto utilizando la API de PlayHT\n */\nexport const speakWithPlayHT = async (text, onStarted, onEnded, onError) => {\n  if (!text || text.trim().length === 0) {\n    if (onError) onError('Texto vacío');\n    return;\n  }\n  try {\n    console.log('AudioService: Solicitando síntesis para:', text);\n\n    // Usar una voz en español\n    const voice = 'es-ES_Neural2-Female';\n    const cacheKey = generateKey(text, voice);\n\n    // Crear un elemento de audio para reproducir\n    const audio = new Audio();\n\n    // Configurar los callbacks\n    audio.onplay = () => {\n      console.log('AudioService: Reproducción iniciada');\n      if (onStarted) onStarted();\n    };\n    audio.onended = () => {\n      console.log('AudioService: Reproducción finalizada');\n      // Limpiar el elemento de la caché después de reproducirlo\n      URL.revokeObjectURL(audio.src);\n      delete audioCache[cacheKey];\n      if (onEnded) onEnded();\n    };\n    audio.onerror = error => {\n      console.error('AudioService: Error en reproducción:', error);\n      if (onError) onError(error);\n    };\n\n    // Verificar si ya tenemos el audio en caché\n    if (audioCache[cacheKey]) {\n      console.log('AudioService: Usando audio en caché');\n      audio.src = audioCache[cacheKey];\n      audio.play();\n      return () => audio.pause();\n    }\n\n    // Generar el audio con PlayHT (usando el modo de streaming para bajo latencia)\n    console.log('AudioService: Generando nuevo audio con PlayHT');\n    const audioStream = await PlayHT.stream(text, {\n      voiceEngine: 'PlayHT2.0',\n      voiceId: voice,\n      quality: 'low' // Calidad baja para menor latencia\n    });\n\n    // Recolectar los chunks de audio\n    const chunks = [];\n    audioStream.on('data', chunk => {\n      chunks.push(chunk);\n    });\n\n    // Al finalizar, crear un blob y reproducirlo\n    audioStream.on('end', () => {\n      const blob = new Blob(chunks, {\n        type: 'audio/mp3'\n      });\n      const url = URL.createObjectURL(blob);\n\n      // Guardar en caché para reutilizar\n      audioCache[cacheKey] = url;\n\n      // Reproducir el audio\n      audio.src = url;\n      audio.play();\n    });\n\n    // Devolver una función para detener la reproducción\n    return () => audio.pause();\n  } catch (error) {\n    console.error('AudioService: Error al sintetizar voz:', error);\n    if (onError) onError(error.message || 'Error desconocido en la síntesis de voz');\n    return () => {};\n  }\n};\n\n/**\n * Fallback: usar la API nativa de síntesis de voz del navegador\n */\nexport const speakWithBrowser = (text, onStarted, onEnded, onError) => {\n  if (!window.speechSynthesis) {\n    if (onError) onError('Este navegador no soporta la síntesis de voz');\n    return () => {};\n  }\n  try {\n    // Cancelar cualquier síntesis anterior\n    window.speechSynthesis.cancel();\n\n    // Crear nuevo utterance\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = 'es-ES';\n    utterance.rate = 1.0;\n    utterance.pitch = 1.0;\n    utterance.volume = 1.0;\n\n    // Buscar una voz en español\n    const voices = window.speechSynthesis.getVoices();\n    const spanishVoice = voices.find(voice => voice.lang.includes('es') || voice.name.toLowerCase().includes('spanish'));\n    if (spanishVoice) {\n      utterance.voice = spanishVoice;\n    }\n\n    // Configurar eventos\n    utterance.onstart = () => {\n      console.log('AudioService (Browser): Síntesis iniciada');\n      if (onStarted) onStarted();\n    };\n    utterance.onend = () => {\n      console.log('AudioService (Browser): Síntesis finalizada');\n      if (onEnded) onEnded();\n    };\n    utterance.onerror = event => {\n      console.error('AudioService (Browser): Error en síntesis:', event);\n      if (onError) onError(event.error || 'Error desconocido');\n    };\n\n    // Iniciar síntesis\n    window.speechSynthesis.speak(utterance);\n\n    // Workaround para Chrome (bug de pausa después de 15s)\n    const intervalId = setInterval(() => {\n      if (window.speechSynthesis.speaking) {\n        window.speechSynthesis.pause();\n        window.speechSynthesis.resume();\n      } else {\n        clearInterval(intervalId);\n      }\n    }, 10000);\n\n    // Devolver una función para detener la síntesis\n    return () => {\n      clearInterval(intervalId);\n      window.speechSynthesis.cancel();\n    };\n  } catch (error) {\n    console.error('AudioService (Browser): Error:', error);\n    if (onError) onError(error.message || 'Error desconocido');\n    return () => {};\n  }\n};\n\n/**\n * Función principal que intenta usar PlayHT primero, \n * y si falla, usa la API nativa del navegador\n */\nexport const speakText = async (text, onStarted, onEnded, onError) => {\n  try {\n    // Intentar primero con PlayHT\n    return await speakWithPlayHT(text, onStarted, onEnded, error => {\n      console.warn('AudioService: PlayHT falló, usando fallback del navegador:', error);\n\n      // Si falla, usar el sintetizador del navegador como fallback\n      return speakWithBrowser(text, onStarted, onEnded, onError);\n    });\n  } catch (error) {\n    console.error('AudioService: Error general:', error);\n\n    // En caso de error general, intentar con el navegador\n    return speakWithBrowser(text, onStarted, onEnded, onError);\n  }\n};\nexport default {\n  speakText\n};","map":{"version":3,"names":["PlayHT","init","userId","apiKey","audioCache","generateKey","text","voice","substring","replace","speakWithPlayHT","onStarted","onEnded","onError","trim","length","console","log","cacheKey","audio","Audio","onplay","onended","URL","revokeObjectURL","src","onerror","error","play","pause","audioStream","stream","voiceEngine","voiceId","quality","chunks","on","chunk","push","blob","Blob","type","url","createObjectURL","message","speakWithBrowser","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","lang","rate","pitch","volume","voices","getVoices","spanishVoice","find","includes","name","toLowerCase","onstart","onend","event","speak","intervalId","setInterval","speaking","resume","clearInterval","speakText","warn"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/services/audioService.js"],"sourcesContent":["/**\n * Servicio de síntesis de voz avanzado usando PlayHT\n * Proporciona funciones para sintetizar voz de alta calidad\n */\nimport * as PlayHT from 'playht';\n\n// Inicializar el cliente PlayHT con las credenciales\nPlayHT.init({\n  userId: 'F6TL9BrRk2fgw1uKQjkZw1QRSbv2',\n  apiKey: 'ak-c69b8479b0894a76aa0bcdd6e12e33c9',\n});\n\n// Cache de archivos de audio para evitar crear múltiples archivos\nconst audioCache = {};\n\n/**\n * Genera un hash simple para usar como clave de caché\n */\nconst generateKey = (text, voice) => {\n  return `${text.substring(0, 50)}_${voice}`.replace(/[^a-zA-Z0-9]/g, '_');\n};\n\n/**\n * Reproduce el texto utilizando la API de PlayHT\n */\nexport const speakWithPlayHT = async (text, onStarted, onEnded, onError) => {\n  if (!text || text.trim().length === 0) {\n    if (onError) onError('Texto vacío');\n    return;\n  }\n  \n  try {\n    console.log('AudioService: Solicitando síntesis para:', text);\n    \n    // Usar una voz en español\n    const voice = 'es-ES_Neural2-Female';\n    const cacheKey = generateKey(text, voice);\n    \n    // Crear un elemento de audio para reproducir\n    const audio = new Audio();\n    \n    // Configurar los callbacks\n    audio.onplay = () => {\n      console.log('AudioService: Reproducción iniciada');\n      if (onStarted) onStarted();\n    };\n    \n    audio.onended = () => {\n      console.log('AudioService: Reproducción finalizada');\n      // Limpiar el elemento de la caché después de reproducirlo\n      URL.revokeObjectURL(audio.src);\n      delete audioCache[cacheKey];\n      if (onEnded) onEnded();\n    };\n    \n    audio.onerror = (error) => {\n      console.error('AudioService: Error en reproducción:', error);\n      if (onError) onError(error);\n    };\n    \n    // Verificar si ya tenemos el audio en caché\n    if (audioCache[cacheKey]) {\n      console.log('AudioService: Usando audio en caché');\n      audio.src = audioCache[cacheKey];\n      audio.play();\n      return () => audio.pause();\n    }\n    \n    // Generar el audio con PlayHT (usando el modo de streaming para bajo latencia)\n    console.log('AudioService: Generando nuevo audio con PlayHT');\n    const audioStream = await PlayHT.stream(text, { \n      voiceEngine: 'PlayHT2.0',\n      voiceId: voice,\n      quality: 'low' // Calidad baja para menor latencia\n    });\n    \n    // Recolectar los chunks de audio\n    const chunks = [];\n    audioStream.on('data', (chunk) => {\n      chunks.push(chunk);\n    });\n    \n    // Al finalizar, crear un blob y reproducirlo\n    audioStream.on('end', () => {\n      const blob = new Blob(chunks, { type: 'audio/mp3' });\n      const url = URL.createObjectURL(blob);\n      \n      // Guardar en caché para reutilizar\n      audioCache[cacheKey] = url;\n      \n      // Reproducir el audio\n      audio.src = url;\n      audio.play();\n    });\n    \n    // Devolver una función para detener la reproducción\n    return () => audio.pause();\n    \n  } catch (error) {\n    console.error('AudioService: Error al sintetizar voz:', error);\n    if (onError) onError(error.message || 'Error desconocido en la síntesis de voz');\n    return () => {};\n  }\n};\n\n/**\n * Fallback: usar la API nativa de síntesis de voz del navegador\n */\nexport const speakWithBrowser = (text, onStarted, onEnded, onError) => {\n  if (!window.speechSynthesis) {\n    if (onError) onError('Este navegador no soporta la síntesis de voz');\n    return () => {};\n  }\n  \n  try {\n    // Cancelar cualquier síntesis anterior\n    window.speechSynthesis.cancel();\n    \n    // Crear nuevo utterance\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = 'es-ES';\n    utterance.rate = 1.0;\n    utterance.pitch = 1.0;\n    utterance.volume = 1.0;\n    \n    // Buscar una voz en español\n    const voices = window.speechSynthesis.getVoices();\n    const spanishVoice = voices.find(voice => \n      voice.lang.includes('es') || \n      voice.name.toLowerCase().includes('spanish')\n    );\n    \n    if (spanishVoice) {\n      utterance.voice = spanishVoice;\n    }\n    \n    // Configurar eventos\n    utterance.onstart = () => {\n      console.log('AudioService (Browser): Síntesis iniciada');\n      if (onStarted) onStarted();\n    };\n    \n    utterance.onend = () => {\n      console.log('AudioService (Browser): Síntesis finalizada');\n      if (onEnded) onEnded();\n    };\n    \n    utterance.onerror = (event) => {\n      console.error('AudioService (Browser): Error en síntesis:', event);\n      if (onError) onError(event.error || 'Error desconocido');\n    };\n    \n    // Iniciar síntesis\n    window.speechSynthesis.speak(utterance);\n    \n    // Workaround para Chrome (bug de pausa después de 15s)\n    const intervalId = setInterval(() => {\n      if (window.speechSynthesis.speaking) {\n        window.speechSynthesis.pause();\n        window.speechSynthesis.resume();\n      } else {\n        clearInterval(intervalId);\n      }\n    }, 10000);\n    \n    // Devolver una función para detener la síntesis\n    return () => {\n      clearInterval(intervalId);\n      window.speechSynthesis.cancel();\n    };\n    \n  } catch (error) {\n    console.error('AudioService (Browser): Error:', error);\n    if (onError) onError(error.message || 'Error desconocido');\n    return () => {};\n  }\n};\n\n/**\n * Función principal que intenta usar PlayHT primero, \n * y si falla, usa la API nativa del navegador\n */\nexport const speakText = async (text, onStarted, onEnded, onError) => {\n  try {\n    // Intentar primero con PlayHT\n    return await speakWithPlayHT(text, onStarted, onEnded, (error) => {\n      console.warn('AudioService: PlayHT falló, usando fallback del navegador:', error);\n      \n      // Si falla, usar el sintetizador del navegador como fallback\n      return speakWithBrowser(text, onStarted, onEnded, onError);\n    });\n  } catch (error) {\n    console.error('AudioService: Error general:', error);\n    \n    // En caso de error general, intentar con el navegador\n    return speakWithBrowser(text, onStarted, onEnded, onError);\n  }\n};\n\nexport default {\n  speakText\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}