{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\Sistema de Encuestas por Voz\\\\client\\\\src\\\\pages\\\\TakeSurvey.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { isSpeechRecognitionSupported, isSpeechSynthesisSupported, listenForSpeech, speakText, processVoiceResponse, checkMicrophonePermission } from '../utils/voiceSurveyAPI';\nimport { SurveyService, ResponseService } from '../services/apiService';\nimport { FaSpinner, FaMicrophone, FaVolumeUp } from 'react-icons/fa';\nimport SimpleVoice from '../components/SimpleVoice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TakeSurvey = () => {\n  _s();\n  var _survey$questions2;\n  const {\n    surveyId\n  } = useParams();\n  const navigate = useNavigate();\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [currentStep, setCurrentStep] = useState('welcome'); // welcome, name, questions, thanks\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userName, setUserName] = useState('');\n  const [responses, setResponses] = useState([]);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [browserSupported, setBrowserSupported] = useState(true);\n  const [microphonePermission, setMicrophonePermission] = useState(null);\n  const [showThankYouMessage, setShowThankYouMessage] = useState(false);\n  const [voiceText, setVoiceText] = useState('');\n  const [speakEndCallback, setSpeakEndCallback] = useState(null);\n\n  // Frases para mejorar la naturalidad de la conversación\n  const CONVERSATION_PHRASES = {\n    acknowledgments: ['Entendido.', 'Perfecto.', 'Muy bien.', 'Gracias por su respuesta.', 'He registrado su respuesta.'],\n    clarifications: ['No he entendido bien. ¿Podría repetirlo?', 'Disculpe, ¿podría decirlo de nuevo?', 'No pude entender su respuesta. Intentemos de nuevo.'],\n    transitions: ['Pasemos a la siguiente pregunta.', 'Continuemos con la siguiente pregunta.', 'Ahora, la siguiente pregunta.']\n  };\n\n  // Comprobar compatibilidad del navegador y permisos\n  useEffect(() => {\n    const checkCompatibility = async () => {\n      // Verificar si el navegador soporta reconocimiento de voz\n      const speechRecognitionSupported = isSpeechRecognitionSupported();\n      const speechSynthesisSupported = isSpeechSynthesisSupported();\n      if (!speechRecognitionSupported || !speechSynthesisSupported) {\n        setBrowserSupported(false);\n        setErrorMessage('Su navegador no soporta las tecnologías de voz necesarias para esta encuesta. Por favor, use Chrome, Edge o Safari.');\n        return;\n      }\n\n      // Verificar permisos de micrófono\n      const hasMicrophonePermission = await checkMicrophonePermission();\n      setMicrophonePermission(hasMicrophonePermission);\n      if (!hasMicrophonePermission) {\n        setErrorMessage('Necesitamos permiso para usar su micrófono. Por favor, permita el acceso cuando se le solicite.');\n      }\n    };\n    checkCompatibility();\n  }, []);\n\n  // Obtener datos de la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        setLoading(true);\n        console.log(`Intentando cargar la encuesta con ID: ${surveyId}`);\n\n        // Usar el servicio centralizado para obtener la encuesta pública\n        const data = await SurveyService.getPublicSurvey(surveyId);\n        if (data) {\n          console.log('Encuesta cargada exitosamente:', data);\n          setSurvey(data);\n          // Inicializar array de respuestas\n          setResponses(data.questions.map(() => ({\n            value: '',\n            timestamp: null\n          })));\n        } else {\n          console.error('La respuesta no contiene datos');\n          setErrorMessage('La encuesta no contiene datos válidos.');\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching survey:', error);\n\n        // Mensajes de error más específicos\n        if (error.response) {\n          // El servidor respondió con un código de error\n          if (error.response.status === 404) {\n            setErrorMessage('Encuesta no encontrada. El ID proporcionado no corresponde a ninguna encuesta existente.');\n          } else if (error.response.status === 403) {\n            setErrorMessage('Esta encuesta ya no está activa o no es pública.');\n          } else {\n            var _error$response$data;\n            setErrorMessage(`Error del servidor: ${((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error desconocido'}`);\n          }\n        } else if (error.request) {\n          // La solicitud se hizo pero no se recibió respuesta\n          setErrorMessage('No se pudo conectar con el servidor. Verifica tu conexión a internet.');\n        } else {\n          // Error al configurar la solicitud\n          setErrorMessage('Error al crear la solicitud: ' + error.message);\n        }\n        setLoading(false);\n      }\n    };\n    if (surveyId) {\n      fetchSurvey();\n    }\n  }, [surveyId]);\n\n  // Efecto para iniciar la conversación cuando la encuesta se carga correctamente\n  useEffect(() => {\n    if (survey && browserSupported && microphonePermission && !loading) {\n      console.log('Iniciando conversación automática...');\n      // Pequeño retraso para asegurar que todo está listo\n      setTimeout(() => {\n        startConversation();\n      }, 1000);\n    }\n  }, [survey, browserSupported, microphonePermission, loading]);\n\n  // Iniciar la conversación automática\n  const startConversation = async () => {\n    console.log('Función startConversation ejecutada');\n    console.log('Estado actual:', {\n      survey,\n      currentStep,\n      currentQuestionIndex\n    });\n    try {\n      // Primera interacción: mensaje de bienvenida y solicitar nombre directamente\n      const welcomeMessage = `Bienvenido a la encuesta de voz: ${survey.title}. ${survey.description || ''}. Para comenzar, ¿podría decirme su nombre por favor?`;\n      console.log('Enviando mensaje de bienvenida con solicitud de nombre:', welcomeMessage);\n\n      // Cambiar al paso de nombre directamente\n      setCurrentStep('name');\n      await speakText(welcomeMessage);\n      console.log('Mensaje de bienvenida completado');\n\n      // Iniciar escucha con un breve retraso\n      setTimeout(() => {\n        console.log('Iniciando reconocimiento de voz para captar nombre...');\n        startListening();\n      }, 1000);\n    } catch (error) {\n      console.error('Error durante startConversation:', error);\n      // Reintentar en caso de error\n      setTimeout(() => startConversation(), 2000);\n    }\n  };\n\n  // Mover a la sección de preguntas\n  const moveToQuestions = async () => {\n    console.log('Moviendo a la sección de preguntas...');\n    setCurrentStep('questions');\n    setCurrentQuestionIndex(0);\n    // Pequeña pausa para asegurar que los estados se actualicen\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await speakCurrentQuestion();\n  };\n\n  // Hablar la pregunta actual\n  const speakCurrentQuestion = async () => {\n    console.log('Hablando pregunta actual:', currentQuestionIndex);\n    if (!survey || currentQuestionIndex >= survey.questions.length) {\n      var _survey$questions;\n      console.error('No hay más preguntas o índice inválido:', {\n        currentQuestionIndex,\n        questionsLength: survey === null || survey === void 0 ? void 0 : (_survey$questions = survey.questions) === null || _survey$questions === void 0 ? void 0 : _survey$questions.length\n      });\n      return;\n    }\n    const question = survey.questions[currentQuestionIndex];\n    console.log('Pregunta a formular:', question);\n    let questionText = question.text;\n\n    // Añadir instrucciones específicas según tipo de pregunta\n    if (question.type === 'rating') {\n      questionText += ' Por favor, responda con un número del 1 al 5, donde 1 es lo más bajo y 5 lo más alto.';\n    } else if (question.type === 'yesno') {\n      questionText += ' Por favor, responda sí o no.';\n    }\n\n    // Hablar la pregunta\n    setIsSpeaking(true);\n    try {\n      await speakText(questionText);\n      console.log('Pregunta terminada de hablar, iniciando escucha...');\n      setIsSpeaking(false);\n      // Pequeña pausa antes de empezar a escuchar\n      setTimeout(async () => {\n        console.log('Iniciando escucha desde setTimeout después de hablar pregunta');\n        await startListening();\n      }, 800);\n    } catch (error) {\n      console.error('Error al hablar la pregunta:', error);\n      setIsSpeaking(false);\n      // Reintentar en caso de error\n      setTimeout(() => speakCurrentQuestion(), 1500);\n    }\n  };\n\n  // Función para cuando termina de hablar la pregunta\n  const onQuestionSpeakEnd = () => {\n    setTimeout(startListening, 500);\n  };\n\n  // Función para cuando termina de hablar el mensaje de agradecimiento\n  const onThankYouSpeakEnd = async () => {\n    try {\n      // Enviar respuestas al servidor\n      await submitResponses();\n    } catch (error) {\n      console.error('Error submitting responses:', error);\n    }\n  };\n\n  // Función para enviar respuestas al servidor\n  const submitResponses = async () => {\n    try {\n      const formattedResponses = responses.map((response, index) => ({\n        questionId: survey.questions[index]._id,\n        questionText: survey.questions[index].text,\n        answer: response.value,\n        timestamp: response.timestamp\n      }));\n\n      // Usar el servicio centralizado para enviar respuestas\n      await ResponseService.submitResponse({\n        surveyId: survey._id,\n        surveyTitle: survey.title,\n        respondentName: userName || 'Anónimo',\n        responses: formattedResponses\n      });\n      console.log('Respuestas enviadas correctamente');\n      setCurrentStep('thanks');\n\n      // Hablar mensaje de agradecimiento\n      const thankYouMessage = survey.farewell || 'Gracias por completar esta encuesta. Sus respuestas han sido registradas correctamente.';\n      await speakText(thankYouMessage);\n      setShowThankYouMessage(true);\n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setErrorMessage('Error al enviar respuestas. Por favor, intente nuevamente.');\n    }\n  };\n\n  // Función para iniciar escucha automáticamente\n  const startListening = async () => {\n    console.log('Iniciando escucha...');\n    if (isListening) {\n      console.log('Ya estaba escuchando, se ignorará esta llamada');\n      return;\n    }\n    setIsListening(true);\n    setTranscript('');\n    try {\n      console.log('Activando el reconocimiento de voz...');\n      const speechResult = await listenForSpeech();\n      console.log('Respuesta recibida:', speechResult);\n      setIsListening(false);\n\n      // Procesar la respuesta en un setTimeout para evitar problemas con el estado de React\n      setTimeout(async () => {\n        console.log('Procesando respuesta desde setTimeout');\n        await processResponse(speechResult);\n      }, 500);\n    } catch (error) {\n      console.error('Error en reconocimiento de voz:', error);\n      setIsListening(false);\n\n      // Si hubo un error, intentar nuevamente después de dar feedback\n      const clarification = CONVERSATION_PHRASES.clarifications[Math.floor(Math.random() * CONVERSATION_PHRASES.clarifications.length)];\n      await speakText(clarification);\n      // Esperar un momento antes de volver a escuchar\n      setTimeout(() => startListening(), 1000);\n    }\n  };\n\n  // Función para escuchar la voz del usuario\n  const listenForSpeech = () => {\n    console.log('Configurando listenForSpeech...');\n    return new Promise((resolve, reject) => {\n      try {\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        const recognition = new SpeechRecognition();\n        recognition.lang = 'es-ES';\n        recognition.continuous = false;\n        recognition.interimResults = false;\n        console.log('Configuración de reconocimiento completada, iniciando...');\n        recognition.onresult = event => {\n          const transcript = event.results[0][0].transcript;\n          console.log('onresult - Transcripción recibida:', transcript);\n          resolve(transcript);\n        };\n        recognition.onerror = event => {\n          console.error('Error en reconocimiento:', event.error);\n          reject(new Error(`Error de reconocimiento de voz: ${event.error}`));\n        };\n        recognition.onend = () => {\n          console.log('onend - Reconocimiento finalizado');\n          // Si no hubo resultado (onresult no se llamó) y no hubo error\n          // podemos resolver con string vacío o rechazar\n          // Comentado para evitar rechazos no deseados:\n          // reject(new Error('No se detectó voz'));\n        };\n\n        // Comenzar a escuchar\n        recognition.start();\n        console.log('Reconocimiento iniciado correctamente');\n\n        // Asegurar que no se quede escuchando indefinidamente\n        setTimeout(() => {\n          try {\n            recognition.stop();\n            console.log('Reconocimiento detenido por timeout');\n          } catch (e) {\n            console.log('Error al detener reconocimiento por timeout', e);\n          }\n        }, 10000); // 10 segundos máximo de escucha\n      } catch (error) {\n        console.error('Error al inicializar reconocimiento de voz:', error);\n        reject(error);\n      }\n    });\n  };\n\n  // Función para procesar la respuesta del usuario con NLP mejorado\n  const processResponse = async text => {\n    console.log('Procesando respuesta:', text);\n    if (!text || text.trim() === '') {\n      console.log('Respuesta vacía, volviendo a escuchar...');\n      setTimeout(() => startListening(), 1000);\n      return;\n    }\n    setTranscript(text);\n    try {\n      if (currentStep === 'name') {\n        console.log('Procesando nombre:', text);\n\n        // Extraer el nombre usando técnicas básicas de NLP\n        // Si la respuesta es una pregunta, asumimos que no entendió nuestra pregunta\n        if (text.includes('?') || text.startsWith('¿')) {\n          // El usuario está preguntando algo en lugar de decir su nombre\n          await speakText('Disculpe, solo necesito saber su nombre para registrar sus respuestas. ¿Cómo se llama?');\n          setTimeout(() => startListening(), 1000);\n          return;\n        }\n\n        // Intentar extraer el nombre\n        let possibleName = extractName(text);\n        console.log('Nombre extraído:', possibleName);\n\n        // Si no pudimos extraer un nombre válido, usar un nombre genérico\n        if (possibleName === 'Anónimo') {\n          possibleName = 'Estimado participante';\n        }\n\n        // Guardar el nombre y continuar\n        setUserName(possibleName);\n\n        // Confirmar y seguir - respuesta más natural\n        await speakText(`Gracias, ${possibleName}. Vamos a comenzar con la primera pregunta.`);\n\n        // Pasar a las preguntas con un retraso para asegurar la actualización de estado\n        setTimeout(async () => {\n          console.log('Pasando a las preguntas de la encuesta...');\n          await moveToQuestions();\n        }, 800);\n        return;\n      }\n      if (currentStep === 'questions') {\n        console.log('Procesando respuesta a pregunta:', currentQuestionIndex);\n        const currentQuestion = survey.questions[currentQuestionIndex];\n\n        // Procesar la respuesta según el tipo de pregunta\n        const processedResponse = processVoiceResponse(text, currentQuestion.type);\n        console.log('Respuesta procesada:', processedResponse);\n        if (processedResponse !== null) {\n          // Respuesta válida\n          saveResponse(processedResponse);\n\n          // Dar feedback al usuario\n          const acknowledgment = CONVERSATION_PHRASES.acknowledgments[Math.floor(Math.random() * CONVERSATION_PHRASES.acknowledgments.length)];\n          await speakText(acknowledgment);\n\n          // Transición a siguiente pregunta o finalizar\n          if (currentQuestionIndex < survey.questions.length - 1) {\n            const transition = CONVERSATION_PHRASES.transitions[Math.floor(Math.random() * CONVERSATION_PHRASES.transitions.length)];\n            await speakText(transition);\n\n            // Incrementar el índice y pasar a la siguiente pregunta\n            setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n\n            // Esperar a que se actualice el estado antes de continuar\n            console.log('Avanzando a la siguiente pregunta...');\n\n            // Usar setTimeout para asegurar que el cambio de estado se complete\n            setTimeout(async () => {\n              console.log('Ejecutando speakCurrentQuestion desde setTimeout');\n              await speakCurrentQuestion();\n            }, 1000);\n          } else {\n            // Finalizar encuesta\n            console.log('Terminando encuesta, enviando respuestas...');\n            await submitResponses();\n          }\n        } else {\n          // Respuesta inválida, pedir aclaración\n          console.log('Respuesta inválida, pidiendo aclaración...');\n          const clarification = CONVERSATION_PHRASES.clarifications[Math.floor(Math.random() * CONVERSATION_PHRASES.clarifications.length)];\n          await speakText(clarification);\n\n          // Usar setTimeout para evitar problemas con promesas anidadas\n          setTimeout(async () => {\n            console.log('Reiniciando escucha después de aclaración');\n            await startListening();\n          }, 800);\n        }\n      }\n    } catch (error) {\n      console.error('Error durante el procesamiento de la respuesta:', error);\n      // Intentar recuperarse del error\n      setTimeout(async () => {\n        if (currentStep === 'name') {\n          await speakText('Lo siento, hubo un problema. Intentemos de nuevo. ¿Podría decirme su nombre?');\n          setTimeout(() => startListening(), 1000);\n        } else if (currentStep === 'questions') {\n          await speakCurrentQuestion();\n        }\n      }, 1500);\n    }\n  };\n\n  // Función para extraer un nombre de texto\n  const extractName = text => {\n    console.log('Extrayendo nombre de:', text);\n\n    // Si el texto está vacío o no es una cadena\n    if (!text || typeof text !== 'string') {\n      console.log('Texto vacío o no es cadena, usando nombre genérico');\n      return 'Estimado participante';\n    }\n\n    // Eliminar signos de puntuación y normalizar texto\n    const normalizedText = text.replace(/[.,;:¡!¿?]/g, '').trim();\n\n    // Frases comunes al indicar un nombre\n    const namePhrases = ['me llamo', 'mi nombre es', 'soy', 'yo soy', 'puedes llamarme', 'puede llamarme', 'llámame', 'llamame'];\n\n    // Buscar frases de presentación\n    let cleanedText = normalizedText;\n    for (const phrase of namePhrases) {\n      if (normalizedText.toLowerCase().includes(phrase)) {\n        // Extraer texto después de la frase de presentación\n        const parts = normalizedText.toLowerCase().split(phrase);\n        if (parts.length > 1 && parts[1].trim()) {\n          cleanedText = parts[1].trim();\n          console.log(`Frase de presentación '${phrase}' encontrada, texto limpio: '${cleanedText}'`);\n          break;\n        }\n      }\n    }\n\n    // Palabras comunes para ignorar al final\n    const commonWords = ['gracias', 'por favor', 'aquí', 'señor', 'señora', 'mucho gusto'];\n    for (const word of commonWords) {\n      if (cleanedText.toLowerCase().endsWith(word)) {\n        cleanedText = cleanedText.slice(0, -word.length).trim();\n      }\n    }\n\n    // Si el texto limpio está vacío, usar el original\n    if (!cleanedText) {\n      cleanedText = normalizedText;\n    }\n\n    // Obtener las palabras del texto\n    const words = cleanedText.split(/\\s+/);\n\n    // Si solo hay una palabra, asumimos que es el nombre\n    if (words.length === 1) {\n      const name = words[0];\n      console.log('Nombre extraído (una palabra):', name);\n      // Capitalizar primera letra\n      return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n    }\n\n    // Si hay más palabras, tomar hasta 3 palabras como nombre completo\n    const nameWords = words.slice(0, Math.min(3, words.length));\n    let extractedName = nameWords.join(' ');\n\n    // Capitalizar cada palabra\n    extractedName = extractedName.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    console.log('Nombre extraído (múltiples palabras):', extractedName);\n    return extractedName;\n  };\n\n  // Función para guardar respuesta y pasar a la siguiente pregunta\n  const saveResponse = value => {\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = {\n      value,\n      timestamp: new Date().toISOString()\n    };\n    setResponses(updatedResponses);\n\n    // Verificar si hay más preguntas\n    if (currentQuestionIndex < survey.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Fin de la encuesta\n      setCurrentStep('thanks');\n    }\n  };\n\n  // Manejar clic en botón de micrófono\n  const handleMicrophoneClick = () => {\n    if (isListening) {\n      setIsListening(false);\n    } else {\n      startListening();\n    }\n  };\n\n  // Manejar clic en botones de opciones \n  const handleOptionClick = value => {\n    if (isListening) return;\n    processResponse(value);\n  };\n\n  // Solicitar permisos de micrófono\n  const requestMicrophonePermission = async () => {\n    try {\n      const permission = await checkMicrophonePermission();\n      setMicrophonePermission(permission);\n      if (permission) {\n        // Iniciar la encuesta si se conceden los permisos\n        setCurrentStep('welcome');\n      } else {\n        setErrorMessage('No se pudo obtener permiso para el micrófono. Por favor, permita el acceso en la configuración de su navegador.');\n      }\n    } catch (error) {\n      console.error('Error al solicitar permisos de micrófono:', error);\n      setErrorMessage('Error al solicitar permisos de micrófono.');\n    }\n  };\n\n  // Función para hablar utilizando el componente SimpleVoice\n  const speakText = text => {\n    console.log('Solicitando síntesis de voz para:', text);\n    return new Promise((resolve, reject) => {\n      if (!text) {\n        console.warn('Se intentó sintetizar texto vacío');\n        resolve();\n        return;\n      }\n      try {\n        // Establecer callback para cuando termine de hablar\n        const onEnd = () => {\n          console.log('Síntesis de voz completada para:', text);\n          setVoiceText('');\n          resolve();\n        };\n\n        // Actualizar estado para activar SimpleVoice\n        setSpeakEndCallback(onEnd);\n        setVoiceText(text);\n      } catch (error) {\n        console.error('Error al iniciar síntesis de voz:', error);\n        reject(error);\n      }\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center my-12\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"animate-spin h-8 w-8 text-primary-500\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          className: \"opacity-25\",\n          cx: \"12\",\n          cy: \"12\",\n          r: \"10\",\n          stroke: \"currentColor\",\n          strokeWidth: \"4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          className: \"opacity-75\",\n          fill: \"currentColor\",\n          d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this);\n  }\n  if (!survey) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"h-16 w-16 mx-auto text-gray-400 mb-4\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-800 mb-2\",\n        children: \"Encuesta no encontrada\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-6\",\n        children: \"La encuesta que est\\xE1s buscando no existe o ha sido eliminada.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        className: \"btn btn-primary\",\n        children: \"Volver al Inicio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 7\n    }, this);\n  }\n  if (!browserSupported) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"h-16 w-16 mx-auto text-orange-400 mb-4\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-800 mb-2\",\n        children: \"Navegador no compatible\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-6\",\n        children: \"Esta aplicaci\\xF3n requiere un navegador compatible con la API de Reconocimiento de Voz. Por favor, utilice Chrome, Edge o Safari para continuar.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        className: \"btn btn-primary\",\n        children: \"Intentar Nuevamente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 7\n    }, this);\n  }\n  if (microphonePermission === false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"h-16 w-16 mx-auto text-orange-400 mb-4\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4a1 1 0 01-1-1h-2a1 1 0 01-1-1v-2a1 1 0 01 1-1h2a1 1 0 01 1 1v2a1 1 0 01 1 1h2a1 1 0 01 1 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-800 mb-2\",\n        children: \"Permiso de Micr\\xF3fono Requerido\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-6\",\n        children: \"Para participar en esta encuesta por voz, necesitamos permiso para usar su micr\\xF3fono. Por favor, haga clic en el bot\\xF3n debajo para conceder acceso.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: requestMicrophonePermission,\n        className: \"btn btn-primary\",\n        children: \"Permitir Micr\\xF3fono\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow-md rounded-lg p-6 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: loading ? 'Cargando encuesta...' : survey ? survey.title : 'Encuesta no encontrada'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 13\n        }, this), !microphonePermission && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: requestMicrophonePermission,\n          className: \"mt-2 btn btn-primary\",\n          children: \"Permitir acceso al micr\\xF3fono\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center items-center h-40\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }, this) : !browserSupported ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Su navegador no soporta las tecnolog\\xEDas de voz necesarias para esta encuesta.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-2\",\n            children: \"Por favor, use un navegador compatible como Chrome, Edge o Safari.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fixed bottom-4 right-4 bg-primary-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5 mr-2\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              stroke: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 2,\n                d: \"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 715,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 19\n            }, this), \"Escuchando...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 17\n          }, this), isSpeaking && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fixed bottom-4 left-4 bg-blue-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5 mr-2\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              stroke: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 2,\n                d: \"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 017.072 0m-9.9-2.828a9 9 0 0112.728 0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 725,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 19\n            }, this), \"Hablando...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 17\n          }, this), transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-100 p-4 rounded-lg mb-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-500 mb-1\",\n              children: \"Su respuesta:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-lg\",\n              children: transcript\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 17\n          }, this), currentStep === 'questions' && currentQuestionIndex < (survey === null || survey === void 0 ? void 0 : (_survey$questions2 = survey.questions) === null || _survey$questions2 === void 0 ? void 0 : _survey$questions2.length) && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"text-lg font-semibold mb-2\",\n                children: [\"Pregunta \", currentQuestionIndex + 1, \" de \", survey.questions.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 743,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-lg\",\n                children: survey.questions[currentQuestionIndex].text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 746,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 17\n          }, this), currentStep === 'questions' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-full bg-gray-200 rounded-full h-2.5\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-primary-500 h-2.5 rounded-full\",\n                style: {\n                  width: `${currentQuestionIndex / survey.questions.length * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 755,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-xs text-gray-500 mt-2\",\n              children: [currentQuestionIndex, \" de \", survey.questions.length, \" preguntas completadas\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 17\n          }, this), currentStep === 'thanks' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-6 space-y-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-green-600\",\n              children: \"Sus respuestas han sido guardadas correctamente.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 769,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: survey.farewell || 'Gracias por completar esta encuesta.'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 19\n            }, this), showThankYouMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-6 flex space-x-4 justify-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => navigate('/surveys/public'),\n                className: \"btn btn-primary\",\n                children: \"Ver Otras Encuestas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => navigate('/'),\n                className: \"btn btn-outline\",\n                children: \"Volver al Inicio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8 bg-sky-50 p-4 rounded-lg shadow-sm border border-sky-100\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Consejos para una buena experiencia:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc pl-5 space-y-1 text-gray-700\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Utilice un micr\\xF3fono en un entorno sin ruido\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Espere a que la aplicaci\\xF3n termine de hablar antes de responder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Hable con claridad para que el sistema pueda entenderle correctamente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 796,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SimpleVoice, {\n      text: voiceText,\n      onEnd: speakEndCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 804,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 678,\n    columnNumber: 5\n  }, this);\n};\n_s(TakeSurvey, \"NkulOnd1zRJ/c4Nn/2G4Lvb8Y7c=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = TakeSurvey;\nexport default TakeSurvey;\nvar _c;\n$RefreshReg$(_c, \"TakeSurvey\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","isSpeechRecognitionSupported","isSpeechSynthesisSupported","listenForSpeech","speakText","processVoiceResponse","checkMicrophonePermission","SurveyService","ResponseService","FaSpinner","FaMicrophone","FaVolumeUp","SimpleVoice","jsxDEV","_jsxDEV","TakeSurvey","_s","_survey$questions2","surveyId","navigate","survey","setSurvey","loading","setLoading","currentStep","setCurrentStep","currentQuestionIndex","setCurrentQuestionIndex","userName","setUserName","responses","setResponses","isSpeaking","setIsSpeaking","isListening","setIsListening","transcript","setTranscript","errorMessage","setErrorMessage","browserSupported","setBrowserSupported","microphonePermission","setMicrophonePermission","showThankYouMessage","setShowThankYouMessage","voiceText","setVoiceText","speakEndCallback","setSpeakEndCallback","CONVERSATION_PHRASES","acknowledgments","clarifications","transitions","checkCompatibility","speechRecognitionSupported","speechSynthesisSupported","hasMicrophonePermission","fetchSurvey","console","log","data","getPublicSurvey","questions","map","value","timestamp","error","response","status","_error$response$data","message","request","setTimeout","startConversation","welcomeMessage","title","description","startListening","moveToQuestions","Promise","resolve","speakCurrentQuestion","length","_survey$questions","questionsLength","question","questionText","text","type","onQuestionSpeakEnd","onThankYouSpeakEnd","submitResponses","formattedResponses","index","questionId","_id","answer","submitResponse","surveyTitle","respondentName","thankYouMessage","farewell","speechResult","processResponse","clarification","Math","floor","random","reject","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","continuous","interimResults","onresult","event","results","onerror","Error","onend","start","stop","e","trim","includes","startsWith","possibleName","extractName","currentQuestion","processedResponse","saveResponse","acknowledgment","transition","prevIndex","normalizedText","replace","namePhrases","cleanedText","phrase","toLowerCase","parts","split","commonWords","word","endsWith","slice","words","name","charAt","toUpperCase","nameWords","min","extractedName","join","updatedResponses","Date","toISOString","handleMicrophoneClick","handleOptionClick","requestMicrophonePermission","permission","warn","onEnd","className","children","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","d","strokeLinecap","strokeLinejoin","onClick","location","reload","style","width","_c","$RefreshReg$"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/pages/TakeSurvey.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { \n  isSpeechRecognitionSupported,\n  isSpeechSynthesisSupported,\n  listenForSpeech,\n  speakText,\n  processVoiceResponse,\n  checkMicrophonePermission\n} from '../utils/voiceSurveyAPI';\nimport { SurveyService, ResponseService } from '../services/apiService';\nimport { FaSpinner, FaMicrophone, FaVolumeUp } from 'react-icons/fa';\nimport SimpleVoice from '../components/SimpleVoice';\n\nconst TakeSurvey = () => {\n  const { surveyId } = useParams();\n  const navigate = useNavigate();\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [currentStep, setCurrentStep] = useState('welcome'); // welcome, name, questions, thanks\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userName, setUserName] = useState('');\n  const [responses, setResponses] = useState([]);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [browserSupported, setBrowserSupported] = useState(true);\n  const [microphonePermission, setMicrophonePermission] = useState(null);\n  const [showThankYouMessage, setShowThankYouMessage] = useState(false);\n  const [voiceText, setVoiceText] = useState('');\n  const [speakEndCallback, setSpeakEndCallback] = useState(null);\n\n  // Frases para mejorar la naturalidad de la conversación\n  const CONVERSATION_PHRASES = {\n    acknowledgments: [\n      'Entendido.',\n      'Perfecto.',\n      'Muy bien.',\n      'Gracias por su respuesta.',\n      'He registrado su respuesta.'\n    ],\n    clarifications: [\n      'No he entendido bien. ¿Podría repetirlo?',\n      'Disculpe, ¿podría decirlo de nuevo?',\n      'No pude entender su respuesta. Intentemos de nuevo.'\n    ],\n    transitions: [\n      'Pasemos a la siguiente pregunta.',\n      'Continuemos con la siguiente pregunta.',\n      'Ahora, la siguiente pregunta.'\n    ]\n  };\n\n  // Comprobar compatibilidad del navegador y permisos\n  useEffect(() => {\n    const checkCompatibility = async () => {\n      // Verificar si el navegador soporta reconocimiento de voz\n      const speechRecognitionSupported = isSpeechRecognitionSupported();\n      const speechSynthesisSupported = isSpeechSynthesisSupported();\n\n      if (!speechRecognitionSupported || !speechSynthesisSupported) {\n        setBrowserSupported(false);\n        setErrorMessage('Su navegador no soporta las tecnologías de voz necesarias para esta encuesta. Por favor, use Chrome, Edge o Safari.');\n        return;\n      }\n\n      // Verificar permisos de micrófono\n      const hasMicrophonePermission = await checkMicrophonePermission();\n      setMicrophonePermission(hasMicrophonePermission);\n\n      if (!hasMicrophonePermission) {\n        setErrorMessage('Necesitamos permiso para usar su micrófono. Por favor, permita el acceso cuando se le solicite.');\n      }\n    };\n\n    checkCompatibility();\n  }, []);\n\n  // Obtener datos de la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        setLoading(true);\n        console.log(`Intentando cargar la encuesta con ID: ${surveyId}`);\n        \n        // Usar el servicio centralizado para obtener la encuesta pública\n        const data = await SurveyService.getPublicSurvey(surveyId);\n        \n        if (data) {\n          console.log('Encuesta cargada exitosamente:', data);\n          setSurvey(data);\n          // Inicializar array de respuestas\n          setResponses(data.questions.map(() => ({ value: '', timestamp: null })));\n        } else {\n          console.error('La respuesta no contiene datos');\n          setErrorMessage('La encuesta no contiene datos válidos.');\n        }\n        \n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching survey:', error);\n        \n        // Mensajes de error más específicos\n        if (error.response) {\n          // El servidor respondió con un código de error\n          if (error.response.status === 404) {\n            setErrorMessage('Encuesta no encontrada. El ID proporcionado no corresponde a ninguna encuesta existente.');\n          } else if (error.response.status === 403) {\n            setErrorMessage('Esta encuesta ya no está activa o no es pública.');\n          } else {\n            setErrorMessage(`Error del servidor: ${error.response.data?.message || 'Error desconocido'}`);\n          }\n        } else if (error.request) {\n          // La solicitud se hizo pero no se recibió respuesta\n          setErrorMessage('No se pudo conectar con el servidor. Verifica tu conexión a internet.');\n        } else {\n          // Error al configurar la solicitud\n          setErrorMessage('Error al crear la solicitud: ' + error.message);\n        }\n        \n        setLoading(false);\n      }\n    };\n    \n    if (surveyId) {\n      fetchSurvey();\n    }\n  }, [surveyId]);\n\n  // Efecto para iniciar la conversación cuando la encuesta se carga correctamente\n  useEffect(() => {\n    if (survey && browserSupported && microphonePermission && !loading) {\n      console.log('Iniciando conversación automática...');\n      // Pequeño retraso para asegurar que todo está listo\n      setTimeout(() => {\n        startConversation();\n      }, 1000);\n    }\n  }, [survey, browserSupported, microphonePermission, loading]);\n\n  // Iniciar la conversación automática\n  const startConversation = async () => {\n    console.log('Función startConversation ejecutada');\n    console.log('Estado actual:', { survey, currentStep, currentQuestionIndex });\n    \n    try {\n      // Primera interacción: mensaje de bienvenida y solicitar nombre directamente\n      const welcomeMessage = `Bienvenido a la encuesta de voz: ${survey.title}. ${survey.description || ''}. Para comenzar, ¿podría decirme su nombre por favor?`;\n      console.log('Enviando mensaje de bienvenida con solicitud de nombre:', welcomeMessage);\n      \n      // Cambiar al paso de nombre directamente\n      setCurrentStep('name');\n      \n      await speakText(welcomeMessage);\n      console.log('Mensaje de bienvenida completado');\n      \n      // Iniciar escucha con un breve retraso\n      setTimeout(() => {\n        console.log('Iniciando reconocimiento de voz para captar nombre...');\n        startListening();\n      }, 1000);\n    } catch (error) {\n      console.error('Error durante startConversation:', error);\n      // Reintentar en caso de error\n      setTimeout(() => startConversation(), 2000);\n    }\n  };\n\n  // Mover a la sección de preguntas\n  const moveToQuestions = async () => {\n    console.log('Moviendo a la sección de preguntas...');\n    setCurrentStep('questions');\n    setCurrentQuestionIndex(0);\n    // Pequeña pausa para asegurar que los estados se actualicen\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await speakCurrentQuestion();\n  };\n\n  // Hablar la pregunta actual\n  const speakCurrentQuestion = async () => {\n    console.log('Hablando pregunta actual:', currentQuestionIndex);\n    if (!survey || currentQuestionIndex >= survey.questions.length) {\n      console.error('No hay más preguntas o índice inválido:', {currentQuestionIndex, questionsLength: survey?.questions?.length});\n      return;\n    }\n    \n    const question = survey.questions[currentQuestionIndex];\n    console.log('Pregunta a formular:', question);\n    let questionText = question.text;\n    \n    // Añadir instrucciones específicas según tipo de pregunta\n    if (question.type === 'rating') {\n      questionText += ' Por favor, responda con un número del 1 al 5, donde 1 es lo más bajo y 5 lo más alto.';\n    } else if (question.type === 'yesno') {\n      questionText += ' Por favor, responda sí o no.';\n    }\n    \n    // Hablar la pregunta\n    setIsSpeaking(true);\n    try {\n      await speakText(questionText);\n      console.log('Pregunta terminada de hablar, iniciando escucha...');\n      setIsSpeaking(false);\n      // Pequeña pausa antes de empezar a escuchar\n      setTimeout(async () => {\n        console.log('Iniciando escucha desde setTimeout después de hablar pregunta');\n        await startListening();\n      }, 800);\n    } catch (error) {\n      console.error('Error al hablar la pregunta:', error);\n      setIsSpeaking(false);\n      // Reintentar en caso de error\n      setTimeout(() => speakCurrentQuestion(), 1500);\n    }\n  };\n\n  // Función para cuando termina de hablar la pregunta\n  const onQuestionSpeakEnd = () => {\n    setTimeout(startListening, 500);\n  };\n\n  // Función para cuando termina de hablar el mensaje de agradecimiento\n  const onThankYouSpeakEnd = async () => {\n    try {\n      // Enviar respuestas al servidor\n      await submitResponses();\n    } catch (error) {\n      console.error('Error submitting responses:', error);\n    }\n  };\n\n  // Función para enviar respuestas al servidor\n  const submitResponses = async () => {\n    try {\n      const formattedResponses = responses.map((response, index) => ({\n        questionId: survey.questions[index]._id,\n        questionText: survey.questions[index].text,\n        answer: response.value,\n        timestamp: response.timestamp\n      }));\n\n      // Usar el servicio centralizado para enviar respuestas\n      await ResponseService.submitResponse({\n        surveyId: survey._id,\n        surveyTitle: survey.title,\n        respondentName: userName || 'Anónimo',\n        responses: formattedResponses\n      });\n\n      console.log('Respuestas enviadas correctamente');\n      setCurrentStep('thanks');\n      \n      // Hablar mensaje de agradecimiento\n      const thankYouMessage = survey.farewell || 'Gracias por completar esta encuesta. Sus respuestas han sido registradas correctamente.';\n      await speakText(thankYouMessage);\n      setShowThankYouMessage(true);\n      \n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setErrorMessage('Error al enviar respuestas. Por favor, intente nuevamente.');\n    }\n  };\n\n  // Función para iniciar escucha automáticamente\n  const startListening = async () => {\n    console.log('Iniciando escucha...');\n    if (isListening) {\n      console.log('Ya estaba escuchando, se ignorará esta llamada');\n      return;\n    }\n    \n    setIsListening(true);\n    setTranscript('');\n    \n    try {\n      console.log('Activando el reconocimiento de voz...');\n      const speechResult = await listenForSpeech();\n      console.log('Respuesta recibida:', speechResult);\n      setIsListening(false);\n      \n      // Procesar la respuesta en un setTimeout para evitar problemas con el estado de React\n      setTimeout(async () => {\n        console.log('Procesando respuesta desde setTimeout');\n        await processResponse(speechResult);\n      }, 500);\n    } catch (error) {\n      console.error('Error en reconocimiento de voz:', error);\n      setIsListening(false);\n      \n      // Si hubo un error, intentar nuevamente después de dar feedback\n      const clarification = CONVERSATION_PHRASES.clarifications[Math.floor(Math.random() * CONVERSATION_PHRASES.clarifications.length)];\n      await speakText(clarification);\n      // Esperar un momento antes de volver a escuchar\n      setTimeout(() => startListening(), 1000);\n    }\n  };\n\n  // Función para escuchar la voz del usuario\n  const listenForSpeech = () => {\n    console.log('Configurando listenForSpeech...');\n    return new Promise((resolve, reject) => {\n      try {\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        const recognition = new SpeechRecognition();\n        \n        recognition.lang = 'es-ES';\n        recognition.continuous = false;\n        recognition.interimResults = false;\n        \n        console.log('Configuración de reconocimiento completada, iniciando...');\n        \n        recognition.onresult = (event) => {\n          const transcript = event.results[0][0].transcript;\n          console.log('onresult - Transcripción recibida:', transcript);\n          resolve(transcript);\n        };\n        \n        recognition.onerror = (event) => {\n          console.error('Error en reconocimiento:', event.error);\n          reject(new Error(`Error de reconocimiento de voz: ${event.error}`));\n        };\n        \n        recognition.onend = () => {\n          console.log('onend - Reconocimiento finalizado');\n          // Si no hubo resultado (onresult no se llamó) y no hubo error\n          // podemos resolver con string vacío o rechazar\n          // Comentado para evitar rechazos no deseados:\n          // reject(new Error('No se detectó voz'));\n        };\n        \n        // Comenzar a escuchar\n        recognition.start();\n        console.log('Reconocimiento iniciado correctamente');\n        \n        // Asegurar que no se quede escuchando indefinidamente\n        setTimeout(() => {\n          try {\n            recognition.stop();\n            console.log('Reconocimiento detenido por timeout');\n          } catch (e) {\n            console.log('Error al detener reconocimiento por timeout', e);\n          }\n        }, 10000); // 10 segundos máximo de escucha\n      } catch (error) {\n        console.error('Error al inicializar reconocimiento de voz:', error);\n        reject(error);\n      }\n    });\n  };\n\n  // Función para procesar la respuesta del usuario con NLP mejorado\n  const processResponse = async (text) => {\n    console.log('Procesando respuesta:', text);\n    if (!text || text.trim() === '') {\n      console.log('Respuesta vacía, volviendo a escuchar...');\n      setTimeout(() => startListening(), 1000);\n      return;\n    }\n    \n    setTranscript(text);\n    \n    try {\n      if (currentStep === 'name') {\n        console.log('Procesando nombre:', text);\n        \n        // Extraer el nombre usando técnicas básicas de NLP\n        // Si la respuesta es una pregunta, asumimos que no entendió nuestra pregunta\n        if (text.includes('?') || text.startsWith('¿')) {\n          // El usuario está preguntando algo en lugar de decir su nombre\n          await speakText('Disculpe, solo necesito saber su nombre para registrar sus respuestas. ¿Cómo se llama?');\n          setTimeout(() => startListening(), 1000);\n          return;\n        }\n        \n        // Intentar extraer el nombre\n        let possibleName = extractName(text);\n        console.log('Nombre extraído:', possibleName);\n        \n        // Si no pudimos extraer un nombre válido, usar un nombre genérico\n        if (possibleName === 'Anónimo') {\n          possibleName = 'Estimado participante';\n        }\n        \n        // Guardar el nombre y continuar\n        setUserName(possibleName);\n        \n        // Confirmar y seguir - respuesta más natural\n        await speakText(`Gracias, ${possibleName}. Vamos a comenzar con la primera pregunta.`);\n        \n        // Pasar a las preguntas con un retraso para asegurar la actualización de estado\n        setTimeout(async () => {\n          console.log('Pasando a las preguntas de la encuesta...');\n          await moveToQuestions();\n        }, 800);\n        \n        return;\n      }\n      \n      if (currentStep === 'questions') {\n        console.log('Procesando respuesta a pregunta:', currentQuestionIndex);\n        const currentQuestion = survey.questions[currentQuestionIndex];\n        \n        // Procesar la respuesta según el tipo de pregunta\n        const processedResponse = processVoiceResponse(text, currentQuestion.type);\n        console.log('Respuesta procesada:', processedResponse);\n        \n        if (processedResponse !== null) {\n          // Respuesta válida\n          saveResponse(processedResponse);\n          \n          // Dar feedback al usuario\n          const acknowledgment = CONVERSATION_PHRASES.acknowledgments[Math.floor(Math.random() * CONVERSATION_PHRASES.acknowledgments.length)];\n          await speakText(acknowledgment);\n          \n          // Transición a siguiente pregunta o finalizar\n          if (currentQuestionIndex < survey.questions.length - 1) {\n            const transition = CONVERSATION_PHRASES.transitions[Math.floor(Math.random() * CONVERSATION_PHRASES.transitions.length)];\n            await speakText(transition);\n            \n            // Incrementar el índice y pasar a la siguiente pregunta\n            setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n            \n            // Esperar a que se actualice el estado antes de continuar\n            console.log('Avanzando a la siguiente pregunta...');\n            \n            // Usar setTimeout para asegurar que el cambio de estado se complete\n            setTimeout(async () => {\n              console.log('Ejecutando speakCurrentQuestion desde setTimeout');\n              await speakCurrentQuestion();\n            }, 1000);\n          } else {\n            // Finalizar encuesta\n            console.log('Terminando encuesta, enviando respuestas...');\n            await submitResponses();\n          }\n        } else {\n          // Respuesta inválida, pedir aclaración\n          console.log('Respuesta inválida, pidiendo aclaración...');\n          const clarification = CONVERSATION_PHRASES.clarifications[Math.floor(Math.random() * CONVERSATION_PHRASES.clarifications.length)];\n          await speakText(clarification);\n          \n          // Usar setTimeout para evitar problemas con promesas anidadas\n          setTimeout(async () => {\n            console.log('Reiniciando escucha después de aclaración');\n            await startListening();\n          }, 800);\n        }\n      }\n    } catch (error) {\n      console.error('Error durante el procesamiento de la respuesta:', error);\n      // Intentar recuperarse del error\n      setTimeout(async () => {\n        if (currentStep === 'name') {\n          await speakText('Lo siento, hubo un problema. Intentemos de nuevo. ¿Podría decirme su nombre?');\n          setTimeout(() => startListening(), 1000);\n        } else if (currentStep === 'questions') {\n          await speakCurrentQuestion();\n        }\n      }, 1500);\n    }\n  };\n\n  // Función para extraer un nombre de texto\n  const extractName = (text) => {\n    console.log('Extrayendo nombre de:', text);\n    \n    // Si el texto está vacío o no es una cadena\n    if (!text || typeof text !== 'string') {\n      console.log('Texto vacío o no es cadena, usando nombre genérico');\n      return 'Estimado participante';\n    }\n    \n    // Eliminar signos de puntuación y normalizar texto\n    const normalizedText = text.replace(/[.,;:¡!¿?]/g, '').trim();\n    \n    // Frases comunes al indicar un nombre\n    const namePhrases = [\n      'me llamo', 'mi nombre es', 'soy', 'yo soy', \n      'puedes llamarme', 'puede llamarme', 'llámame', 'llamame'\n    ];\n    \n    // Buscar frases de presentación\n    let cleanedText = normalizedText;\n    for (const phrase of namePhrases) {\n      if (normalizedText.toLowerCase().includes(phrase)) {\n        // Extraer texto después de la frase de presentación\n        const parts = normalizedText.toLowerCase().split(phrase);\n        if (parts.length > 1 && parts[1].trim()) {\n          cleanedText = parts[1].trim();\n          console.log(`Frase de presentación '${phrase}' encontrada, texto limpio: '${cleanedText}'`);\n          break;\n        }\n      }\n    }\n    \n    // Palabras comunes para ignorar al final\n    const commonWords = ['gracias', 'por favor', 'aquí', 'señor', 'señora', 'mucho gusto'];\n    for (const word of commonWords) {\n      if (cleanedText.toLowerCase().endsWith(word)) {\n        cleanedText = cleanedText.slice(0, -(word.length)).trim();\n      }\n    }\n    \n    // Si el texto limpio está vacío, usar el original\n    if (!cleanedText) {\n      cleanedText = normalizedText;\n    }\n    \n    // Obtener las palabras del texto\n    const words = cleanedText.split(/\\s+/);\n    \n    // Si solo hay una palabra, asumimos que es el nombre\n    if (words.length === 1) {\n      const name = words[0];\n      console.log('Nombre extraído (una palabra):', name);\n      // Capitalizar primera letra\n      return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n    }\n    \n    // Si hay más palabras, tomar hasta 3 palabras como nombre completo\n    const nameWords = words.slice(0, Math.min(3, words.length));\n    let extractedName = nameWords.join(' ');\n    \n    // Capitalizar cada palabra\n    extractedName = extractedName.split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n    \n    console.log('Nombre extraído (múltiples palabras):', extractedName);\n    return extractedName;\n  };\n\n  // Función para guardar respuesta y pasar a la siguiente pregunta\n  const saveResponse = (value) => {\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = {\n      value,\n      timestamp: new Date().toISOString()\n    };\n    setResponses(updatedResponses);\n\n    // Verificar si hay más preguntas\n    if (currentQuestionIndex < survey.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Fin de la encuesta\n      setCurrentStep('thanks');\n    }\n  };\n\n  // Manejar clic en botón de micrófono\n  const handleMicrophoneClick = () => {\n    if (isListening) {\n      setIsListening(false);\n    } else {\n      startListening();\n    }\n  };\n\n  // Manejar clic en botones de opciones \n  const handleOptionClick = (value) => {\n    if (isListening) return;\n\n    processResponse(value);\n  };\n\n  // Solicitar permisos de micrófono\n  const requestMicrophonePermission = async () => {\n    try {\n      const permission = await checkMicrophonePermission();\n      setMicrophonePermission(permission);\n\n      if (permission) {\n        // Iniciar la encuesta si se conceden los permisos\n        setCurrentStep('welcome');\n      } else {\n        setErrorMessage('No se pudo obtener permiso para el micrófono. Por favor, permita el acceso en la configuración de su navegador.');\n      }\n    } catch (error) {\n      console.error('Error al solicitar permisos de micrófono:', error);\n      setErrorMessage('Error al solicitar permisos de micrófono.');\n    }\n  };\n\n  // Función para hablar utilizando el componente SimpleVoice\n  const speakText = (text) => {\n    console.log('Solicitando síntesis de voz para:', text);\n    return new Promise((resolve, reject) => {\n      if (!text) {\n        console.warn('Se intentó sintetizar texto vacío');\n        resolve();\n        return;\n      }\n      \n      try {\n        // Establecer callback para cuando termine de hablar\n        const onEnd = () => {\n          console.log('Síntesis de voz completada para:', text);\n          setVoiceText('');\n          resolve();\n        };\n        \n        // Actualizar estado para activar SimpleVoice\n        setSpeakEndCallback(onEnd);\n        setVoiceText(text);\n      } catch (error) {\n        console.error('Error al iniciar síntesis de voz:', error);\n        reject(error);\n      }\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center my-12\">\n        <svg className=\"animate-spin h-8 w-8 text-primary-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n      </div>\n    );\n  }\n\n  if (!survey) {\n    return (\n      <div className=\"card text-center py-12\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n        </svg>\n        <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Encuesta no encontrada</h3>\n        <p className=\"text-gray-600 mb-6\">La encuesta que estás buscando no existe o ha sido eliminada.</p>\n        <button onClick={() => navigate('/')} className=\"btn btn-primary\">\n          Volver al Inicio\n        </button>\n      </div>\n    );\n  }\n\n  if (!browserSupported) {\n    return (\n      <div className=\"card text-center py-12\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-orange-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n        </svg>\n        <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Navegador no compatible</h3>\n        <p className=\"text-gray-600 mb-6\">\n          Esta aplicación requiere un navegador compatible con la API de Reconocimiento de Voz.\n          Por favor, utilice Chrome, Edge o Safari para continuar.\n        </p>\n        <button onClick={() => window.location.reload()} className=\"btn btn-primary\">\n          Intentar Nuevamente\n        </button>\n      </div>\n    );\n  }\n\n  if (microphonePermission === false) {\n    return (\n      <div className=\"card text-center py-12\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-orange-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4a1 1 0 01-1-1h-2a1 1 0 01-1-1v-2a1 1 0 01 1-1h2a1 1 0 01 1 1v2a1 1 0 01 1 1h2a1 1 0 01 1 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2z\" />\n        </svg>\n        <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Permiso de Micrófono Requerido</h3>\n        <p className=\"text-gray-600 mb-6\">\n          Para participar en esta encuesta por voz, necesitamos permiso para usar su micrófono.\n          Por favor, haga clic en el botón debajo para conceder acceso.\n        </p>\n        <button onClick={requestMicrophonePermission} className=\"btn btn-primary\">\n          Permitir Micrófono\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-4\">\n      <div className=\"bg-white shadow-md rounded-lg p-6 mb-6\">\n        {/* Encabezado */}\n        <h1 className=\"text-2xl font-bold mb-4\">{loading ? 'Cargando encuesta...' : (survey ? survey.title : 'Encuesta no encontrada')}</h1>\n        \n        {/* Mensajes de error */}\n        {errorMessage && (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n            <p>{errorMessage}</p>\n            {!microphonePermission && (\n              <button\n                onClick={requestMicrophonePermission}\n                className=\"mt-2 btn btn-primary\"\n              >\n                Permitir acceso al micrófono\n              </button>\n            )}\n          </div>\n        )}\n\n        {/* Contenido principal */}\n        <div className=\"mb-6\">\n          {loading ? (\n            <div className=\"flex justify-center items-center h-40\">\n              <div className=\"spinner\"></div>\n            </div>\n          ) : !browserSupported ? (\n            <div className=\"bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded\">\n              <p>Su navegador no soporta las tecnologías de voz necesarias para esta encuesta.</p>\n              <p className=\"mt-2\">Por favor, use un navegador compatible como Chrome, Edge o Safari.</p>\n            </div>\n          ) : (\n            <div>\n              {/* Indicador de escucha activa */}\n              {isListening && (\n                <div className=\"fixed bottom-4 right-4 bg-primary-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\" />\n                  </svg>\n                  Escuchando...\n                </div>\n              )}\n              \n              {/* Indicador de habla activa */}\n              {isSpeaking && (\n                <div className=\"fixed bottom-4 left-4 bg-blue-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 017.072 0m-9.9-2.828a9 9 0 0112.728 0\" />\n                  </svg>\n                  Hablando...\n                </div>\n              )}\n              \n              {/* Transcripción de voz */}\n              {transcript && (\n                <div className=\"bg-gray-100 p-4 rounded-lg mb-6\">\n                  <div className=\"text-sm text-gray-500 mb-1\">Su respuesta:</div>\n                  <div className=\"text-lg\">{transcript}</div>\n                </div>\n              )}\n              \n              {/* Contenido según el paso actual */}\n              {currentStep === 'questions' && currentQuestionIndex < survey?.questions?.length && (\n                <div>\n                  <div className=\"mb-4\">\n                    <h3 className=\"text-lg font-semibold mb-2\">\n                      Pregunta {currentQuestionIndex + 1} de {survey.questions.length}\n                    </h3>\n                    <p className=\"text-lg\">{survey.questions[currentQuestionIndex].text}</p>\n                  </div>\n                </div>\n              )}\n              \n              {/* Progreso de la encuesta */}\n              {currentStep === 'questions' && (\n                <div className=\"mt-8\">\n                  <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                    <div\n                      className=\"bg-primary-500 h-2.5 rounded-full\"\n                      style={{ width: `${((currentQuestionIndex) / survey.questions.length) * 100}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-2\">\n                    {currentQuestionIndex} de {survey.questions.length} preguntas completadas\n                  </div>\n                </div>\n              )}\n              \n              {/* Mensaje final */}\n              {currentStep === 'thanks' && (\n                <div className=\"mt-6 space-y-4\">\n                  <p className=\"text-green-600\">Sus respuestas han sido guardadas correctamente.</p>\n                  <p>{survey.farewell || 'Gracias por completar esta encuesta.'}</p>\n                  \n                  {showThankYouMessage && (\n                    <div className=\"mt-6 flex space-x-4 justify-center\">\n                      <button\n                        onClick={() => navigate('/surveys/public')}\n                        className=\"btn btn-primary\"\n                      >\n                        Ver Otras Encuestas\n                      </button>\n                      <button\n                        onClick={() => navigate('/')}\n                        className=\"btn btn-outline\"\n                      >\n                        Volver al Inicio\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Instrucciones actualizadas */}\n      <div className=\"mt-8 bg-sky-50 p-4 rounded-lg shadow-sm border border-sky-100\">\n        <h3 className=\"text-lg font-semibold mb-2\">Consejos para una buena experiencia:</h3>\n        <ul className=\"list-disc pl-5 space-y-1 text-gray-700\">\n          <li>Utilice un micrófono en un entorno sin ruido</li>\n          <li>Espere a que la aplicación termine de hablar antes de responder</li>\n          <li>Hable con claridad para que el sistema pueda entenderle correctamente</li>\n        </ul>\n      </div>\n      <SimpleVoice text={voiceText} onEnd={speakEndCallback} />\n    </div>\n  );\n};\n\nexport default TakeSurvey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}