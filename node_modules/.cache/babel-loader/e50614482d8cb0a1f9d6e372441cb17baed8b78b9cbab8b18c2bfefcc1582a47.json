{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\Sistema de Encuestas por Voz\\\\client\\\\src\\\\pages\\\\TakeSurvey.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { isSpeechRecognitionSupported, listenForSpeech as baseListen, speakText as baseSpeak, checkMicrophonePermission } from '../utils/voiceSurveyAPI';\nimport { SurveyService, ResponseService } from '../services/apiService';\nimport { FaSpinner } from 'react-icons/fa';\nimport SimpleVoice from '../components/SimpleVoice';\nimport NLPService from '../services/nlpService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TakeSurvey = () => {\n  _s();\n  var _survey$questions2;\n  const {\n    surveyId\n  } = useParams();\n  const navigate = useNavigate();\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [currentStep, setCurrentStep] = useState('initial'); // 'initial', 'name', 'questions', 'thanks'\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [userName, setUserName] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [browserSupported, setBrowserSupported] = useState(true);\n  const [microphonePermission, setMicrophonePermission] = useState(null);\n  const [showThankYouMessage, setShowThankYouMessage] = useState(false);\n  const [voiceText, setVoiceText] = useState('');\n  const [speakEndCallback, setSpeakEndCallback] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Conjunto de frases adaptativas clasificadas por tono para mejorar la naturalidad\n  const ADAPTIVE_PHRASES = {\n    acknowledgments: [{\n      text: 'Gracias por su respuesta.',\n      tone: 'neutral'\n    }, {\n      text: '¡Excelente! He registrado su respuesta.',\n      tone: 'positive'\n    }, {\n      text: 'Perfecto, continuemos.',\n      tone: 'positive'\n    }, {\n      text: 'Entendido, muchas gracias.',\n      tone: 'neutral'\n    }, {\n      text: 'He anotado su respuesta.',\n      tone: 'neutral'\n    }, {\n      text: '¡Genial! Avancemos.',\n      tone: 'positive'\n    }, {\n      text: 'Comprendo, continuamos.',\n      tone: 'supportive'\n    }, {\n      text: 'Gracias por compartir su opinión.',\n      tone: 'supportive'\n    }],\n    transitions: [{\n      text: 'Pasemos a la siguiente pregunta.',\n      tone: 'neutral'\n    }, {\n      text: 'Continuemos con la siguiente pregunta.',\n      tone: 'neutral'\n    }, {\n      text: 'Ahora, la siguiente pregunta.',\n      tone: 'neutral'\n    }, {\n      text: 'Avancemos a la siguiente pregunta.',\n      tone: 'positive'\n    }, {\n      text: 'Me gustaría preguntarle ahora sobre...',\n      tone: 'supportive'\n    }],\n    clarifications: [{\n      text: 'Disculpe, no he entendido su respuesta. ¿Podría repetirla?',\n      tone: 'neutral'\n    }, {\n      text: 'Parece que no pude entender correctamente. ¿Podría decirlo de otra manera?',\n      tone: 'supportive'\n    }, {\n      text: 'Necesito una respuesta más clara. ¿Podría intentarlo nuevamente?',\n      tone: 'neutral'\n    }, {\n      text: 'No capté bien su respuesta. ¿Podría hablar un poco más claro?',\n      tone: 'supportive'\n    }],\n    greetings: [{\n      text: 'Bienvenido a nuestra encuesta. Apreciamos mucho su participación.',\n      tone: 'positive'\n    }, {\n      text: 'Gracias por participar en esta encuesta. Sus opiniones son muy importantes.',\n      tone: 'neutral'\n    }, {\n      text: 'Le damos la bienvenida a esta encuesta. Valoramos su tiempo y sus respuestas.',\n      tone: 'supportive'\n    }],\n    farewells: [{\n      text: '¡Muchas gracias por completar la encuesta! Sus respuestas son muy valiosas para nosotros.',\n      tone: 'positive'\n    }, {\n      text: 'La encuesta ha finalizado. Agradecemos su participación y su tiempo.',\n      tone: 'neutral'\n    }, {\n      text: 'Hemos llegado al final de la encuesta. Realmente apreciamos sus opiniones.',\n      tone: 'supportive'\n    }]\n  };\n\n  // Comprobar compatibilidad del navegador y permisos\n  useEffect(() => {\n    const checkCompatibility = async () => {\n      // Verificar si el navegador soporta reconocimiento de voz\n      const speechRecognitionSupported = isSpeechRecognitionSupported();\n      const speechSynthesisSupported = true; // isSpeechSynthesisSupported();\n\n      if (!speechRecognitionSupported || !speechSynthesisSupported) {\n        setBrowserSupported(false);\n        setErrorMessage('Su navegador no soporta las tecnologías de voz necesarias para esta encuesta. Por favor, use Chrome, Edge o Safari.');\n        return;\n      }\n\n      // Verificar permisos de micrófono\n      const hasMicrophonePermission = await checkMicrophonePermission();\n      setMicrophonePermission(hasMicrophonePermission);\n      if (!hasMicrophonePermission) {\n        setErrorMessage('Necesitamos permiso para usar su micrófono. Por favor, permita el acceso cuando se le solicite.');\n      }\n    };\n    checkCompatibility();\n  }, []);\n\n  // Obtener datos de la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        setLoading(true);\n        console.log(`Intentando cargar la encuesta con ID: ${surveyId}`);\n\n        // Usar el servicio centralizado para obtener la encuesta pública\n        const data = await SurveyService.getPublicSurvey(surveyId);\n        if (data) {\n          console.log('Encuesta cargada exitosamente:', data);\n          setSurvey(data);\n          // Inicializar array de respuestas\n          setResponses(data.questions.map(() => ({\n            value: '',\n            timestamp: null\n          })));\n        } else {\n          console.error('La respuesta no contiene datos');\n          setErrorMessage('La encuesta no contiene datos válidos.');\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching survey:', error);\n\n        // Mensajes de error más específicos\n        if (error.response) {\n          // El servidor respondió con un código de error\n          if (error.response.status === 404) {\n            setErrorMessage('Encuesta no encontrada. El ID proporcionado no corresponde a ninguna encuesta existente.');\n          } else if (error.response.status === 403) {\n            setErrorMessage('Esta encuesta ya no está activa o no es pública.');\n          } else {\n            var _error$response$data;\n            setErrorMessage(`Error del servidor: ${((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error desconocido'}`);\n          }\n        } else if (error.request) {\n          // La solicitud se hizo pero no se recibió respuesta\n          setErrorMessage('No se pudo conectar con el servidor. Verifica tu conexión a internet.');\n        } else {\n          // Error al configurar la solicitud\n          setErrorMessage('Error al crear la solicitud: ' + error.message);\n        }\n        setLoading(false);\n      }\n    };\n    if (surveyId) {\n      fetchSurvey();\n    }\n  }, [surveyId]);\n\n  // Efecto para iniciar la conversación cuando la encuesta se carga correctamente\n  useEffect(() => {\n    if (survey && browserSupported && microphonePermission && !loading) {\n      console.log('Iniciando conversación automática...');\n      // Pequeño retraso para asegurar que todo está listo\n      setTimeout(() => {\n        startConversation();\n      }, 1000);\n    }\n  }, [survey, browserSupported, microphonePermission, loading]);\n\n  // Iniciar la conversación automática\n  const startConversation = async () => {\n    console.log('Función startConversation ejecutada');\n    console.log('Estado actual:', {\n      survey,\n      currentStep,\n      currentQuestionIndex\n    });\n    try {\n      // Seleccionar un saludo adaptativo basado en el momento del día\n      const hour = new Date().getHours();\n      let timeBasedGreeting = '';\n      if (hour < 12) {\n        timeBasedGreeting = 'Buenos días. ';\n      } else if (hour < 19) {\n        timeBasedGreeting = 'Buenas tardes. ';\n      } else {\n        timeBasedGreeting = 'Buenas noches. ';\n      }\n\n      // Seleccionar un saludo aleatorio de los saludos positivos\n      const positiveGreetings = ADAPTIVE_PHRASES.greetings.filter(g => g.tone === 'positive');\n      const greeting = positiveGreetings[Math.floor(Math.random() * positiveGreetings.length)].text;\n\n      // Componer el mensaje de bienvenida personalizado\n      const welcomeMessage = `${timeBasedGreeting}${greeting} Esta encuesta es sobre: ${survey.title}. ${survey.description || ''} Para comenzar, ¿podría decirme su nombre por favor?`;\n      console.log('Enviando mensaje de bienvenida con solicitud de nombre:', welcomeMessage);\n\n      // Cambiar al paso de nombre directamente\n      setCurrentStep('name');\n      await speakText(welcomeMessage);\n      console.log('Mensaje de bienvenida completado');\n\n      // Iniciar escucha con un breve retraso\n      setTimeout(() => {\n        console.log('Iniciando reconocimiento de voz para captar nombre...');\n        startListening();\n      }, 1000);\n    } catch (error) {\n      console.error('Error durante startConversation:', error);\n      // Reintentar en caso de error\n      setTimeout(() => startConversation(), 2000);\n    }\n  };\n\n  // Mover a la sección de preguntas\n  const moveToQuestions = async () => {\n    console.log('Moviendo a la sección de preguntas...');\n    setCurrentStep('questions');\n    setCurrentQuestionIndex(0);\n    // Pequeña pausa para asegurar que los estados se actualicen\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await speakCurrentQuestion();\n  };\n\n  // Hablar la pregunta actual\n  const speakCurrentQuestion = async () => {\n    console.log('Hablando pregunta actual:', currentQuestionIndex);\n    if (!survey || currentQuestionIndex >= survey.questions.length) {\n      var _survey$questions;\n      console.error('No hay más preguntas o índice inválido:', {\n        currentQuestionIndex,\n        questionsLength: survey === null || survey === void 0 ? void 0 : (_survey$questions = survey.questions) === null || _survey$questions === void 0 ? void 0 : _survey$questions.length\n      });\n      return;\n    }\n    const question = survey.questions[currentQuestionIndex];\n    console.log('Pregunta a formular:', question);\n    let questionText = question.text;\n\n    // Añadir instrucciones específicas según tipo de pregunta\n    if (question.type === 'rating') {\n      questionText += ' Por favor, responda con un número del 1 al 5, donde 1 es lo más bajo y 5 lo más alto.';\n    } else if (question.type === 'yesno') {\n      questionText += ' Por favor, responda sí o no.';\n    }\n\n    // Hablar la pregunta\n    setIsSpeaking(true);\n    try {\n      await speakText(questionText);\n      console.log('Pregunta terminada de hablar, iniciando escucha...');\n      setIsSpeaking(false);\n      // Pequeña pausa antes de empezar a escuchar\n      setTimeout(async () => {\n        console.log('Iniciando escucha desde setTimeout después de hablar pregunta');\n        await startListening();\n      }, 800);\n    } catch (error) {\n      console.error('Error al hablar la pregunta:', error);\n      setIsSpeaking(false);\n      // Reintentar en caso de error\n      setTimeout(() => speakCurrentQuestion(), 1500);\n    }\n  };\n\n  // Función para cuando termina de hablar la pregunta\n  const onQuestionSpeakEnd = () => {\n    setTimeout(startListening, 500);\n  };\n\n  // Función para cuando termina de hablar el mensaje de agradecimiento\n  const onThankYouSpeakEnd = async () => {\n    try {\n      // Enviar respuestas al servidor\n      await submitResponses();\n    } catch (error) {\n      console.error('Error submitting responses:', error);\n    }\n  };\n\n  // Función para enviar respuestas al servidor\n  const submitResponses = async () => {\n    try {\n      console.log('Enviando respuestas al servidor:', responses);\n\n      // Calcular la duración total de la encuesta\n      const endTime = new Date();\n      const durationMs = startTime ? endTime - startTime : 0;\n      const durationMinutes = Math.round(durationMs / 60000 * 10) / 10; // Duración en minutos con 1 decimal\n\n      // Calcular el sentimiento general de las respuestas\n      const sentimentScores = responses.map(r => {\n        // Solo analizar respuestas abiertas, no calificaciones numéricas o sí/no\n        if (typeof r.value === 'string' && r.value.length > 3) {\n          const sentiment = NLPService.analyzeSentiment(r.value);\n          return sentiment.score;\n        }\n        return null;\n      }).filter(score => score !== null);\n\n      // Calcular el sentimiento promedio si hay suficientes datos\n      let averageSentiment = 0;\n      let sentimentLabel = 'neutral';\n      if (sentimentScores.length > 0) {\n        averageSentiment = sentimentScores.reduce((sum, score) => sum + score, 0) / sentimentScores.length;\n        if (averageSentiment > 0.2) {\n          sentimentLabel = 'positive';\n        } else if (averageSentiment < -0.2) {\n          sentimentLabel = 'negative';\n        }\n      }\n\n      // Incluir metadatos de IA con las respuestas\n      const formattedResponses = {\n        responses: responses.map(r => ({\n          questionId: survey.questions[r.index]._id,\n          questionText: survey.questions[r.index].text,\n          response: r.value,\n          responseTime: r.timestamp\n        })),\n        metadata: {\n          completionTime: durationMinutes,\n          overallSentiment: sentimentLabel,\n          sentimentScore: averageSentiment,\n          interactionQuality: calculateInteractionQuality()\n        }\n      };\n\n      // Enviar respuestas con metadatos de IA\n      await ResponseService.submitResponse({\n        surveyId: survey._id,\n        surveyTitle: survey.title,\n        respondentName: userName || 'Anónimo',\n        responses: formattedResponses\n      });\n\n      // Seleccionar mensaje de despedida basado en el sentimiento general\n      let farewellPool;\n      if (sentimentLabel === 'positive') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'positive');\n      } else if (sentimentLabel === 'negative') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'supportive');\n      } else {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'neutral');\n      }\n\n      // Si no hay mensajes del tipo adecuado, usar cualquiera\n      if (farewellPool.length === 0) {\n        farewellPool = ADAPTIVE_PHRASES.farewells;\n      }\n      const thankYouMessage = farewellPool[Math.floor(Math.random() * farewellPool.length)].text;\n\n      // Cambiar a pantalla de agradecimiento\n      setCurrentStep('thanks');\n\n      // Hablar mensaje de agradecimiento personalizado\n      await speakText(thankYouMessage);\n      setShowThankYouMessage(true);\n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setError('Hubo un problema al enviar sus respuestas. Por favor, inténtelo de nuevo más tarde.');\n    }\n  };\n\n  // Calcular una puntuación de calidad de interacción basada en métricas de la encuesta\n  const calculateInteractionQuality = () => {\n    // Si no hay respuestas, calidad desconocida\n    if (!responses || responses.length === 0) return 'unknown';\n\n    // Verificar tiempos de respuesta\n    const avgResponseTime = responses.reduce((sum, r) => sum + (r.timestamp ? new Date(r.timestamp) - new Date(startTime) : 0), 0) / responses.length;\n\n    // Verificar cantidad de repeticiones/clarificaciones (basado en logs)\n    const clarificationCount = responses.filter(r => r.required_clarification).length;\n\n    // Calcular puntaje de 1-10\n    let score = 10;\n\n    // Penalizar tiempos de respuesta largos (más de 15 segundos por pregunta en promedio)\n    if (avgResponseTime > 15000) {\n      score -= Math.min(3, (avgResponseTime - 15000) / 5000);\n    }\n\n    // Penalizar por cada clarificación requerida\n    score -= clarificationCount * 1.5;\n\n    // Limitar el rango a 1-10\n    score = Math.max(1, Math.min(10, score));\n\n    // Clasificar la calidad\n    if (score >= 8) return 'excellent';\n    if (score >= 6) return 'good';\n    if (score >= 4) return 'fair';\n    return 'poor';\n  };\n\n  // Función para iniciar escucha automáticamente\n  const startListening = async () => {\n    console.log('Iniciando escucha...');\n    if (isListening) {\n      console.log('Ya estaba escuchando, se ignorará esta llamada');\n      return;\n    }\n    setIsListening(true);\n    setTranscript('');\n    try {\n      console.log('Activando el reconocimiento de voz...');\n      const speechResult = await listenForSpeech();\n      console.log('Respuesta recibida:', speechResult);\n      setIsListening(false);\n\n      // Procesar la respuesta en un setTimeout para evitar problemas con el estado de React\n      setTimeout(async () => {\n        console.log('Procesando respuesta desde setTimeout');\n        await processResponse(speechResult);\n      }, 500);\n    } catch (error) {\n      console.error('Error en reconocimiento de voz:', error);\n      setIsListening(false);\n\n      // Si hubo un error, intentar nuevamente después de dar feedback\n      const clarification = ADAPTIVE_PHRASES.clarifications[Math.floor(Math.random() * ADAPTIVE_PHRASES.clarifications.length)].text;\n      await speakText(clarification);\n      // Esperar un momento antes de volver a escuchar\n      setTimeout(() => startListening(), 1000);\n    }\n  };\n\n  // Función para escuchar la voz del usuario\n  const listenForSpeech = () => {\n    console.log('Configurando listenForSpeech...');\n    return new Promise((resolve, reject) => {\n      try {\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        const recognition = new SpeechRecognition();\n        recognition.lang = 'es-ES';\n        recognition.continuous = false;\n        recognition.interimResults = false;\n        console.log('Configuración de reconocimiento completada, iniciando...');\n        recognition.onresult = event => {\n          const transcript = event.results[0][0].transcript;\n          console.log('onresult - Transcripción recibida:', transcript);\n          resolve(transcript);\n        };\n        recognition.onerror = event => {\n          console.error('Error en reconocimiento:', event.error);\n          reject(new Error(`Error de reconocimiento de voz: ${event.error}`));\n        };\n        recognition.onend = () => {\n          console.log('onend - Reconocimiento finalizado');\n          // Si no hubo resultado (onresult no se llamó) y no hubo error\n          // podemos resolver con string vacío o rechazar\n          // Comentado para evitar rechazos no deseados:\n          // reject(new Error('No se detectó voz'));\n        };\n\n        // Comenzar a escuchar\n        recognition.start();\n        console.log('Reconocimiento iniciado correctamente');\n\n        // Asegurar que no se quede escuchando indefinidamente\n        setTimeout(() => {\n          try {\n            recognition.stop();\n            console.log('Reconocimiento detenido por timeout');\n          } catch (e) {\n            console.log('Error al detener reconocimiento por timeout', e);\n          }\n        }, 10000); // 10 segundos máximo de escucha\n      } catch (error) {\n        console.error('Error al inicializar reconocimiento de voz:', error);\n        reject(error);\n      }\n    });\n  };\n\n  // Función para procesar la respuesta del usuario con NLP mejorado\n  const processResponse = async text => {\n    console.log('Procesando respuesta:', text);\n    if (!text || text.trim() === '') {\n      console.log('Respuesta vacía, volviendo a escuchar...');\n      setTimeout(() => startListening(), 1000);\n      return;\n    }\n    setTranscript(text);\n    try {\n      // Analizar el sentimiento general de la respuesta del usuario\n      const sentimentAnalysis = NLPService.analyzeSentiment(text);\n      console.log('Análisis de sentimiento:', sentimentAnalysis);\n      if (currentStep === 'name') {\n        console.log('Procesando nombre:', text);\n\n        // Usar el servicio de NLP avanzado para extraer el nombre\n        const intent = NLPService.analyzeIntent(text);\n\n        // Si la respuesta es una pregunta, manejarla apropiadamente\n        if (intent.intent === 'question') {\n          const supportiveResponse = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'supportive').map(r => r.text);\n          const response = supportiveResponse[Math.floor(Math.random() * supportiveResponse.length)];\n          await speakText('Disculpe, solo necesito saber su nombre para registrar sus respuestas. ¿Cómo se llama?');\n          setTimeout(() => startListening(), 1000);\n          return;\n        }\n\n        // Extraer el nombre usando el servicio NLP\n        let possibleName = NLPService.extractName(text);\n        console.log('Nombre extraído usando NLP:', possibleName);\n\n        // Si no pudimos extraer un nombre válido, usar un nombre genérico\n        if (!possibleName) {\n          possibleName = 'Estimado participante';\n        }\n\n        // Guardar el nombre y continuar\n        setUserName(possibleName);\n\n        // Elegir respuesta basada en el sentimiento detectado\n        let responsePhrase;\n        if (sentimentAnalysis.sentiment === 'positive') {\n          responsePhrase = '¡Encantado de conocerle, ' + possibleName + '! Vamos a comenzar con la primera pregunta.';\n        } else if (sentimentAnalysis.sentiment === 'negative') {\n          responsePhrase = 'Gracias, ' + possibleName + '. Vamos a iniciar la encuesta con la primera pregunta.';\n        } else {\n          responsePhrase = 'Muy bien, ' + possibleName + '. Comencemos con la primera pregunta.';\n        }\n\n        // Confirmar y seguir\n        await speakText(responsePhrase);\n\n        // Pasar a las preguntas con un retraso para asegurar la actualización de estado\n        setTimeout(async () => {\n          console.log('Pasando a las preguntas de la encuesta...');\n          await moveToQuestions();\n        }, 800);\n        return;\n      }\n      if (currentStep === 'questions') {\n        console.log('Procesando respuesta a pregunta:', currentQuestionIndex);\n        const currentQuestion = survey.questions[currentQuestionIndex];\n\n        // Procesar la respuesta usando el servicio NLP avanzado\n        const processedResponse = await NLPService.processResponse(text, currentQuestion.type);\n        console.log('Respuesta procesada con NLP:', processedResponse);\n        if (processedResponse !== null) {\n          // Respuesta válida\n          saveResponse(processedResponse);\n\n          // Seleccionar una respuesta adaptativa basada en el sentimiento del usuario\n          let responsePool;\n          if (sentimentAnalysis.sentiment === 'positive') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'positive');\n          } else if (sentimentAnalysis.sentiment === 'negative') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'supportive');\n          } else {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'neutral');\n          }\n\n          // Si no hay respuestas del tipo adecuado, usar cualquiera\n          if (responsePool.length === 0) {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments;\n          }\n\n          // Seleccionar respuesta adaptativa\n          const acknowledgment = responsePool[Math.floor(Math.random() * responsePool.length)].text;\n          await speakText(acknowledgment);\n\n          // Transición a siguiente pregunta o finalizar\n          if (currentQuestionIndex < survey.questions.length - 1) {\n            // Seleccionar transición según sentimiento\n            let transitionPool;\n            if (sentimentAnalysis.sentiment === 'positive') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'positive');\n            } else if (sentimentAnalysis.sentiment === 'negative') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'supportive');\n            } else {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'neutral');\n            }\n            if (transitionPool.length === 0) {\n              transitionPool = ADAPTIVE_PHRASES.transitions;\n            }\n            const transition = transitionPool[Math.floor(Math.random() * transitionPool.length)].text;\n            await speakText(transition);\n\n            // Incrementar el índice y pasar a la siguiente pregunta\n            setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n\n            // Esperar a que se actualice el estado antes de continuar\n            console.log('Avanzando a la siguiente pregunta...');\n\n            // Usar setTimeout para asegurar que el cambio de estado se complete\n            setTimeout(async () => {\n              console.log('Ejecutando speakCurrentQuestion desde setTimeout');\n              await speakCurrentQuestion();\n            }, 1000);\n          } else {\n            // Finalizar encuesta con un mensaje adaptativo basado en el sentimiento general\n            console.log('Terminando encuesta, enviando respuestas...');\n            await submitResponses();\n          }\n        } else {\n          // Respuesta inválida, elegir clarificación basada en sentimiento\n          console.log('Respuesta inválida, pidiendo aclaración...');\n          let clarificationPool;\n          if (sentimentAnalysis.sentiment === 'negative') {\n            // Si el usuario parece frustrado, usar tono de apoyo\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'supportive');\n          } else {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'neutral');\n          }\n          if (clarificationPool.length === 0) {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications;\n          }\n          const clarification = clarificationPool[Math.floor(Math.random() * clarificationPool.length)].text;\n          await speakText(clarification);\n\n          // Usar setTimeout para evitar problemas con promesas anidadas\n          setTimeout(async () => {\n            console.log('Reiniciando escucha después de aclaración');\n            await startListening();\n          }, 800);\n        }\n      }\n    } catch (error) {\n      console.error('Error durante el procesamiento de la respuesta:', error);\n      // Intentar recuperarse del error\n      setTimeout(async () => {\n        if (currentStep === 'name') {\n          await speakText('Lo siento, hubo un problema. Intentemos de nuevo. ¿Podría decirme su nombre?');\n          setTimeout(() => startListening(), 1000);\n        } else if (currentStep === 'questions') {\n          await speakCurrentQuestion();\n        }\n      }, 1500);\n    }\n  };\n\n  // Función para extraer un nombre de texto\n  const extractName = text => {\n    console.log('Extrayendo nombre de:', text);\n\n    // Si el texto está vacío o no es una cadena\n    if (!text || typeof text !== 'string') {\n      console.log('Texto vacío o no es cadena, usando nombre genérico');\n      return 'Estimado participante';\n    }\n\n    // Eliminar signos de puntuación y normalizar texto\n    const normalizedText = text.replace(/[.,;:¡!¿?]/g, '').trim();\n\n    // Frases comunes al indicar un nombre\n    const namePhrases = ['me llamo', 'mi nombre es', 'soy', 'yo soy', 'puedes llamarme', 'puede llamarme', 'llámame', 'llamame'];\n\n    // Buscar frases de presentación\n    let cleanedText = normalizedText;\n    for (const phrase of namePhrases) {\n      if (normalizedText.toLowerCase().includes(phrase)) {\n        // Extraer texto después de la frase de presentación\n        const parts = normalizedText.toLowerCase().split(phrase);\n        if (parts.length > 1 && parts[1].trim()) {\n          cleanedText = parts[1].trim();\n          console.log(`Frase de presentación '${phrase}' encontrada, texto limpio: '${cleanedText}'`);\n          break;\n        }\n      }\n    }\n\n    // Palabras comunes para ignorar al final\n    const commonWords = ['gracias', 'por favor', 'aquí', 'señor', 'señora', 'mucho gusto'];\n    for (const word of commonWords) {\n      if (cleanedText.toLowerCase().endsWith(word)) {\n        cleanedText = cleanedText.slice(0, -word.length).trim();\n      }\n    }\n\n    // Si el texto limpio está vacío, usar el original\n    if (!cleanedText) {\n      cleanedText = normalizedText;\n    }\n\n    // Obtener las palabras del texto\n    const words = cleanedText.split(/\\s+/);\n\n    // Si solo hay una palabra, asumimos que es el nombre\n    if (words.length === 1) {\n      const name = words[0];\n      console.log('Nombre extraído (una palabra):', name);\n      // Capitalizar primera letra\n      return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n    }\n\n    // Si hay más palabras, tomar hasta 3 palabras como nombre completo\n    const nameWords = words.slice(0, Math.min(3, words.length));\n    let extractedName = nameWords.join(' ');\n\n    // Capitalizar cada palabra\n    extractedName = extractedName.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    console.log('Nombre extraído (múltiples palabras):', extractedName);\n    return extractedName;\n  };\n\n  // Función para guardar respuesta y pasar a la siguiente pregunta\n  const saveResponse = value => {\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = {\n      value,\n      timestamp: new Date().toISOString(),\n      index: currentQuestionIndex\n    };\n    setResponses(updatedResponses);\n\n    // Verificar si hay más preguntas\n    if (currentQuestionIndex < survey.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Fin de la encuesta\n      setCurrentStep('thanks');\n    }\n  };\n\n  // Manejar clic en botón de micrófono\n  const handleMicrophoneClick = () => {\n    if (isListening) {\n      setIsListening(false);\n    } else {\n      startListening();\n    }\n  };\n\n  // Manejar clic en botones de opciones \n  const handleOptionClick = value => {\n    if (isListening) return;\n    processResponse(value);\n  };\n\n  // Solicitar permisos de micrófono\n  const requestMicrophonePermission = async () => {\n    try {\n      const permission = await checkMicrophonePermission();\n      setMicrophonePermission(permission);\n      if (permission) {\n        // Iniciar la encuesta si se conceden los permisos\n        setCurrentStep('welcome');\n      } else {\n        setErrorMessage('No se pudo obtener permiso para el micrófono. Por favor, permita el acceso en la configuración de su navegador.');\n      }\n    } catch (error) {\n      console.error('Error al solicitar permisos de micrófono:', error);\n      setErrorMessage('Error al solicitar permisos de micrófono.');\n    }\n  };\n\n  // Función para hablar utilizando el componente SimpleVoice\n  const speakText = text => {\n    console.log('Solicitando síntesis de voz para:', text);\n    return new Promise((resolve, reject) => {\n      if (!text) {\n        console.warn('Se intentó sintetizar texto vacío');\n        resolve();\n        return;\n      }\n      try {\n        // Establecer callback para cuando termine de hablar\n        const onEnd = () => {\n          console.log('Síntesis de voz completada para:', text);\n          setVoiceText('');\n          resolve();\n        };\n\n        // Actualizar estado para activar SimpleVoice\n        setSpeakEndCallback(onEnd);\n        setVoiceText(text);\n      } catch (error) {\n        console.error('Error al iniciar síntesis de voz:', error);\n        reject(error);\n      }\n    });\n  };\n  useEffect(() => {\n    setStartTime(new Date());\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center my-12\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"animate-spin h-8 w-8 text-primary-500\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          className: \"opacity-25\",\n          cx: \"12\",\n          cy: \"12\",\n          r: \"10\",\n          stroke: \"currentColor\",\n          strokeWidth: \"4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          className: \"opacity-75\",\n          fill: \"currentColor\",\n          d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 7\n    }, this);\n  }\n  if (!survey) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"h-16 w-16 mx-auto text-gray-400 mb-4\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 815,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-800 mb-2\",\n        children: \"Encuesta no encontrada\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-6\",\n        children: \"La encuesta que est\\xE1s buscando no existe o ha sido eliminada.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        className: \"btn btn-primary\",\n        children: \"Volver al Inicio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 820,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 814,\n      columnNumber: 7\n    }, this);\n  }\n  if (!browserSupported) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"h-16 w-16 mx-auto text-orange-400 mb-4\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-800 mb-2\",\n        children: \"Navegador no compatible\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-6\",\n        children: \"Esta aplicaci\\xF3n requiere un navegador compatible con la API de Reconocimiento de Voz. Por favor, utilice Chrome, Edge o Safari para continuar.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        className: \"btn btn-primary\",\n        children: \"Intentar Nuevamente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 829,\n      columnNumber: 7\n    }, this);\n  }\n  if (microphonePermission === false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center py-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"h-16 w-16 mx-auto text-orange-400 mb-4\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4a1 1 0 01-1-1h-2a1 1 0 01-1-1v-2a1 1 0 01 1-1h2a1 1 0 01 1 1v2a1 1 0 01 1 1h2a1 1 0 01 1 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 848,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium text-gray-800 mb-2\",\n        children: \"Permiso de Micr\\xF3fono Requerido\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-6\",\n        children: \"Para participar en esta encuesta por voz, necesitamos permiso para usar su micr\\xF3fono. Por favor, haga clic en el bot\\xF3n debajo para conceder acceso.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: requestMicrophonePermission,\n        className: \"btn btn-primary\",\n        children: \"Permitir Micr\\xF3fono\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 847,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow-md rounded-lg p-6 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: loading ? 'Cargando encuesta...' : survey ? survey.title : 'Encuesta no encontrada'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 868,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 13\n        }, this), !microphonePermission && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: requestMicrophonePermission,\n          className: \"mt-2 btn btn-primary\",\n          children: \"Permitir acceso al micr\\xF3fono\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center items-center h-40\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 13\n        }, this) : !browserSupported ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Su navegador no soporta las tecnolog\\xEDas de voz necesarias para esta encuesta.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-2\",\n            children: \"Por favor, use un navegador compatible como Chrome, Edge o Safari.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 894,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 892,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fixed bottom-4 right-4 bg-primary-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5 mr-2\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              stroke: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 2,\n                d: \"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 902,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 19\n            }, this), \"Escuchando...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 17\n          }, this), isSpeaking && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fixed bottom-4 left-4 bg-blue-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              className: \"h-5 w-5 mr-2\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              stroke: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 2,\n                d: \"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 017.072 0m-9.9-2.828a9 9 0 0112.728 0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 912,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 911,\n              columnNumber: 19\n            }, this), \"Hablando...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 910,\n            columnNumber: 17\n          }, this), transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-100 p-4 rounded-lg mb-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-500 mb-1\",\n              children: \"Su respuesta:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 921,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-lg\",\n              children: transcript\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 922,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 920,\n            columnNumber: 17\n          }, this), currentStep === 'questions' && currentQuestionIndex < (survey === null || survey === void 0 ? void 0 : (_survey$questions2 = survey.questions) === null || _survey$questions2 === void 0 ? void 0 : _survey$questions2.length) && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"text-lg font-semibold mb-2\",\n                children: [\"Pregunta \", currentQuestionIndex + 1, \" de \", survey.questions.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 930,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-lg\",\n                children: survey.questions[currentQuestionIndex].text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 933,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 929,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 17\n          }, this), currentStep === 'questions' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-full bg-gray-200 rounded-full h-2.5\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-primary-500 h-2.5 rounded-full\",\n                style: {\n                  width: `${currentQuestionIndex / survey.questions.length * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 942,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 941,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-xs text-gray-500 mt-2\",\n              children: [currentQuestionIndex, \" de \", survey.questions.length, \" preguntas completadas\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 947,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 17\n          }, this), currentStep === 'thanks' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-6 space-y-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-green-600\",\n              children: \"Sus respuestas han sido guardadas correctamente.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 956,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: survey.farewell || 'Gracias por completar esta encuesta.'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 957,\n              columnNumber: 19\n            }, this), showThankYouMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-6 flex space-x-4 justify-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => navigate('/surveys/public'),\n                className: \"btn btn-primary\",\n                children: \"Ver Otras Encuestas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 961,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => navigate('/'),\n                className: \"btn btn-outline\",\n                children: \"Volver al Inicio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 967,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 960,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 955,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 866,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8 bg-sky-50 p-4 rounded-lg shadow-sm border border-sky-100\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Consejos para una buena experiencia:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc pl-5 space-y-1 text-gray-700\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Utilice un micr\\xF3fono en un entorno sin ruido\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 986,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Espere a que la aplicaci\\xF3n termine de hablar antes de responder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 987,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Hable con claridad para que el sistema pueda entenderle correctamente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 988,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 985,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 983,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SimpleVoice, {\n      text: voiceText,\n      onEnd: speakEndCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 991,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 865,\n    columnNumber: 5\n  }, this);\n};\n_s(TakeSurvey, \"WXKIa8Wo2MxmMCwjTHNakjYp64Q=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = TakeSurvey;\nexport default TakeSurvey;\nvar _c;\n$RefreshReg$(_c, \"TakeSurvey\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","isSpeechRecognitionSupported","listenForSpeech","baseListen","speakText","baseSpeak","checkMicrophonePermission","SurveyService","ResponseService","FaSpinner","SimpleVoice","NLPService","jsxDEV","_jsxDEV","TakeSurvey","_s","_survey$questions2","surveyId","navigate","survey","setSurvey","loading","setLoading","currentStep","setCurrentStep","currentQuestionIndex","setCurrentQuestionIndex","responses","setResponses","userName","setUserName","transcript","setTranscript","isSpeaking","setIsSpeaking","isListening","setIsListening","browserSupported","setBrowserSupported","microphonePermission","setMicrophonePermission","showThankYouMessage","setShowThankYouMessage","voiceText","setVoiceText","speakEndCallback","setSpeakEndCallback","startTime","setStartTime","errorMessage","setErrorMessage","ADAPTIVE_PHRASES","acknowledgments","text","tone","transitions","clarifications","greetings","farewells","checkCompatibility","speechRecognitionSupported","speechSynthesisSupported","hasMicrophonePermission","fetchSurvey","console","log","data","getPublicSurvey","questions","map","value","timestamp","error","response","status","_error$response$data","message","request","setTimeout","startConversation","hour","Date","getHours","timeBasedGreeting","positiveGreetings","filter","g","greeting","Math","floor","random","length","welcomeMessage","title","description","startListening","moveToQuestions","Promise","resolve","speakCurrentQuestion","_survey$questions","questionsLength","question","questionText","type","onQuestionSpeakEnd","onThankYouSpeakEnd","submitResponses","endTime","durationMs","durationMinutes","round","sentimentScores","r","sentiment","analyzeSentiment","score","averageSentiment","sentimentLabel","reduce","sum","formattedResponses","questionId","index","_id","responseTime","metadata","completionTime","overallSentiment","sentimentScore","interactionQuality","calculateInteractionQuality","submitResponse","surveyTitle","respondentName","farewellPool","f","thankYouMessage","setError","avgResponseTime","clarificationCount","required_clarification","min","max","speechResult","processResponse","clarification","reject","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","continuous","interimResults","onresult","event","results","onerror","Error","onend","start","stop","e","trim","sentimentAnalysis","intent","analyzeIntent","supportiveResponse","possibleName","extractName","responsePhrase","currentQuestion","processedResponse","saveResponse","responsePool","acknowledgment","transitionPool","transition","prevIndex","clarificationPool","normalizedText","replace","namePhrases","cleanedText","phrase","toLowerCase","includes","parts","split","commonWords","word","endsWith","slice","words","name","charAt","toUpperCase","nameWords","extractedName","join","updatedResponses","toISOString","handleMicrophoneClick","handleOptionClick","requestMicrophonePermission","permission","warn","onEnd","className","children","xmlns","fill","viewBox","cx","cy","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","d","strokeLinecap","strokeLinejoin","onClick","location","reload","style","width","farewell","_c","$RefreshReg$"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/pages/TakeSurvey.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { \n  isSpeechRecognitionSupported,\n  listenForSpeech as baseListen,\n  speakText as baseSpeak,\n  checkMicrophonePermission\n} from '../utils/voiceSurveyAPI';\nimport { SurveyService, ResponseService } from '../services/apiService';\nimport { FaSpinner } from 'react-icons/fa';\nimport SimpleVoice from '../components/SimpleVoice';\nimport NLPService from '../services/nlpService';\n\nconst TakeSurvey = () => {\n  const { surveyId } = useParams();\n  const navigate = useNavigate();\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [currentStep, setCurrentStep] = useState('initial'); // 'initial', 'name', 'questions', 'thanks'\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [userName, setUserName] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [browserSupported, setBrowserSupported] = useState(true);\n  const [microphonePermission, setMicrophonePermission] = useState(null);\n  const [showThankYouMessage, setShowThankYouMessage] = useState(false);\n  const [voiceText, setVoiceText] = useState('');\n  const [speakEndCallback, setSpeakEndCallback] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Conjunto de frases adaptativas clasificadas por tono para mejorar la naturalidad\n  const ADAPTIVE_PHRASES = {\n    acknowledgments: [\n      { text: 'Gracias por su respuesta.', tone: 'neutral' },\n      { text: '¡Excelente! He registrado su respuesta.', tone: 'positive' },\n      { text: 'Perfecto, continuemos.', tone: 'positive' },\n      { text: 'Entendido, muchas gracias.', tone: 'neutral' },\n      { text: 'He anotado su respuesta.', tone: 'neutral' },\n      { text: '¡Genial! Avancemos.', tone: 'positive' },\n      { text: 'Comprendo, continuamos.', tone: 'supportive' },\n      { text: 'Gracias por compartir su opinión.', tone: 'supportive' }\n    ],\n    transitions: [\n      { text: 'Pasemos a la siguiente pregunta.', tone: 'neutral' },\n      { text: 'Continuemos con la siguiente pregunta.', tone: 'neutral' },\n      { text: 'Ahora, la siguiente pregunta.', tone: 'neutral' },\n      { text: 'Avancemos a la siguiente pregunta.', tone: 'positive' },\n      { text: 'Me gustaría preguntarle ahora sobre...', tone: 'supportive' }\n    ],\n    clarifications: [\n      { text: 'Disculpe, no he entendido su respuesta. ¿Podría repetirla?', tone: 'neutral' },\n      { text: 'Parece que no pude entender correctamente. ¿Podría decirlo de otra manera?', tone: 'supportive' },\n      { text: 'Necesito una respuesta más clara. ¿Podría intentarlo nuevamente?', tone: 'neutral' },\n      { text: 'No capté bien su respuesta. ¿Podría hablar un poco más claro?', tone: 'supportive' }\n    ],\n    greetings: [\n      { text: 'Bienvenido a nuestra encuesta. Apreciamos mucho su participación.', tone: 'positive' },\n      { text: 'Gracias por participar en esta encuesta. Sus opiniones son muy importantes.', tone: 'neutral' },\n      { text: 'Le damos la bienvenida a esta encuesta. Valoramos su tiempo y sus respuestas.', tone: 'supportive' }\n    ],\n    farewells: [\n      { text: '¡Muchas gracias por completar la encuesta! Sus respuestas son muy valiosas para nosotros.', tone: 'positive' },\n      { text: 'La encuesta ha finalizado. Agradecemos su participación y su tiempo.', tone: 'neutral' },\n      { text: 'Hemos llegado al final de la encuesta. Realmente apreciamos sus opiniones.', tone: 'supportive' }\n    ]\n  };\n\n  // Comprobar compatibilidad del navegador y permisos\n  useEffect(() => {\n    const checkCompatibility = async () => {\n      // Verificar si el navegador soporta reconocimiento de voz\n      const speechRecognitionSupported = isSpeechRecognitionSupported();\n      const speechSynthesisSupported = true; // isSpeechSynthesisSupported();\n\n      if (!speechRecognitionSupported || !speechSynthesisSupported) {\n        setBrowserSupported(false);\n        setErrorMessage('Su navegador no soporta las tecnologías de voz necesarias para esta encuesta. Por favor, use Chrome, Edge o Safari.');\n        return;\n      }\n\n      // Verificar permisos de micrófono\n      const hasMicrophonePermission = await checkMicrophonePermission();\n      setMicrophonePermission(hasMicrophonePermission);\n\n      if (!hasMicrophonePermission) {\n        setErrorMessage('Necesitamos permiso para usar su micrófono. Por favor, permita el acceso cuando se le solicite.');\n      }\n    };\n\n    checkCompatibility();\n  }, []);\n\n  // Obtener datos de la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        setLoading(true);\n        console.log(`Intentando cargar la encuesta con ID: ${surveyId}`);\n        \n        // Usar el servicio centralizado para obtener la encuesta pública\n        const data = await SurveyService.getPublicSurvey(surveyId);\n        \n        if (data) {\n          console.log('Encuesta cargada exitosamente:', data);\n          setSurvey(data);\n          // Inicializar array de respuestas\n          setResponses(data.questions.map(() => ({ value: '', timestamp: null })));\n        } else {\n          console.error('La respuesta no contiene datos');\n          setErrorMessage('La encuesta no contiene datos válidos.');\n        }\n        \n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching survey:', error);\n        \n        // Mensajes de error más específicos\n        if (error.response) {\n          // El servidor respondió con un código de error\n          if (error.response.status === 404) {\n            setErrorMessage('Encuesta no encontrada. El ID proporcionado no corresponde a ninguna encuesta existente.');\n          } else if (error.response.status === 403) {\n            setErrorMessage('Esta encuesta ya no está activa o no es pública.');\n          } else {\n            setErrorMessage(`Error del servidor: ${error.response.data?.message || 'Error desconocido'}`);\n          }\n        } else if (error.request) {\n          // La solicitud se hizo pero no se recibió respuesta\n          setErrorMessage('No se pudo conectar con el servidor. Verifica tu conexión a internet.');\n        } else {\n          // Error al configurar la solicitud\n          setErrorMessage('Error al crear la solicitud: ' + error.message);\n        }\n        \n        setLoading(false);\n      }\n    };\n    \n    if (surveyId) {\n      fetchSurvey();\n    }\n  }, [surveyId]);\n\n  // Efecto para iniciar la conversación cuando la encuesta se carga correctamente\n  useEffect(() => {\n    if (survey && browserSupported && microphonePermission && !loading) {\n      console.log('Iniciando conversación automática...');\n      // Pequeño retraso para asegurar que todo está listo\n      setTimeout(() => {\n        startConversation();\n      }, 1000);\n    }\n  }, [survey, browserSupported, microphonePermission, loading]);\n\n  // Iniciar la conversación automática\n  const startConversation = async () => {\n    console.log('Función startConversation ejecutada');\n    console.log('Estado actual:', { survey, currentStep, currentQuestionIndex });\n    \n    try {\n      // Seleccionar un saludo adaptativo basado en el momento del día\n      const hour = new Date().getHours();\n      let timeBasedGreeting = '';\n      \n      if (hour < 12) {\n        timeBasedGreeting = 'Buenos días. ';\n      } else if (hour < 19) {\n        timeBasedGreeting = 'Buenas tardes. ';\n      } else {\n        timeBasedGreeting = 'Buenas noches. ';\n      }\n      \n      // Seleccionar un saludo aleatorio de los saludos positivos\n      const positiveGreetings = ADAPTIVE_PHRASES.greetings.filter(g => g.tone === 'positive');\n      const greeting = positiveGreetings[Math.floor(Math.random() * positiveGreetings.length)].text;\n      \n      // Componer el mensaje de bienvenida personalizado\n      const welcomeMessage = `${timeBasedGreeting}${greeting} Esta encuesta es sobre: ${survey.title}. ${survey.description || ''} Para comenzar, ¿podría decirme su nombre por favor?`;\n      console.log('Enviando mensaje de bienvenida con solicitud de nombre:', welcomeMessage);\n      \n      // Cambiar al paso de nombre directamente\n      setCurrentStep('name');\n      \n      await speakText(welcomeMessage);\n      console.log('Mensaje de bienvenida completado');\n      \n      // Iniciar escucha con un breve retraso\n      setTimeout(() => {\n        console.log('Iniciando reconocimiento de voz para captar nombre...');\n        startListening();\n      }, 1000);\n    } catch (error) {\n      console.error('Error durante startConversation:', error);\n      // Reintentar en caso de error\n      setTimeout(() => startConversation(), 2000);\n    }\n  };\n\n  // Mover a la sección de preguntas\n  const moveToQuestions = async () => {\n    console.log('Moviendo a la sección de preguntas...');\n    setCurrentStep('questions');\n    setCurrentQuestionIndex(0);\n    // Pequeña pausa para asegurar que los estados se actualicen\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await speakCurrentQuestion();\n  };\n\n  // Hablar la pregunta actual\n  const speakCurrentQuestion = async () => {\n    console.log('Hablando pregunta actual:', currentQuestionIndex);\n    if (!survey || currentQuestionIndex >= survey.questions.length) {\n      console.error('No hay más preguntas o índice inválido:', {currentQuestionIndex, questionsLength: survey?.questions?.length});\n      return;\n    }\n    \n    const question = survey.questions[currentQuestionIndex];\n    console.log('Pregunta a formular:', question);\n    let questionText = question.text;\n    \n    // Añadir instrucciones específicas según tipo de pregunta\n    if (question.type === 'rating') {\n      questionText += ' Por favor, responda con un número del 1 al 5, donde 1 es lo más bajo y 5 lo más alto.';\n    } else if (question.type === 'yesno') {\n      questionText += ' Por favor, responda sí o no.';\n    }\n    \n    // Hablar la pregunta\n    setIsSpeaking(true);\n    try {\n      await speakText(questionText);\n      console.log('Pregunta terminada de hablar, iniciando escucha...');\n      setIsSpeaking(false);\n      // Pequeña pausa antes de empezar a escuchar\n      setTimeout(async () => {\n        console.log('Iniciando escucha desde setTimeout después de hablar pregunta');\n        await startListening();\n      }, 800);\n    } catch (error) {\n      console.error('Error al hablar la pregunta:', error);\n      setIsSpeaking(false);\n      // Reintentar en caso de error\n      setTimeout(() => speakCurrentQuestion(), 1500);\n    }\n  };\n\n  // Función para cuando termina de hablar la pregunta\n  const onQuestionSpeakEnd = () => {\n    setTimeout(startListening, 500);\n  };\n\n  // Función para cuando termina de hablar el mensaje de agradecimiento\n  const onThankYouSpeakEnd = async () => {\n    try {\n      // Enviar respuestas al servidor\n      await submitResponses();\n    } catch (error) {\n      console.error('Error submitting responses:', error);\n    }\n  };\n\n  // Función para enviar respuestas al servidor\n  const submitResponses = async () => {\n    try {\n      console.log('Enviando respuestas al servidor:', responses);\n      \n      // Calcular la duración total de la encuesta\n      const endTime = new Date();\n      const durationMs = startTime ? endTime - startTime : 0;\n      const durationMinutes = Math.round(durationMs / 60000 * 10) / 10; // Duración en minutos con 1 decimal\n      \n      // Calcular el sentimiento general de las respuestas\n      const sentimentScores = responses.map(r => {\n        // Solo analizar respuestas abiertas, no calificaciones numéricas o sí/no\n        if (typeof r.value === 'string' && r.value.length > 3) {\n          const sentiment = NLPService.analyzeSentiment(r.value);\n          return sentiment.score;\n        }\n        return null;\n      }).filter(score => score !== null);\n      \n      // Calcular el sentimiento promedio si hay suficientes datos\n      let averageSentiment = 0;\n      let sentimentLabel = 'neutral';\n      \n      if (sentimentScores.length > 0) {\n        averageSentiment = sentimentScores.reduce((sum, score) => sum + score, 0) / sentimentScores.length;\n        \n        if (averageSentiment > 0.2) {\n          sentimentLabel = 'positive';\n        } else if (averageSentiment < -0.2) {\n          sentimentLabel = 'negative';\n        }\n      }\n      \n      // Incluir metadatos de IA con las respuestas\n      const formattedResponses = {\n        responses: responses.map(r => ({\n          questionId: survey.questions[r.index]._id,\n          questionText: survey.questions[r.index].text,\n          response: r.value,\n          responseTime: r.timestamp\n        })),\n        metadata: {\n          completionTime: durationMinutes,\n          overallSentiment: sentimentLabel,\n          sentimentScore: averageSentiment,\n          interactionQuality: calculateInteractionQuality()\n        }\n      };\n      \n      // Enviar respuestas con metadatos de IA\n      await ResponseService.submitResponse({\n        surveyId: survey._id,\n        surveyTitle: survey.title,\n        respondentName: userName || 'Anónimo',\n        responses: formattedResponses\n      });\n      \n      // Seleccionar mensaje de despedida basado en el sentimiento general\n      let farewellPool;\n      if (sentimentLabel === 'positive') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'positive');\n      } else if (sentimentLabel === 'negative') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'supportive');\n      } else {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'neutral');\n      }\n      \n      // Si no hay mensajes del tipo adecuado, usar cualquiera\n      if (farewellPool.length === 0) {\n        farewellPool = ADAPTIVE_PHRASES.farewells;\n      }\n      \n      const thankYouMessage = farewellPool[Math.floor(Math.random() * farewellPool.length)].text;\n      \n      // Cambiar a pantalla de agradecimiento\n      setCurrentStep('thanks');\n      \n      // Hablar mensaje de agradecimiento personalizado\n      await speakText(thankYouMessage);\n      setShowThankYouMessage(true);\n      \n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setError('Hubo un problema al enviar sus respuestas. Por favor, inténtelo de nuevo más tarde.');\n    }\n  };\n  \n  // Calcular una puntuación de calidad de interacción basada en métricas de la encuesta\n  const calculateInteractionQuality = () => {\n    // Si no hay respuestas, calidad desconocida\n    if (!responses || responses.length === 0) return 'unknown';\n    \n    // Verificar tiempos de respuesta\n    const avgResponseTime = responses.reduce((sum, r) => sum + (r.timestamp ? new Date(r.timestamp) - new Date(startTime) : 0), 0) / responses.length;\n    \n    // Verificar cantidad de repeticiones/clarificaciones (basado en logs)\n    const clarificationCount = responses.filter(r => r.required_clarification).length;\n    \n    // Calcular puntaje de 1-10\n    let score = 10;\n    \n    // Penalizar tiempos de respuesta largos (más de 15 segundos por pregunta en promedio)\n    if (avgResponseTime > 15000) {\n      score -= Math.min(3, (avgResponseTime - 15000) / 5000);\n    }\n    \n    // Penalizar por cada clarificación requerida\n    score -= clarificationCount * 1.5;\n    \n    // Limitar el rango a 1-10\n    score = Math.max(1, Math.min(10, score));\n    \n    // Clasificar la calidad\n    if (score >= 8) return 'excellent';\n    if (score >= 6) return 'good';\n    if (score >= 4) return 'fair';\n    return 'poor';\n  };\n\n  // Función para iniciar escucha automáticamente\n  const startListening = async () => {\n    console.log('Iniciando escucha...');\n    if (isListening) {\n      console.log('Ya estaba escuchando, se ignorará esta llamada');\n      return;\n    }\n    \n    setIsListening(true);\n    setTranscript('');\n    \n    try {\n      console.log('Activando el reconocimiento de voz...');\n      const speechResult = await listenForSpeech();\n      console.log('Respuesta recibida:', speechResult);\n      setIsListening(false);\n      \n      // Procesar la respuesta en un setTimeout para evitar problemas con el estado de React\n      setTimeout(async () => {\n        console.log('Procesando respuesta desde setTimeout');\n        await processResponse(speechResult);\n      }, 500);\n    } catch (error) {\n      console.error('Error en reconocimiento de voz:', error);\n      setIsListening(false);\n      \n      // Si hubo un error, intentar nuevamente después de dar feedback\n      const clarification = ADAPTIVE_PHRASES.clarifications[Math.floor(Math.random() * ADAPTIVE_PHRASES.clarifications.length)].text;\n      await speakText(clarification);\n      // Esperar un momento antes de volver a escuchar\n      setTimeout(() => startListening(), 1000);\n    }\n  };\n\n  // Función para escuchar la voz del usuario\n  const listenForSpeech = () => {\n    console.log('Configurando listenForSpeech...');\n    return new Promise((resolve, reject) => {\n      try {\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n        const recognition = new SpeechRecognition();\n        \n        recognition.lang = 'es-ES';\n        recognition.continuous = false;\n        recognition.interimResults = false;\n        \n        console.log('Configuración de reconocimiento completada, iniciando...');\n        \n        recognition.onresult = (event) => {\n          const transcript = event.results[0][0].transcript;\n          console.log('onresult - Transcripción recibida:', transcript);\n          resolve(transcript);\n        };\n        \n        recognition.onerror = (event) => {\n          console.error('Error en reconocimiento:', event.error);\n          reject(new Error(`Error de reconocimiento de voz: ${event.error}`));\n        };\n        \n        recognition.onend = () => {\n          console.log('onend - Reconocimiento finalizado');\n          // Si no hubo resultado (onresult no se llamó) y no hubo error\n          // podemos resolver con string vacío o rechazar\n          // Comentado para evitar rechazos no deseados:\n          // reject(new Error('No se detectó voz'));\n        };\n        \n        // Comenzar a escuchar\n        recognition.start();\n        console.log('Reconocimiento iniciado correctamente');\n        \n        // Asegurar que no se quede escuchando indefinidamente\n        setTimeout(() => {\n          try {\n            recognition.stop();\n            console.log('Reconocimiento detenido por timeout');\n          } catch (e) {\n            console.log('Error al detener reconocimiento por timeout', e);\n          }\n        }, 10000); // 10 segundos máximo de escucha\n      } catch (error) {\n        console.error('Error al inicializar reconocimiento de voz:', error);\n        reject(error);\n      }\n    });\n  };\n\n  // Función para procesar la respuesta del usuario con NLP mejorado\n  const processResponse = async (text) => {\n    console.log('Procesando respuesta:', text);\n    if (!text || text.trim() === '') {\n      console.log('Respuesta vacía, volviendo a escuchar...');\n      setTimeout(() => startListening(), 1000);\n      return;\n    }\n    \n    setTranscript(text);\n    \n    try {\n      // Analizar el sentimiento general de la respuesta del usuario\n      const sentimentAnalysis = NLPService.analyzeSentiment(text);\n      console.log('Análisis de sentimiento:', sentimentAnalysis);\n      \n      if (currentStep === 'name') {\n        console.log('Procesando nombre:', text);\n        \n        // Usar el servicio de NLP avanzado para extraer el nombre\n        const intent = NLPService.analyzeIntent(text);\n        \n        // Si la respuesta es una pregunta, manejarla apropiadamente\n        if (intent.intent === 'question') {\n          const supportiveResponse = ADAPTIVE_PHRASES.clarifications\n            .filter(r => r.tone === 'supportive')\n            .map(r => r.text);\n          \n          const response = supportiveResponse[Math.floor(Math.random() * supportiveResponse.length)];\n          await speakText('Disculpe, solo necesito saber su nombre para registrar sus respuestas. ¿Cómo se llama?');\n          setTimeout(() => startListening(), 1000);\n          return;\n        }\n        \n        // Extraer el nombre usando el servicio NLP\n        let possibleName = NLPService.extractName(text);\n        console.log('Nombre extraído usando NLP:', possibleName);\n        \n        // Si no pudimos extraer un nombre válido, usar un nombre genérico\n        if (!possibleName) {\n          possibleName = 'Estimado participante';\n        }\n        \n        // Guardar el nombre y continuar\n        setUserName(possibleName);\n        \n        // Elegir respuesta basada en el sentimiento detectado\n        let responsePhrase;\n        if (sentimentAnalysis.sentiment === 'positive') {\n          responsePhrase = '¡Encantado de conocerle, ' + possibleName + '! Vamos a comenzar con la primera pregunta.';\n        } else if (sentimentAnalysis.sentiment === 'negative') {\n          responsePhrase = 'Gracias, ' + possibleName + '. Vamos a iniciar la encuesta con la primera pregunta.';\n        } else {\n          responsePhrase = 'Muy bien, ' + possibleName + '. Comencemos con la primera pregunta.';\n        }\n        \n        // Confirmar y seguir\n        await speakText(responsePhrase);\n        \n        // Pasar a las preguntas con un retraso para asegurar la actualización de estado\n        setTimeout(async () => {\n          console.log('Pasando a las preguntas de la encuesta...');\n          await moveToQuestions();\n        }, 800);\n        \n        return;\n      }\n      \n      if (currentStep === 'questions') {\n        console.log('Procesando respuesta a pregunta:', currentQuestionIndex);\n        const currentQuestion = survey.questions[currentQuestionIndex];\n        \n        // Procesar la respuesta usando el servicio NLP avanzado\n        const processedResponse = await NLPService.processResponse(text, currentQuestion.type);\n        console.log('Respuesta procesada con NLP:', processedResponse);\n        \n        if (processedResponse !== null) {\n          // Respuesta válida\n          saveResponse(processedResponse);\n          \n          // Seleccionar una respuesta adaptativa basada en el sentimiento del usuario\n          let responsePool;\n          if (sentimentAnalysis.sentiment === 'positive') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'positive');\n          } else if (sentimentAnalysis.sentiment === 'negative') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'supportive');\n          } else {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'neutral');\n          }\n          \n          // Si no hay respuestas del tipo adecuado, usar cualquiera\n          if (responsePool.length === 0) {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments;\n          }\n          \n          // Seleccionar respuesta adaptativa\n          const acknowledgment = responsePool[Math.floor(Math.random() * responsePool.length)].text;\n          await speakText(acknowledgment);\n          \n          // Transición a siguiente pregunta o finalizar\n          if (currentQuestionIndex < survey.questions.length - 1) {\n            // Seleccionar transición según sentimiento\n            let transitionPool;\n            if (sentimentAnalysis.sentiment === 'positive') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'positive');\n            } else if (sentimentAnalysis.sentiment === 'negative') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'supportive');\n            } else {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'neutral');\n            }\n            \n            if (transitionPool.length === 0) {\n              transitionPool = ADAPTIVE_PHRASES.transitions;\n            }\n            \n            const transition = transitionPool[Math.floor(Math.random() * transitionPool.length)].text;\n            await speakText(transition);\n            \n            // Incrementar el índice y pasar a la siguiente pregunta\n            setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n            \n            // Esperar a que se actualice el estado antes de continuar\n            console.log('Avanzando a la siguiente pregunta...');\n            \n            // Usar setTimeout para asegurar que el cambio de estado se complete\n            setTimeout(async () => {\n              console.log('Ejecutando speakCurrentQuestion desde setTimeout');\n              await speakCurrentQuestion();\n            }, 1000);\n          } else {\n            // Finalizar encuesta con un mensaje adaptativo basado en el sentimiento general\n            console.log('Terminando encuesta, enviando respuestas...');\n            await submitResponses();\n          }\n        } else {\n          // Respuesta inválida, elegir clarificación basada en sentimiento\n          console.log('Respuesta inválida, pidiendo aclaración...');\n          \n          let clarificationPool;\n          if (sentimentAnalysis.sentiment === 'negative') {\n            // Si el usuario parece frustrado, usar tono de apoyo\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'supportive');\n          } else {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'neutral');\n          }\n          \n          if (clarificationPool.length === 0) {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications;\n          }\n          \n          const clarification = clarificationPool[Math.floor(Math.random() * clarificationPool.length)].text;\n          await speakText(clarification);\n          \n          // Usar setTimeout para evitar problemas con promesas anidadas\n          setTimeout(async () => {\n            console.log('Reiniciando escucha después de aclaración');\n            await startListening();\n          }, 800);\n        }\n      }\n    } catch (error) {\n      console.error('Error durante el procesamiento de la respuesta:', error);\n      // Intentar recuperarse del error\n      setTimeout(async () => {\n        if (currentStep === 'name') {\n          await speakText('Lo siento, hubo un problema. Intentemos de nuevo. ¿Podría decirme su nombre?');\n          setTimeout(() => startListening(), 1000);\n        } else if (currentStep === 'questions') {\n          await speakCurrentQuestion();\n        }\n      }, 1500);\n    }\n  };\n\n  // Función para extraer un nombre de texto\n  const extractName = (text) => {\n    console.log('Extrayendo nombre de:', text);\n    \n    // Si el texto está vacío o no es una cadena\n    if (!text || typeof text !== 'string') {\n      console.log('Texto vacío o no es cadena, usando nombre genérico');\n      return 'Estimado participante';\n    }\n    \n    // Eliminar signos de puntuación y normalizar texto\n    const normalizedText = text.replace(/[.,;:¡!¿?]/g, '').trim();\n    \n    // Frases comunes al indicar un nombre\n    const namePhrases = [\n      'me llamo', 'mi nombre es', 'soy', 'yo soy', \n      'puedes llamarme', 'puede llamarme', 'llámame', 'llamame'\n    ];\n    \n    // Buscar frases de presentación\n    let cleanedText = normalizedText;\n    for (const phrase of namePhrases) {\n      if (normalizedText.toLowerCase().includes(phrase)) {\n        // Extraer texto después de la frase de presentación\n        const parts = normalizedText.toLowerCase().split(phrase);\n        if (parts.length > 1 && parts[1].trim()) {\n          cleanedText = parts[1].trim();\n          console.log(`Frase de presentación '${phrase}' encontrada, texto limpio: '${cleanedText}'`);\n          break;\n        }\n      }\n    }\n    \n    // Palabras comunes para ignorar al final\n    const commonWords = ['gracias', 'por favor', 'aquí', 'señor', 'señora', 'mucho gusto'];\n    for (const word of commonWords) {\n      if (cleanedText.toLowerCase().endsWith(word)) {\n        cleanedText = cleanedText.slice(0, -(word.length)).trim();\n      }\n    }\n    \n    // Si el texto limpio está vacío, usar el original\n    if (!cleanedText) {\n      cleanedText = normalizedText;\n    }\n    \n    // Obtener las palabras del texto\n    const words = cleanedText.split(/\\s+/);\n    \n    // Si solo hay una palabra, asumimos que es el nombre\n    if (words.length === 1) {\n      const name = words[0];\n      console.log('Nombre extraído (una palabra):', name);\n      // Capitalizar primera letra\n      return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n    }\n    \n    // Si hay más palabras, tomar hasta 3 palabras como nombre completo\n    const nameWords = words.slice(0, Math.min(3, words.length));\n    let extractedName = nameWords.join(' ');\n    \n    // Capitalizar cada palabra\n    extractedName = extractedName.split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n    \n    console.log('Nombre extraído (múltiples palabras):', extractedName);\n    return extractedName;\n  };\n\n  // Función para guardar respuesta y pasar a la siguiente pregunta\n  const saveResponse = (value) => {\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = {\n      value,\n      timestamp: new Date().toISOString(),\n      index: currentQuestionIndex\n    };\n    setResponses(updatedResponses);\n\n    // Verificar si hay más preguntas\n    if (currentQuestionIndex < survey.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Fin de la encuesta\n      setCurrentStep('thanks');\n    }\n  };\n\n  // Manejar clic en botón de micrófono\n  const handleMicrophoneClick = () => {\n    if (isListening) {\n      setIsListening(false);\n    } else {\n      startListening();\n    }\n  };\n\n  // Manejar clic en botones de opciones \n  const handleOptionClick = (value) => {\n    if (isListening) return;\n\n    processResponse(value);\n  };\n\n  // Solicitar permisos de micrófono\n  const requestMicrophonePermission = async () => {\n    try {\n      const permission = await checkMicrophonePermission();\n      setMicrophonePermission(permission);\n\n      if (permission) {\n        // Iniciar la encuesta si se conceden los permisos\n        setCurrentStep('welcome');\n      } else {\n        setErrorMessage('No se pudo obtener permiso para el micrófono. Por favor, permita el acceso en la configuración de su navegador.');\n      }\n    } catch (error) {\n      console.error('Error al solicitar permisos de micrófono:', error);\n      setErrorMessage('Error al solicitar permisos de micrófono.');\n    }\n  };\n\n  // Función para hablar utilizando el componente SimpleVoice\n  const speakText = (text) => {\n    console.log('Solicitando síntesis de voz para:', text);\n    return new Promise((resolve, reject) => {\n      if (!text) {\n        console.warn('Se intentó sintetizar texto vacío');\n        resolve();\n        return;\n      }\n      \n      try {\n        // Establecer callback para cuando termine de hablar\n        const onEnd = () => {\n          console.log('Síntesis de voz completada para:', text);\n          setVoiceText('');\n          resolve();\n        };\n        \n        // Actualizar estado para activar SimpleVoice\n        setSpeakEndCallback(onEnd);\n        setVoiceText(text);\n      } catch (error) {\n        console.error('Error al iniciar síntesis de voz:', error);\n        reject(error);\n      }\n    });\n  };\n\n  useEffect(() => {\n    setStartTime(new Date());\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center my-12\">\n        <svg className=\"animate-spin h-8 w-8 text-primary-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n      </div>\n    );\n  }\n\n  if (!survey) {\n    return (\n      <div className=\"card text-center py-12\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n        </svg>\n        <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Encuesta no encontrada</h3>\n        <p className=\"text-gray-600 mb-6\">La encuesta que estás buscando no existe o ha sido eliminada.</p>\n        <button onClick={() => navigate('/')} className=\"btn btn-primary\">\n          Volver al Inicio\n        </button>\n      </div>\n    );\n  }\n\n  if (!browserSupported) {\n    return (\n      <div className=\"card text-center py-12\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-orange-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n        </svg>\n        <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Navegador no compatible</h3>\n        <p className=\"text-gray-600 mb-6\">\n          Esta aplicación requiere un navegador compatible con la API de Reconocimiento de Voz.\n          Por favor, utilice Chrome, Edge o Safari para continuar.\n        </p>\n        <button onClick={() => window.location.reload()} className=\"btn btn-primary\">\n          Intentar Nuevamente\n        </button>\n      </div>\n    );\n  }\n\n  if (microphonePermission === false) {\n    return (\n      <div className=\"card text-center py-12\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-16 w-16 mx-auto text-orange-400 mb-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4a1 1 0 01-1-1h-2a1 1 0 01-1-1v-2a1 1 0 01 1-1h2a1 1 0 01 1 1v2a1 1 0 01 1 1h2a1 1 0 01 1 1v2a1 1 0 01-1 1h-2a1 1 0 01-1-1v-2a1 1 0 011-1h2z\" />\n        </svg>\n        <h3 className=\"text-lg font-medium text-gray-800 mb-2\">Permiso de Micrófono Requerido</h3>\n        <p className=\"text-gray-600 mb-6\">\n          Para participar en esta encuesta por voz, necesitamos permiso para usar su micrófono.\n          Por favor, haga clic en el botón debajo para conceder acceso.\n        </p>\n        <button onClick={requestMicrophonePermission} className=\"btn btn-primary\">\n          Permitir Micrófono\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto p-4\">\n      <div className=\"bg-white shadow-md rounded-lg p-6 mb-6\">\n        {/* Encabezado */}\n        <h1 className=\"text-2xl font-bold mb-4\">{loading ? 'Cargando encuesta...' : (survey ? survey.title : 'Encuesta no encontrada')}</h1>\n        \n        {/* Mensajes de error */}\n        {errorMessage && (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n            <p>{errorMessage}</p>\n            {!microphonePermission && (\n              <button\n                onClick={requestMicrophonePermission}\n                className=\"mt-2 btn btn-primary\"\n              >\n                Permitir acceso al micrófono\n              </button>\n            )}\n          </div>\n        )}\n\n        {/* Contenido principal */}\n        <div className=\"mb-6\">\n          {loading ? (\n            <div className=\"flex justify-center items-center h-40\">\n              <div className=\"spinner\"></div>\n            </div>\n          ) : !browserSupported ? (\n            <div className=\"bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded\">\n              <p>Su navegador no soporta las tecnologías de voz necesarias para esta encuesta.</p>\n              <p className=\"mt-2\">Por favor, use un navegador compatible como Chrome, Edge o Safari.</p>\n            </div>\n          ) : (\n            <div>\n              {/* Indicador de escucha activa */}\n              {isListening && (\n                <div className=\"fixed bottom-4 right-4 bg-primary-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\" />\n                  </svg>\n                  Escuchando...\n                </div>\n              )}\n              \n              {/* Indicador de habla activa */}\n              {isSpeaking && (\n                <div className=\"fixed bottom-4 left-4 bg-blue-500 text-white py-2 px-4 rounded-full shadow-lg animate-pulse flex items-center\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 017.072 0m-9.9-2.828a9 9 0 0112.728 0\" />\n                  </svg>\n                  Hablando...\n                </div>\n              )}\n              \n              {/* Transcripción de voz */}\n              {transcript && (\n                <div className=\"bg-gray-100 p-4 rounded-lg mb-6\">\n                  <div className=\"text-sm text-gray-500 mb-1\">Su respuesta:</div>\n                  <div className=\"text-lg\">{transcript}</div>\n                </div>\n              )}\n              \n              {/* Contenido según el paso actual */}\n              {currentStep === 'questions' && currentQuestionIndex < survey?.questions?.length && (\n                <div>\n                  <div className=\"mb-4\">\n                    <h3 className=\"text-lg font-semibold mb-2\">\n                      Pregunta {currentQuestionIndex + 1} de {survey.questions.length}\n                    </h3>\n                    <p className=\"text-lg\">{survey.questions[currentQuestionIndex].text}</p>\n                  </div>\n                </div>\n              )}\n              \n              {/* Progreso de la encuesta */}\n              {currentStep === 'questions' && (\n                <div className=\"mt-8\">\n                  <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                    <div\n                      className=\"bg-primary-500 h-2.5 rounded-full\"\n                      style={{ width: `${((currentQuestionIndex) / survey.questions.length) * 100}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-2\">\n                    {currentQuestionIndex} de {survey.questions.length} preguntas completadas\n                  </div>\n                </div>\n              )}\n              \n              {/* Mensaje final */}\n              {currentStep === 'thanks' && (\n                <div className=\"mt-6 space-y-4\">\n                  <p className=\"text-green-600\">Sus respuestas han sido guardadas correctamente.</p>\n                  <p>{survey.farewell || 'Gracias por completar esta encuesta.'}</p>\n                  \n                  {showThankYouMessage && (\n                    <div className=\"mt-6 flex space-x-4 justify-center\">\n                      <button\n                        onClick={() => navigate('/surveys/public')}\n                        className=\"btn btn-primary\"\n                      >\n                        Ver Otras Encuestas\n                      </button>\n                      <button\n                        onClick={() => navigate('/')}\n                        className=\"btn btn-outline\"\n                      >\n                        Volver al Inicio\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Instrucciones actualizadas */}\n      <div className=\"mt-8 bg-sky-50 p-4 rounded-lg shadow-sm border border-sky-100\">\n        <h3 className=\"text-lg font-semibold mb-2\">Consejos para una buena experiencia:</h3>\n        <ul className=\"list-disc pl-5 space-y-1 text-gray-700\">\n          <li>Utilice un micrófono en un entorno sin ruido</li>\n          <li>Espere a que la aplicación termine de hablar antes de responder</li>\n          <li>Hable con claridad para que el sistema pueda entenderle correctamente</li>\n        </ul>\n      </div>\n      <SimpleVoice text={voiceText} onEnd={speakEndCallback} />\n    </div>\n  );\n};\n\nexport default TakeSurvey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}