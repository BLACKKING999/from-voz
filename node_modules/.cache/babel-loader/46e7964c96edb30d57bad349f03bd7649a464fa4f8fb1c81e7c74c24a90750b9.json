{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\Sistema de Encuestas por Voz\\\\client\\\\src\\\\pages\\\\TakeSurvey.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { isSpeechRecognitionSupported, listenForSpeech, checkMicrophonePermission } from '../utils/voiceSurveyAPI';\nimport { SurveyService, ResponseService } from '../services/apiService';\nimport { FaSpinner, FaMicrophone, FaVolumeUp, FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport NLPService from '../services/nlpService';\nimport AudioService from '../services/audioService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TakeSurvey = () => {\n  _s();\n  var _survey$questions2, _survey$questions$cur, _survey$questions$cur2;\n  const {\n    surveyId\n  } = useParams();\n  const navigate = useNavigate();\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [currentStep, setCurrentStep] = useState('initial'); // 'initial', 'name', 'questions', 'thanks'\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [userName, setUserName] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [browserSupported, setBrowserSupported] = useState(true);\n  const [microphonePermission, setMicrophonePermission] = useState(null);\n  const [showThankYouMessage, setShowThankYouMessage] = useState(false);\n  const [voiceText, setVoiceText] = useState('');\n  const [speakEndCallback, setSpeakEndCallback] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Conjunto de frases adaptativas clasificadas por tono para mejorar la naturalidad\n  const ADAPTIVE_PHRASES = {\n    acknowledgments: [{\n      text: 'Gracias por su respuesta.',\n      tone: 'neutral'\n    }, {\n      text: '¡Excelente! He registrado su respuesta.',\n      tone: 'positive'\n    }, {\n      text: 'Perfecto, continuemos.',\n      tone: 'positive'\n    }, {\n      text: 'Entendido, muchas gracias.',\n      tone: 'neutral'\n    }, {\n      text: 'He anotado su respuesta.',\n      tone: 'neutral'\n    }, {\n      text: '¡Genial! Avancemos.',\n      tone: 'positive'\n    }, {\n      text: 'Comprendo, continuamos.',\n      tone: 'supportive'\n    }, {\n      text: 'Gracias por compartir su opinión.',\n      tone: 'supportive'\n    }],\n    transitions: [{\n      text: 'Pasemos a la siguiente pregunta.',\n      tone: 'neutral'\n    }, {\n      text: 'Continuemos con la siguiente pregunta.',\n      tone: 'neutral'\n    }, {\n      text: 'Ahora, la siguiente pregunta.',\n      tone: 'neutral'\n    }, {\n      text: 'Avancemos a la siguiente pregunta.',\n      tone: 'positive'\n    }, {\n      text: 'Me gustaría preguntarle ahora sobre...',\n      tone: 'supportive'\n    }],\n    clarifications: [{\n      text: 'Disculpe, no he entendido su respuesta. ¿Podría repetirla?',\n      tone: 'neutral'\n    }, {\n      text: 'Parece que no pude entender correctamente. ¿Podría decirlo de otra manera?',\n      tone: 'supportive'\n    }, {\n      text: 'Necesito una respuesta más clara. ¿Podría intentarlo nuevamente?',\n      tone: 'neutral'\n    }, {\n      text: 'No capté bien su respuesta. ¿Podría hablar un poco más claro?',\n      tone: 'supportive'\n    }],\n    greetings: [{\n      text: 'Bienvenido a nuestra encuesta. Apreciamos mucho su participación.',\n      tone: 'positive'\n    }, {\n      text: 'Gracias por participar en esta encuesta. Sus opiniones son muy importantes.',\n      tone: 'neutral'\n    }, {\n      text: 'Le damos la bienvenida a esta encuesta. Valoramos su tiempo y sus respuestas.',\n      tone: 'supportive'\n    }],\n    farewells: [{\n      text: '¡Muchas gracias por completar la encuesta! Sus respuestas son muy valiosas para nosotros.',\n      tone: 'positive'\n    }, {\n      text: 'La encuesta ha finalizado. Agradecemos su participación y su tiempo.',\n      tone: 'neutral'\n    }, {\n      text: 'Hemos llegado al final de la encuesta. Realmente apreciamos sus opiniones.',\n      tone: 'supportive'\n    }]\n  };\n\n  // Comprobar compatibilidad del navegador y permisos\n  useEffect(() => {\n    const checkCompatibility = async () => {\n      // Verificar si el navegador soporta reconocimiento de voz\n      const speechRecognitionSupported = isSpeechRecognitionSupported();\n      const speechSynthesisSupported = true; // isSpeechSynthesisSupported();\n\n      if (!speechRecognitionSupported || !speechSynthesisSupported) {\n        setBrowserSupported(false);\n        setErrorMessage('Su navegador no soporta las tecnologías de voz necesarias para esta encuesta. Por favor, use Chrome, Edge o Safari.');\n        return;\n      }\n\n      // Verificar permisos de micrófono\n      const hasMicrophonePermission = await checkMicrophonePermission();\n      setMicrophonePermission(hasMicrophonePermission);\n      if (!hasMicrophonePermission) {\n        setErrorMessage('Necesitamos permiso para usar su micrófono. Por favor, permita el acceso cuando se le solicite.');\n      }\n    };\n    checkCompatibility();\n  }, []);\n\n  // Inicialización de la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        // Usar getPublicSurvey en lugar de getSurveyById que no existe\n        const surveyData = await SurveyService.getPublicSurvey(surveyId);\n        setSurvey(surveyData);\n        setLoading(false);\n        // Registrar el tiempo de inicio de la encuesta\n        setStartTime(new Date());\n\n        // Inicializar array de respuestas vacío\n        if (surveyData && surveyData.questions) {\n          setResponses(Array(surveyData.questions.length).fill(null).map(() => ({\n            value: '',\n            timestamp: null,\n            index: 0,\n            required_clarification: false\n          })));\n        }\n      } catch (error) {\n        console.error('Error al obtener encuesta:', error);\n        setErrorMessage('No se pudo cargar la encuesta. Por favor, inténtelo de nuevo más tarde.');\n        setLoading(false);\n      }\n    };\n    fetchSurvey();\n  }, [surveyId]);\n\n  // Iniciar conversación automáticamente cuando la encuesta está cargada\n  useEffect(() => {\n    if (survey && currentStep === 'initial') {\n      startConversation();\n    }\n  }, [survey, currentStep]);\n\n  // Iniciar la conversación automática\n  const startConversation = async () => {\n    console.log('Función startConversation ejecutada');\n    console.log('Estado actual:', survey);\n    try {\n      // Obtener la hora del día para personalizar el saludo\n      const hour = new Date().getHours();\n      let greeting;\n      if (hour < 12) {\n        greeting = 'Buenos días';\n      } else if (hour < 18) {\n        greeting = 'Buenas tardes';\n      } else {\n        greeting = 'Buenas noches';\n      }\n\n      // Construir un mensaje de bienvenida completo y natural\n      const welcomeMessage = `${greeting}. Bienvenido a nuestra encuesta. Apreciamos mucho su participación. Esta encuesta es sobre: ${survey.title}. ${survey.description || ''} Para comenzar, ¿podría decirme su nombre por favor?`;\n      console.log('Enviando mensaje de bienvenida con solicitud de nombre:', welcomeMessage);\n\n      // Cambiar el estado para mostrar que estamos en el paso de solicitar nombre\n      setCurrentStep('name');\n\n      // Primero asegurarnos de que no estamos hablando\n      if (isSpeaking) {\n        await new Promise(resolve => {\n          const checkInterval = setInterval(() => {\n            if (!isSpeaking) {\n              clearInterval(checkInterval);\n              resolve();\n            }\n          }, 100);\n        });\n      }\n\n      // Hablar el mensaje de bienvenida con solicitud de nombre\n      await speakText(welcomeMessage);\n      console.log('Mensaje de bienvenida completado');\n\n      // Esperar un momento antes de comenzar a escuchar\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      console.log('Iniciando reconocimiento de voz para captar nombre...');\n      startListening();\n    } catch (error) {\n      console.error('Error al iniciar conversación:', error);\n      setErrorMessage('Ocurrió un error al iniciar la encuesta. Por favor, recargue la página e intente nuevamente.');\n    }\n  };\n\n  // Mover a la sección de preguntas\n  const moveToQuestions = async () => {\n    console.log('Moviendo a la sección de preguntas...');\n    setCurrentStep('questions');\n    setCurrentQuestionIndex(0);\n    // Pequeña pausa para asegurar que los estados se actualicen\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await speakCurrentQuestion();\n  };\n\n  // Hablar la pregunta actual\n  const speakCurrentQuestion = async () => {\n    console.log('Hablando pregunta actual:', currentQuestionIndex);\n    if (!survey || currentQuestionIndex >= survey.questions.length) {\n      var _survey$questions;\n      console.error('No hay más preguntas o índice inválido:', {\n        currentQuestionIndex,\n        questionsLength: survey === null || survey === void 0 ? void 0 : (_survey$questions = survey.questions) === null || _survey$questions === void 0 ? void 0 : _survey$questions.length\n      });\n      return;\n    }\n    const question = survey.questions[currentQuestionIndex];\n    console.log('Pregunta a formular:', question);\n    let questionText = question.text;\n\n    // Añadir instrucciones específicas según tipo de pregunta\n    if (question.type === 'rating') {\n      questionText += ' Por favor, responda con un número del 1 al 5, donde 1 es lo más bajo y 5 lo más alto.';\n    } else if (question.type === 'yesno') {\n      questionText += ' Por favor, responda sí o no.';\n    }\n\n    // Hablar la pregunta\n    setIsSpeaking(true);\n    try {\n      await speakText(questionText);\n      console.log('Pregunta terminada de hablar, iniciando escucha...');\n      setIsSpeaking(false);\n      // Pequeña pausa antes de empezar a escuchar\n      setTimeout(async () => {\n        console.log('Iniciando escucha desde setTimeout después de hablar pregunta');\n        await startListening();\n      }, 800);\n    } catch (error) {\n      console.error('Error al hablar la pregunta:', error);\n      setIsSpeaking(false);\n      // Reintentar en caso de error\n      setTimeout(() => speakCurrentQuestion(), 1500);\n    }\n  };\n\n  // Función para cuando termina de hablar la pregunta\n  const onQuestionSpeakEnd = () => {\n    setTimeout(startListening, 500);\n  };\n\n  // Función para cuando termina de hablar el mensaje de agradecimiento\n  const onThankYouSpeakEnd = async () => {\n    try {\n      // Enviar respuestas al servidor\n      await submitResponses();\n    } catch (error) {\n      console.error('Error submitting responses:', error);\n    }\n  };\n\n  // Función para enviar respuestas al servidor\n  const submitResponses = async () => {\n    try {\n      console.log('Enviando respuestas al servidor:', responses);\n\n      // Calcular la duración total de la encuesta\n      const endTime = new Date();\n      const durationMs = startTime ? endTime - startTime : 0;\n      const durationMinutes = Math.round(durationMs / 60000 * 10) / 10; // Duración en minutos con 1 decimal\n\n      // Calcular el sentimiento general de las respuestas\n      const sentimentScores = responses.map(r => {\n        // Solo analizar respuestas abiertas, no calificaciones numéricas o sí/no\n        if (typeof r.value === 'string' && r.value.length > 3) {\n          const sentiment = NLPService.analyzeSentiment(r.value);\n          return sentiment.score;\n        }\n        return null;\n      }).filter(score => score !== null);\n\n      // Calcular el sentimiento promedio si hay suficientes datos\n      let averageSentiment = 0;\n      let sentimentLabel = 'neutral';\n      if (sentimentScores.length > 0) {\n        averageSentiment = sentimentScores.reduce((sum, score) => sum + score, 0) / sentimentScores.length;\n        if (averageSentiment > 0.2) {\n          sentimentLabel = 'positive';\n        } else if (averageSentiment < -0.2) {\n          sentimentLabel = 'negative';\n        }\n      }\n\n      // Incluir metadatos de IA con las respuestas\n      const formattedResponses = {\n        responses: responses.map(r => ({\n          questionId: survey.questions[r.index]._id,\n          questionText: survey.questions[r.index].text,\n          response: r.value,\n          responseTime: r.timestamp\n        })),\n        metadata: {\n          completionTime: durationMinutes,\n          overallSentiment: sentimentLabel,\n          sentimentScore: averageSentiment,\n          interactionQuality: calculateInteractionQuality()\n        }\n      };\n\n      // Enviar respuestas con metadatos de IA\n      await ResponseService.submitResponse({\n        surveyId: survey._id,\n        surveyTitle: survey.title,\n        respondentName: userName || 'Anónimo',\n        responses: formattedResponses\n      });\n\n      // Seleccionar mensaje de despedida basado en el sentimiento general\n      let farewellPool;\n      if (sentimentLabel === 'positive') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'positive');\n      } else if (sentimentLabel === 'negative') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'supportive');\n      } else {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'neutral');\n      }\n\n      // Si no hay mensajes del tipo adecuado, usar cualquiera\n      if (farewellPool.length === 0) {\n        farewellPool = ADAPTIVE_PHRASES.farewells;\n      }\n      const thankYouMessage = farewellPool[Math.floor(Math.random() * farewellPool.length)].text;\n\n      // Cambiar a pantalla de agradecimiento\n      setCurrentStep('thanks');\n\n      // Hablar mensaje de agradecimiento personalizado\n      await speakText(thankYouMessage);\n      setShowThankYouMessage(true);\n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setErrorMessage('Hubo un problema al enviar sus respuestas. Por favor, inténtelo de nuevo más tarde.');\n    }\n  };\n\n  // Calcular una puntuación de calidad de interacción basada en métricas de la encuesta\n  const calculateInteractionQuality = () => {\n    // Si no hay respuestas, calidad desconocida\n    if (!responses || responses.length === 0) return 'unknown';\n\n    // Verificar tiempos de respuesta\n    const avgResponseTime = responses.reduce((sum, r) => sum + (r.timestamp ? new Date(r.timestamp) - new Date(startTime) : 0), 0) / responses.length;\n\n    // Verificar cantidad de repeticiones/clarificaciones (basado en logs)\n    const clarificationCount = responses.filter(r => r.required_clarification).length;\n\n    // Calcular puntaje de 1-10\n    let score = 10;\n\n    // Penalizar tiempos de respuesta largos (más de 15 segundos por pregunta en promedio)\n    if (avgResponseTime > 15000) {\n      score -= Math.min(3, (avgResponseTime - 15000) / 5000);\n    }\n\n    // Penalizar por cada clarificación requerida\n    score -= clarificationCount * 1.5;\n\n    // Limitar el rango a 1-10\n    score = Math.max(1, Math.min(10, score));\n\n    // Clasificar la calidad\n    if (score >= 8) return 'excellent';\n    if (score >= 6) return 'good';\n    if (score >= 4) return 'fair';\n    return 'poor';\n  };\n\n  // Inicializar el sistema de audio al cargar la página\n  useEffect(() => {\n    AudioService.initSpeechSystem();\n    checkMicrophonePermission();\n  }, []);\n\n  // Pre-cargar las voces del navegador\n  useEffect(() => {\n    // Pre-cargar voces al inicio para evitar problemas\n    if (window.speechSynthesis) {\n      console.log('Precargando voces del sintetizador...');\n\n      // Asegurarse de que las voces estén cargadas\n      const loadVoices = () => {\n        const voices = window.speechSynthesis.getVoices();\n        console.log('Voces disponibles:', voices.length);\n\n        // Mostrar voces disponibles en español\n        const spanishVoices = voices.filter(v => v.lang.includes('es'));\n        if (spanishVoices.length > 0) {\n          console.log('Voces en español encontradas:', spanishVoices.map(v => v.name).join(', '));\n        } else if (voices.length > 0) {\n          console.log('No se encontraron voces en español. Voces disponibles:', voices.map(v => v.name).join(', '));\n        } else {\n          console.warn('No se encontraron voces disponibles');\n        }\n      };\n\n      // Chrome requiere este evento\n      if (window.speechSynthesis.onvoiceschanged !== undefined) {\n        window.speechSynthesis.onvoiceschanged = loadVoices;\n      }\n\n      // Intentar cargar voces inmediatamente también\n      loadVoices();\n    }\n  }, []);\n\n  // Función para iniciar escucha automáticamente\n  const startListening = async () => {\n    try {\n      console.log('Iniciando escucha...');\n\n      // Verificar soporte y permisos antes de continuar\n      if (!browserSupported) {\n        setErrorMessage('Su navegador no es compatible con el reconocimiento de voz');\n        return;\n      }\n      console.log('Activando el reconocimiento de voz...');\n      setIsListening(true);\n      setTranscript('');\n\n      // Esperar a que termine cualquier síntesis de voz en curso\n      if (isSpeaking) {\n        console.log('Esperando que termine la síntesis de voz...');\n        await new Promise(resolve => {\n          const checkSpeaking = setInterval(() => {\n            if (!isSpeaking) {\n              clearInterval(checkSpeaking);\n              resolve();\n            }\n          }, 100);\n        });\n\n        // Añadir una pausa de 1 segundo después de que termine de hablar\n        // para dar tiempo al usuario de procesar lo que escuchó\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n      console.log('Configurando listenForSpeech...');\n\n      // Número máximo de intentos antes de pasar a la siguiente pregunta\n      const MAX_RETRY_ATTEMPTS = 3;\n\n      // Crear un estado local de intentos para evitar problemas con closures\n      let attemptCount = 0;\n\n      // Para guardar la instancia de reconocimiento\n      let recognitionInstance = null;\n\n      // Función para manejar el resultado del reconocimiento\n      const handleRecognitionResult = result => {\n        console.log('Reconocimiento exitoso:', result);\n        setTranscript(result.transcript);\n        setIsListening(false);\n        if (recognitionInstance) {\n          recognitionInstance.stop();\n        }\n\n        // Procesar la respuesta recibida\n        processResponse(result.transcript);\n      };\n\n      // Función para manejar el fin del reconocimiento\n      const handleRecognitionEnd = async () => {\n        // Si no hay transcript, es porque no se detectó habla\n        if (!transcript) {\n          attemptCount++;\n          console.log(`Intento ${attemptCount}/${MAX_RETRY_ATTEMPTS} sin respuesta detectada`);\n\n          // Seleccionar mensaje de clarificación según el número de intento\n          let clarificationMessage;\n          if (attemptCount === 1) {\n            clarificationMessage = 'No capté bien su respuesta. ¿Podría hablar un poco más claro?';\n          } else if (attemptCount === 2) {\n            clarificationMessage = 'Necesito una respuesta más clara. ¿Podría intentarlo nuevamente?';\n          } else {\n            clarificationMessage = 'Parece que no pude entender correctamente. ¿Podría decirlo de otra manera?';\n          }\n\n          // Hablar mensaje de clarificación\n          await speakText(clarificationMessage);\n\n          // Si aún no alcanzamos el máximo de intentos, intentar de nuevo\n          if (attemptCount < MAX_RETRY_ATTEMPTS) {\n            // Iniciar un nuevo reconocimiento después de una pausa\n            setTimeout(() => {\n              // Crear una nueva instancia de reconocimiento\n              recognitionInstance = listenForSpeech(handleRecognitionResult, error => {\n                console.error('Error en reconocimiento de voz:', error);\n                // No mostrar errores de no-speech al usuario\n                if (!error.includes('no-speech')) {\n                  setErrorMessage(error);\n                }\n              }, handleRecognitionEnd, 0 // Sin timeout\n              );\n            }, 500);\n          } else {\n            // Si alcanzamos el máximo de intentos, pasar a la siguiente pregunta\n            if (currentStep === 'name') {\n              // Si estamos en el paso del nombre, usar 'Anónimo'\n              setUserName('Anónimo');\n              await speakText('Continuaremos sin registrar su nombre.');\n              moveToQuestions();\n            } else if (currentStep === 'questions') {\n              // Si estamos en preguntas, guardar respuesta como 'No responde'\n              saveResponse('No responde');\n            }\n          }\n        }\n      };\n\n      // Configurar reconocimiento con callbacks\n      recognitionInstance = listenForSpeech(handleRecognitionResult, error => {\n        console.error('Error en reconocimiento de voz:', error);\n        // No mostrar errores de no-speech al usuario\n        if (!error.includes('no-speech')) {\n          setErrorMessage(error);\n        }\n      }, handleRecognitionEnd, 0 // Sin timeout - dejamos que el reconocimiento continúe hasta que haya resultado\n      );\n      console.log('Configuración de reconocimiento completada, iniciando...');\n    } catch (error) {\n      console.error('Error al iniciar el reconocimiento de voz:', error);\n      setIsListening(false);\n      setErrorMessage(`Error: ${error.message}`);\n    }\n  };\n\n  // Función para procesar la respuesta del usuario con NLP mejorado\n  const processResponse = async text => {\n    console.log('Procesando respuesta:', text);\n    if (!text || text.trim() === '') {\n      console.log('Respuesta vacía, volviendo a escuchar...');\n      setTimeout(() => startListening(), 1000);\n      return;\n    }\n    setTranscript(text);\n    try {\n      // Analizar el sentimiento general de la respuesta del usuario\n      const sentimentAnalysis = NLPService.analyzeSentiment(text);\n      console.log('Análisis de sentimiento:', sentimentAnalysis);\n      if (currentStep === 'name') {\n        console.log('Procesando nombre:', text);\n\n        // Usar el servicio de NLP avanzado para extraer el nombre\n        const intent = NLPService.analyzeIntent(text);\n\n        // Si la respuesta es una pregunta, manejarla apropiadamente\n        if (intent.intent === 'question') {\n          const supportiveResponse = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'supportive').map(r => r.text);\n          const response = supportiveResponse[Math.floor(Math.random() * supportiveResponse.length)];\n          await speakText('Disculpe, solo necesito saber su nombre para registrar sus respuestas. ¿Cómo se llama?');\n          setTimeout(() => startListening(), 1000);\n          return;\n        }\n\n        // Extraer el nombre usando el servicio NLP\n        let possibleName = NLPService.extractName(text);\n        console.log('Nombre extraído usando NLP:', possibleName);\n\n        // Si no pudimos extraer un nombre válido, usar un nombre genérico\n        if (!possibleName) {\n          possibleName = 'Estimado participante';\n        }\n\n        // Guardar el nombre y continuar\n        setUserName(possibleName);\n\n        // Elegir respuesta basada en el sentimiento detectado\n        let responsePhrase;\n        if (sentimentAnalysis.sentiment === 'positive') {\n          responsePhrase = '¡Encantado de conocerle, ' + possibleName + '! Vamos a comenzar con la primera pregunta.';\n        } else if (sentimentAnalysis.sentiment === 'negative') {\n          responsePhrase = 'Gracias, ' + possibleName + '. Vamos a iniciar la encuesta con la primera pregunta.';\n        } else {\n          responsePhrase = 'Muy bien, ' + possibleName + '. Comencemos con la primera pregunta.';\n        }\n\n        // Confirmar y seguir\n        await speakText(responsePhrase);\n\n        // Pasar a las preguntas con un retraso para asegurar la actualización de estado\n        setTimeout(async () => {\n          console.log('Pasando a las preguntas de la encuesta...');\n          await moveToQuestions();\n        }, 800);\n        return;\n      }\n      if (currentStep === 'questions') {\n        console.log('Procesando respuesta a pregunta:', currentQuestionIndex);\n        const currentQuestion = survey.questions[currentQuestionIndex];\n\n        // Procesar la respuesta usando el servicio NLP avanzado\n        const processedResponse = await NLPService.processResponse(text, currentQuestion.type);\n        console.log('Respuesta procesada con NLP:', processedResponse);\n        if (processedResponse !== null) {\n          // Respuesta válida\n          saveResponse(processedResponse);\n\n          // Seleccionar una respuesta adaptativa basada en el sentimiento del usuario\n          let responsePool;\n          if (sentimentAnalysis.sentiment === 'positive') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'positive');\n          } else if (sentimentAnalysis.sentiment === 'negative') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'supportive');\n          } else {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'neutral');\n          }\n\n          // Si no hay respuestas del tipo adecuado, usar cualquiera\n          if (responsePool.length === 0) {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments;\n          }\n\n          // Seleccionar respuesta adaptativa\n          const acknowledgment = responsePool[Math.floor(Math.random() * responsePool.length)].text;\n          await speakText(acknowledgment);\n\n          // Transición a siguiente pregunta o finalizar\n          if (currentQuestionIndex < survey.questions.length - 1) {\n            // Seleccionar transición según sentimiento\n            let transitionPool;\n            if (sentimentAnalysis.sentiment === 'positive') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'positive');\n            } else if (sentimentAnalysis.sentiment === 'negative') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'supportive');\n            } else {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'neutral');\n            }\n            if (transitionPool.length === 0) {\n              transitionPool = ADAPTIVE_PHRASES.transitions;\n            }\n            const transition = transitionPool[Math.floor(Math.random() * transitionPool.length)].text;\n            await speakText(transition);\n\n            // Incrementar el índice y pasar a la siguiente pregunta\n            setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n\n            // Esperar a que se actualice el estado antes de continuar\n            console.log('Avanzando a la siguiente pregunta...');\n\n            // Usar setTimeout para asegurar que el cambio de estado se complete\n            setTimeout(async () => {\n              console.log('Ejecutando speakCurrentQuestion desde setTimeout');\n              await speakCurrentQuestion();\n            }, 1000);\n          } else {\n            // Finalizar encuesta con un mensaje adaptativo basado en el sentimiento general\n            console.log('Terminando encuesta, enviando respuestas...');\n            await submitResponses();\n          }\n        } else {\n          // Respuesta inválida, elegir clarificación basada en sentimiento\n          console.log('Respuesta inválida, pidiendo aclaración...');\n          let clarificationPool;\n          if (sentimentAnalysis.sentiment === 'negative') {\n            // Si el usuario parece frustrado, usar tono de apoyo\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'supportive');\n          } else {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'neutral');\n          }\n          if (clarificationPool.length === 0) {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications;\n          }\n          const clarification = clarificationPool[Math.floor(Math.random() * clarificationPool.length)].text;\n          await speakText(clarification);\n\n          // Usar setTimeout para evitar problemas con promesas anidadas\n          setTimeout(async () => {\n            console.log('Reiniciando escucha después de aclaración');\n            await startListening();\n          }, 800);\n        }\n      }\n    } catch (error) {\n      console.error('Error durante el procesamiento de la respuesta:', error);\n      // Intentar recuperarse del error\n      setTimeout(async () => {\n        if (currentStep === 'name') {\n          await speakText('Lo siento, hubo un problema. Intentemos de nuevo. ¿Podría decirme su nombre?');\n          setTimeout(() => startListening(), 1000);\n        } else if (currentStep === 'questions') {\n          await speakCurrentQuestion();\n        }\n      }, 1500);\n    }\n  };\n\n  // Función para extraer un nombre de texto\n  const extractName = text => {\n    console.log('Extrayendo nombre de:', text);\n\n    // Si el texto está vacío o no es una cadena\n    if (!text || typeof text !== 'string') {\n      console.log('Texto vacío o no es cadena, usando nombre genérico');\n      return 'Estimado participante';\n    }\n\n    // Eliminar signos de puntuación y normalizar texto\n    const normalizedText = text.replace(/[.,;:¡!¿?]/g, '').trim();\n\n    // Frases comunes al indicar un nombre\n    const namePhrases = ['me llamo', 'mi nombre es', 'soy', 'yo soy', 'puedes llamarme', 'puede llamarme', 'llámame', 'llamame'];\n\n    // Buscar frases de presentación\n    let cleanedText = normalizedText;\n    for (const phrase of namePhrases) {\n      if (normalizedText.toLowerCase().includes(phrase)) {\n        // Extraer texto después de la frase de presentación\n        const parts = normalizedText.toLowerCase().split(phrase);\n        if (parts.length > 1 && parts[1].trim()) {\n          cleanedText = parts[1].trim();\n          console.log(`Frase de presentación '${phrase}' encontrada, texto limpio: '${cleanedText}'`);\n          break;\n        }\n      }\n    }\n\n    // Palabras comunes para ignorar al final\n    const commonWords = ['gracias', 'por favor', 'aquí', 'señor', 'señora', 'mucho gusto'];\n    for (const word of commonWords) {\n      if (cleanedText.toLowerCase().endsWith(word)) {\n        cleanedText = cleanedText.slice(0, -word.length).trim();\n      }\n    }\n\n    // Si el texto limpio está vacío, usar el original\n    if (!cleanedText) {\n      cleanedText = normalizedText;\n    }\n\n    // Obtener las palabras del texto\n    const words = cleanedText.split(/\\s+/);\n\n    // Si solo hay una palabra, asumimos que es el nombre\n    if (words.length === 1) {\n      const name = words[0];\n      console.log('Nombre extraído (una palabra):', name);\n      // Capitalizar primera letra\n      return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n    }\n\n    // Si hay más palabras, tomar hasta 3 palabras como nombre completo\n    const nameWords = words.slice(0, Math.min(3, words.length));\n    let extractedName = nameWords.join(' ');\n\n    // Capitalizar cada palabra\n    extractedName = extractedName.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    console.log('Nombre extraído (múltiples palabras):', extractedName);\n    return extractedName;\n  };\n\n  // Función para guardar respuesta y pasar a la siguiente pregunta\n  const saveResponse = value => {\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = {\n      value,\n      timestamp: new Date().toISOString(),\n      index: currentQuestionIndex\n    };\n    setResponses(updatedResponses);\n\n    // Verificar si hay más preguntas\n    if (currentQuestionIndex < survey.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Fin de la encuesta\n      setCurrentStep('thanks');\n    }\n  };\n\n  // Manejar clic en botón de micrófono\n  const handleMicrophoneClick = () => {\n    if (isListening) {\n      setIsListening(false);\n    } else {\n      startListening();\n    }\n  };\n\n  // Manejar clic en botones de opciones \n  const handleOptionClick = value => {\n    if (isListening) return;\n    processResponse(value);\n  };\n\n  // Solicitar permisos de micrófono\n  const requestMicrophonePermission = async () => {\n    try {\n      const permission = await checkMicrophonePermission();\n      setMicrophonePermission(permission);\n      if (permission) {\n        // Iniciar la encuesta si se conceden los permisos\n        setCurrentStep('welcome');\n      } else {\n        setErrorMessage('No se pudo obtener permiso para el micrófono. Por favor, permita el acceso en la configuración de su navegador.');\n      }\n    } catch (error) {\n      console.error('Error al solicitar permisos de micrófono:', error);\n      setErrorMessage('Error al solicitar permisos de micrófono.');\n    }\n  };\n\n  // Función centralizada para solicitar síntesis de voz\n  const speakText = async text => {\n    if (!text) return Promise.resolve();\n    console.log('Solicitando síntesis de voz para:', text);\n\n    // Evitar interrupción de síntesis en curso y garantizar una experiencia fluida\n    return new Promise(resolve => {\n      setVoiceText(text);\n      setIsSpeaking(true);\n\n      // Usar AudioService para hablar\n      AudioService.speakText(text,\n      // onStarted\n      () => {\n        console.log('Síntesis de voz iniciada para:', text);\n      },\n      // onEnded\n      () => {\n        console.log('Síntesis de voz completada para:', text);\n        setIsSpeaking(false);\n        if (speakEndCallback) {\n          speakEndCallback();\n          setSpeakEndCallback(null);\n        }\n        resolve();\n      },\n      // onError\n      error => {\n        console.error('Error en síntesis de voz:', error);\n        setIsSpeaking(false);\n        setErrorMessage(`Error en síntesis: ${error}`);\n        resolve();\n      });\n    });\n  };\n  useEffect(() => {\n    setStartTime(new Date());\n  }, []);\n\n  // Función para repetir la pregunta actual\n  const repeatQuestion = async () => {\n    try {\n      if (currentStep === 'questions' && survey && survey.questions) {\n        // Detener cualquier síntesis o escucha en curso\n        if (isListening) {\n          // Detener escucha si está activa\n          setIsListening(false);\n        }\n        const currentQuestion = survey.questions[currentQuestionIndex];\n        if (currentQuestion) {\n          // Construir el mensaje de la pregunta\n          const questionText = `La pregunta es: ${currentQuestion.text}`;\n\n          // Hablar la pregunta\n          await speakText(questionText);\n\n          // Esperar un momento antes de comenzar a escuchar\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          // Iniciar escucha para la respuesta\n          startListening();\n        }\n      }\n    } catch (error) {\n      console.error('Error al repetir la pregunta:', error);\n      setErrorMessage('Ocurrió un error al repetir la pregunta.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-5xl mx-auto p-4\",\n    children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center my-12\",\n      children: [/*#__PURE__*/_jsxDEV(FaSpinner, {\n        className: \"animate-spin h-12 w-12 text-blue-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 914,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sr-only\",\n        children: \"Cargando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 915,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 913,\n      columnNumber: 9\n    }, this) : errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded my-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        className: \"mt-2 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\",\n        children: \"Reintentar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 9\n    }, this) : currentStep === 'thanks' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center my-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-gray-800 mb-4\",\n        children: \"\\xA1Gracias por completar la encuesta!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 929,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg text-gray-600 mb-8\",\n        children: \"Sus respuestas han sido registradas correctamente.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/surveys'),\n        className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n        children: \"Volver al inicio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 931,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 928,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow-md rounded-lg p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold text-center mb-6\",\n        children: survey === null || survey === void 0 ? void 0 : survey.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 940,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 p-2 bg-gray-100 rounded\",\n        children: [currentStep === 'initial' && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Iniciando encuesta...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 43\n        }, this), currentStep === 'name' && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Por favor, diga su nombre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 945,\n          columnNumber: 40\n        }, this), currentStep === 'questions' && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Pregunta \", currentQuestionIndex + 1, \" de \", (survey === null || survey === void 0 ? void 0 : (_survey$questions2 = survey.questions) === null || _survey$questions2 === void 0 ? void 0 : _survey$questions2.length) || 0]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 947,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 943,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-6 p-4 bg-blue-50 rounded-lg border border-blue-200\",\n        children: currentStep === 'name' ? /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold text-blue-800\",\n          children: \"Por favor, diga su nombre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 956,\n          columnNumber: 15\n        }, this) : currentStep === 'questions' && survey !== null && survey !== void 0 && survey.questions ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold text-blue-800\",\n            children: (_survey$questions$cur = survey.questions[currentQuestionIndex]) === null || _survey$questions$cur === void 0 ? void 0 : _survey$questions$cur.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 961,\n            columnNumber: 17\n          }, this), ((_survey$questions$cur2 = survey.questions[currentQuestionIndex]) === null || _survey$questions$cur2 === void 0 ? void 0 : _survey$questions$cur2.options) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4 grid grid-cols-1 md:grid-cols-2 gap-3\",\n            children: survey.questions[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleOptionClick(option),\n              className: \"bg-white border border-blue-300 p-3 rounded hover:bg-blue-100 transition\",\n              children: option\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 967,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 965,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 960,\n          columnNumber: 15\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 954,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-6 flex justify-center space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => startListening(),\n          disabled: isSpeaking || isListening,\n          className: `p-4 rounded-full ${isListening ? 'bg-red-500 text-white animate-pulse' : 'bg-blue-500 text-white hover:bg-blue-600'}`,\n          title: \"Empezar a escuchar\",\n          children: [/*#__PURE__*/_jsxDEV(FaMicrophone, {\n            className: \"h-6 w-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 991,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sr-only\",\n            children: \"Escuchar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 992,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 983,\n          columnNumber: 13\n        }, this), transcript && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => processResponse(transcript),\n          className: \"p-4 rounded-full bg-green-500 text-white hover:bg-green-600\",\n          title: \"Confirmar respuesta\",\n          children: [/*#__PURE__*/_jsxDEV(FaCheckCircle, {\n            className: \"h-6 w-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1001,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sr-only\",\n            children: \"Confirmar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1002,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 996,\n          columnNumber: 15\n        }, this), currentStep === 'questions' && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => repeatQuestion(),\n          className: \"p-4 rounded-full bg-yellow-500 text-white hover:bg-yellow-600\",\n          title: \"Repetir pregunta\",\n          children: [/*#__PURE__*/_jsxDEV(FaVolumeUp, {\n            className: \"h-6 w-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1012,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sr-only\",\n            children: \"Repetir\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1013,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1007,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 982,\n        columnNumber: 11\n      }, this), transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-4 p-3 bg-gray-100 rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-semibold\",\n            children: \"Su respuesta:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1022,\n            columnNumber: 17\n          }, this), \" \", transcript]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1021,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-2 text-center\",\n        children: [isListening && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-blue-500 animate-pulse flex items-center justify-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mr-2\",\n            children: \"Escuchando\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1031,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"flex space-x-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"w-2 h-2 bg-blue-500 rounded-full animate-bounce\",\n              style: {\n                animationDelay: '0ms'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1033,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"w-2 h-2 bg-blue-500 rounded-full animate-bounce\",\n              style: {\n                animationDelay: '150ms'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1034,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"w-2 h-2 bg-blue-500 rounded-full animate-bounce\",\n              style: {\n                animationDelay: '300ms'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1035,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1032,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 15\n        }, this), isSpeaking && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-green-500 animate-pulse flex items-center justify-center\",\n          children: [/*#__PURE__*/_jsxDEV(FaVolumeUp, {\n            className: \"mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1041,\n            columnNumber: 17\n          }, this), \"Hablando...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1040,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-10 text-sm text-gray-600 bg-gray-50 p-4 rounded\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-bold mb-2\",\n          children: \"Instrucciones:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1049,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-disc pl-5 space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Hable con claridad para que el sistema pueda entenderle correctamente\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1051,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Puede usar los botones de control para una experiencia m\\xE1s fluida\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1052,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Si tiene problemas, haga clic en el bot\\xF3n del micr\\xF3fono para reintentar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1048,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 939,\n      columnNumber: 9\n    }, this), isSpeaking && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-0 left-0 right-0 bg-green-100 text-green-800 p-2 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(FaVolumeUp, {\n        className: \"inline-block mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1062,\n        columnNumber: 11\n      }, this), \"Hablando...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1061,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 911,\n    columnNumber: 5\n  }, this);\n};\n_s(TakeSurvey, \"aNfieoFh9r4gc8LbHH4DeERL8xc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = TakeSurvey;\nexport default TakeSurvey;\nvar _c;\n$RefreshReg$(_c, \"TakeSurvey\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","isSpeechRecognitionSupported","listenForSpeech","checkMicrophonePermission","SurveyService","ResponseService","FaSpinner","FaMicrophone","FaVolumeUp","FaCheckCircle","FaTimesCircle","NLPService","AudioService","jsxDEV","_jsxDEV","TakeSurvey","_s","_survey$questions2","_survey$questions$cur","_survey$questions$cur2","surveyId","navigate","survey","setSurvey","loading","setLoading","currentStep","setCurrentStep","currentQuestionIndex","setCurrentQuestionIndex","responses","setResponses","userName","setUserName","transcript","setTranscript","isSpeaking","setIsSpeaking","isListening","setIsListening","browserSupported","setBrowserSupported","microphonePermission","setMicrophonePermission","showThankYouMessage","setShowThankYouMessage","voiceText","setVoiceText","speakEndCallback","setSpeakEndCallback","startTime","setStartTime","errorMessage","setErrorMessage","ADAPTIVE_PHRASES","acknowledgments","text","tone","transitions","clarifications","greetings","farewells","checkCompatibility","speechRecognitionSupported","speechSynthesisSupported","hasMicrophonePermission","fetchSurvey","surveyData","getPublicSurvey","Date","questions","Array","length","fill","map","value","timestamp","index","required_clarification","error","console","startConversation","log","hour","getHours","greeting","welcomeMessage","title","description","Promise","resolve","checkInterval","setInterval","clearInterval","speakText","setTimeout","startListening","moveToQuestions","speakCurrentQuestion","_survey$questions","questionsLength","question","questionText","type","onQuestionSpeakEnd","onThankYouSpeakEnd","submitResponses","endTime","durationMs","durationMinutes","Math","round","sentimentScores","r","sentiment","analyzeSentiment","score","filter","averageSentiment","sentimentLabel","reduce","sum","formattedResponses","questionId","_id","response","responseTime","metadata","completionTime","overallSentiment","sentimentScore","interactionQuality","calculateInteractionQuality","submitResponse","surveyTitle","respondentName","farewellPool","f","thankYouMessage","floor","random","avgResponseTime","clarificationCount","min","max","initSpeechSystem","window","speechSynthesis","loadVoices","voices","getVoices","spanishVoices","v","lang","includes","name","join","warn","onvoiceschanged","undefined","checkSpeaking","MAX_RETRY_ATTEMPTS","attemptCount","recognitionInstance","handleRecognitionResult","result","stop","processResponse","handleRecognitionEnd","clarificationMessage","saveResponse","message","trim","sentimentAnalysis","intent","analyzeIntent","supportiveResponse","possibleName","extractName","responsePhrase","currentQuestion","processedResponse","responsePool","acknowledgment","transitionPool","transition","prevIndex","clarificationPool","clarification","normalizedText","replace","namePhrases","cleanedText","phrase","toLowerCase","parts","split","commonWords","word","endsWith","slice","words","charAt","toUpperCase","nameWords","extractedName","updatedResponses","toISOString","handleMicrophoneClick","handleOptionClick","requestMicrophonePermission","permission","repeatQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","location","reload","options","option","disabled","style","animationDelay","_c","$RefreshReg$"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/pages/TakeSurvey.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { \n  isSpeechRecognitionSupported,\n  listenForSpeech,\n  checkMicrophonePermission\n} from '../utils/voiceSurveyAPI';\nimport { SurveyService, ResponseService } from '../services/apiService';\nimport { FaSpinner, FaMicrophone, FaVolumeUp, FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport NLPService from '../services/nlpService';\nimport AudioService from '../services/audioService';\n\nconst TakeSurvey = () => {\n  const { surveyId } = useParams();\n  const navigate = useNavigate();\n  const [survey, setSurvey] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [currentStep, setCurrentStep] = useState('initial'); // 'initial', 'name', 'questions', 'thanks'\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [userName, setUserName] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [browserSupported, setBrowserSupported] = useState(true);\n  const [microphonePermission, setMicrophonePermission] = useState(null);\n  const [showThankYouMessage, setShowThankYouMessage] = useState(false);\n  const [voiceText, setVoiceText] = useState('');\n  const [speakEndCallback, setSpeakEndCallback] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Conjunto de frases adaptativas clasificadas por tono para mejorar la naturalidad\n  const ADAPTIVE_PHRASES = {\n    acknowledgments: [\n      { text: 'Gracias por su respuesta.', tone: 'neutral' },\n      { text: '¡Excelente! He registrado su respuesta.', tone: 'positive' },\n      { text: 'Perfecto, continuemos.', tone: 'positive' },\n      { text: 'Entendido, muchas gracias.', tone: 'neutral' },\n      { text: 'He anotado su respuesta.', tone: 'neutral' },\n      { text: '¡Genial! Avancemos.', tone: 'positive' },\n      { text: 'Comprendo, continuamos.', tone: 'supportive' },\n      { text: 'Gracias por compartir su opinión.', tone: 'supportive' }\n    ],\n    transitions: [\n      { text: 'Pasemos a la siguiente pregunta.', tone: 'neutral' },\n      { text: 'Continuemos con la siguiente pregunta.', tone: 'neutral' },\n      { text: 'Ahora, la siguiente pregunta.', tone: 'neutral' },\n      { text: 'Avancemos a la siguiente pregunta.', tone: 'positive' },\n      { text: 'Me gustaría preguntarle ahora sobre...', tone: 'supportive' }\n    ],\n    clarifications: [\n      { text: 'Disculpe, no he entendido su respuesta. ¿Podría repetirla?', tone: 'neutral' },\n      { text: 'Parece que no pude entender correctamente. ¿Podría decirlo de otra manera?', tone: 'supportive' },\n      { text: 'Necesito una respuesta más clara. ¿Podría intentarlo nuevamente?', tone: 'neutral' },\n      { text: 'No capté bien su respuesta. ¿Podría hablar un poco más claro?', tone: 'supportive' }\n    ],\n    greetings: [\n      { text: 'Bienvenido a nuestra encuesta. Apreciamos mucho su participación.', tone: 'positive' },\n      { text: 'Gracias por participar en esta encuesta. Sus opiniones son muy importantes.', tone: 'neutral' },\n      { text: 'Le damos la bienvenida a esta encuesta. Valoramos su tiempo y sus respuestas.', tone: 'supportive' }\n    ],\n    farewells: [\n      { text: '¡Muchas gracias por completar la encuesta! Sus respuestas son muy valiosas para nosotros.', tone: 'positive' },\n      { text: 'La encuesta ha finalizado. Agradecemos su participación y su tiempo.', tone: 'neutral' },\n      { text: 'Hemos llegado al final de la encuesta. Realmente apreciamos sus opiniones.', tone: 'supportive' }\n    ]\n  };\n\n  // Comprobar compatibilidad del navegador y permisos\n  useEffect(() => {\n    const checkCompatibility = async () => {\n      // Verificar si el navegador soporta reconocimiento de voz\n      const speechRecognitionSupported = isSpeechRecognitionSupported();\n      const speechSynthesisSupported = true; // isSpeechSynthesisSupported();\n\n      if (!speechRecognitionSupported || !speechSynthesisSupported) {\n        setBrowserSupported(false);\n        setErrorMessage('Su navegador no soporta las tecnologías de voz necesarias para esta encuesta. Por favor, use Chrome, Edge o Safari.');\n        return;\n      }\n\n      // Verificar permisos de micrófono\n      const hasMicrophonePermission = await checkMicrophonePermission();\n      setMicrophonePermission(hasMicrophonePermission);\n\n      if (!hasMicrophonePermission) {\n        setErrorMessage('Necesitamos permiso para usar su micrófono. Por favor, permita el acceso cuando se le solicite.');\n      }\n    };\n\n    checkCompatibility();\n  }, []);\n\n  // Inicialización de la encuesta\n  useEffect(() => {\n    const fetchSurvey = async () => {\n      try {\n        // Usar getPublicSurvey en lugar de getSurveyById que no existe\n        const surveyData = await SurveyService.getPublicSurvey(surveyId);\n        setSurvey(surveyData);\n        setLoading(false);\n        // Registrar el tiempo de inicio de la encuesta\n        setStartTime(new Date());\n        \n        // Inicializar array de respuestas vacío\n        if (surveyData && surveyData.questions) {\n          setResponses(Array(surveyData.questions.length).fill(null).map(() => ({ \n            value: '', \n            timestamp: null,\n            index: 0,\n            required_clarification: false\n          })));\n        }\n      } catch (error) {\n        console.error('Error al obtener encuesta:', error);\n        setErrorMessage('No se pudo cargar la encuesta. Por favor, inténtelo de nuevo más tarde.');\n        setLoading(false);\n      }\n    };\n\n    fetchSurvey();\n  }, [surveyId]);\n\n  // Iniciar conversación automáticamente cuando la encuesta está cargada\n  useEffect(() => {\n    if (survey && currentStep === 'initial') {\n      startConversation();\n    }\n  }, [survey, currentStep]);\n\n  // Iniciar la conversación automática\n  const startConversation = async () => {\n    console.log('Función startConversation ejecutada');\n    console.log('Estado actual:', survey);\n    \n    try {\n      // Obtener la hora del día para personalizar el saludo\n      const hour = new Date().getHours();\n      let greeting;\n      \n      if (hour < 12) {\n        greeting = 'Buenos días';\n      } else if (hour < 18) {\n        greeting = 'Buenas tardes';\n      } else {\n        greeting = 'Buenas noches';\n      }\n      \n      // Construir un mensaje de bienvenida completo y natural\n      const welcomeMessage = `${greeting}. Bienvenido a nuestra encuesta. Apreciamos mucho su participación. Esta encuesta es sobre: ${survey.title}. ${survey.description || ''} Para comenzar, ¿podría decirme su nombre por favor?`;\n      \n      console.log('Enviando mensaje de bienvenida con solicitud de nombre:', welcomeMessage);\n      \n      // Cambiar el estado para mostrar que estamos en el paso de solicitar nombre\n      setCurrentStep('name');\n      \n      // Primero asegurarnos de que no estamos hablando\n      if (isSpeaking) {\n        await new Promise(resolve => {\n          const checkInterval = setInterval(() => {\n            if (!isSpeaking) {\n              clearInterval(checkInterval);\n              resolve();\n            }\n          }, 100);\n        });\n      }\n      \n      // Hablar el mensaje de bienvenida con solicitud de nombre\n      await speakText(welcomeMessage);\n      \n      console.log('Mensaje de bienvenida completado');\n      \n      // Esperar un momento antes de comenzar a escuchar\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      console.log('Iniciando reconocimiento de voz para captar nombre...');\n      startListening();\n    } catch (error) {\n      console.error('Error al iniciar conversación:', error);\n      setErrorMessage('Ocurrió un error al iniciar la encuesta. Por favor, recargue la página e intente nuevamente.');\n    }\n  };\n\n  // Mover a la sección de preguntas\n  const moveToQuestions = async () => {\n    console.log('Moviendo a la sección de preguntas...');\n    setCurrentStep('questions');\n    setCurrentQuestionIndex(0);\n    // Pequeña pausa para asegurar que los estados se actualicen\n    await new Promise(resolve => setTimeout(resolve, 500));\n    await speakCurrentQuestion();\n  };\n\n  // Hablar la pregunta actual\n  const speakCurrentQuestion = async () => {\n    console.log('Hablando pregunta actual:', currentQuestionIndex);\n    if (!survey || currentQuestionIndex >= survey.questions.length) {\n      console.error('No hay más preguntas o índice inválido:', {currentQuestionIndex, questionsLength: survey?.questions?.length});\n      return;\n    }\n    \n    const question = survey.questions[currentQuestionIndex];\n    console.log('Pregunta a formular:', question);\n    let questionText = question.text;\n    \n    // Añadir instrucciones específicas según tipo de pregunta\n    if (question.type === 'rating') {\n      questionText += ' Por favor, responda con un número del 1 al 5, donde 1 es lo más bajo y 5 lo más alto.';\n    } else if (question.type === 'yesno') {\n      questionText += ' Por favor, responda sí o no.';\n    }\n    \n    // Hablar la pregunta\n    setIsSpeaking(true);\n    try {\n      await speakText(questionText);\n      console.log('Pregunta terminada de hablar, iniciando escucha...');\n      setIsSpeaking(false);\n      // Pequeña pausa antes de empezar a escuchar\n      setTimeout(async () => {\n        console.log('Iniciando escucha desde setTimeout después de hablar pregunta');\n        await startListening();\n      }, 800);\n    } catch (error) {\n      console.error('Error al hablar la pregunta:', error);\n      setIsSpeaking(false);\n      // Reintentar en caso de error\n      setTimeout(() => speakCurrentQuestion(), 1500);\n    }\n  };\n\n  // Función para cuando termina de hablar la pregunta\n  const onQuestionSpeakEnd = () => {\n    setTimeout(startListening, 500);\n  };\n\n  // Función para cuando termina de hablar el mensaje de agradecimiento\n  const onThankYouSpeakEnd = async () => {\n    try {\n      // Enviar respuestas al servidor\n      await submitResponses();\n    } catch (error) {\n      console.error('Error submitting responses:', error);\n    }\n  };\n\n  // Función para enviar respuestas al servidor\n  const submitResponses = async () => {\n    try {\n      console.log('Enviando respuestas al servidor:', responses);\n      \n      // Calcular la duración total de la encuesta\n      const endTime = new Date();\n      const durationMs = startTime ? endTime - startTime : 0;\n      const durationMinutes = Math.round(durationMs / 60000 * 10) / 10; // Duración en minutos con 1 decimal\n      \n      // Calcular el sentimiento general de las respuestas\n      const sentimentScores = responses.map(r => {\n        // Solo analizar respuestas abiertas, no calificaciones numéricas o sí/no\n        if (typeof r.value === 'string' && r.value.length > 3) {\n          const sentiment = NLPService.analyzeSentiment(r.value);\n          return sentiment.score;\n        }\n        return null;\n      }).filter(score => score !== null);\n      \n      // Calcular el sentimiento promedio si hay suficientes datos\n      let averageSentiment = 0;\n      let sentimentLabel = 'neutral';\n      \n      if (sentimentScores.length > 0) {\n        averageSentiment = sentimentScores.reduce((sum, score) => sum + score, 0) / sentimentScores.length;\n        \n        if (averageSentiment > 0.2) {\n          sentimentLabel = 'positive';\n        } else if (averageSentiment < -0.2) {\n          sentimentLabel = 'negative';\n        }\n      }\n      \n      // Incluir metadatos de IA con las respuestas\n      const formattedResponses = {\n        responses: responses.map(r => ({\n          questionId: survey.questions[r.index]._id,\n          questionText: survey.questions[r.index].text,\n          response: r.value,\n          responseTime: r.timestamp\n        })),\n        metadata: {\n          completionTime: durationMinutes,\n          overallSentiment: sentimentLabel,\n          sentimentScore: averageSentiment,\n          interactionQuality: calculateInteractionQuality()\n        }\n      };\n      \n      // Enviar respuestas con metadatos de IA\n      await ResponseService.submitResponse({\n        surveyId: survey._id,\n        surveyTitle: survey.title,\n        respondentName: userName || 'Anónimo',\n        responses: formattedResponses\n      });\n      \n      // Seleccionar mensaje de despedida basado en el sentimiento general\n      let farewellPool;\n      if (sentimentLabel === 'positive') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'positive');\n      } else if (sentimentLabel === 'negative') {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'supportive');\n      } else {\n        farewellPool = ADAPTIVE_PHRASES.farewells.filter(f => f.tone === 'neutral');\n      }\n      \n      // Si no hay mensajes del tipo adecuado, usar cualquiera\n      if (farewellPool.length === 0) {\n        farewellPool = ADAPTIVE_PHRASES.farewells;\n      }\n      \n      const thankYouMessage = farewellPool[Math.floor(Math.random() * farewellPool.length)].text;\n      \n      // Cambiar a pantalla de agradecimiento\n      setCurrentStep('thanks');\n      \n      // Hablar mensaje de agradecimiento personalizado\n      await speakText(thankYouMessage);\n      setShowThankYouMessage(true);\n      \n    } catch (error) {\n      console.error('Error al enviar respuestas:', error);\n      setErrorMessage('Hubo un problema al enviar sus respuestas. Por favor, inténtelo de nuevo más tarde.');\n    }\n  };\n  \n  // Calcular una puntuación de calidad de interacción basada en métricas de la encuesta\n  const calculateInteractionQuality = () => {\n    // Si no hay respuestas, calidad desconocida\n    if (!responses || responses.length === 0) return 'unknown';\n    \n    // Verificar tiempos de respuesta\n    const avgResponseTime = responses.reduce((sum, r) => sum + (r.timestamp ? new Date(r.timestamp) - new Date(startTime) : 0), 0) / responses.length;\n    \n    // Verificar cantidad de repeticiones/clarificaciones (basado en logs)\n    const clarificationCount = responses.filter(r => r.required_clarification).length;\n    \n    // Calcular puntaje de 1-10\n    let score = 10;\n    \n    // Penalizar tiempos de respuesta largos (más de 15 segundos por pregunta en promedio)\n    if (avgResponseTime > 15000) {\n      score -= Math.min(3, (avgResponseTime - 15000) / 5000);\n    }\n    \n    // Penalizar por cada clarificación requerida\n    score -= clarificationCount * 1.5;\n    \n    // Limitar el rango a 1-10\n    score = Math.max(1, Math.min(10, score));\n    \n    // Clasificar la calidad\n    if (score >= 8) return 'excellent';\n    if (score >= 6) return 'good';\n    if (score >= 4) return 'fair';\n    return 'poor';\n  };\n\n  // Inicializar el sistema de audio al cargar la página\n  useEffect(() => {\n    AudioService.initSpeechSystem();\n    checkMicrophonePermission();\n  }, []);\n\n  // Pre-cargar las voces del navegador\n  useEffect(() => {\n    // Pre-cargar voces al inicio para evitar problemas\n    if (window.speechSynthesis) {\n      console.log('Precargando voces del sintetizador...');\n      \n      // Asegurarse de que las voces estén cargadas\n      const loadVoices = () => {\n        const voices = window.speechSynthesis.getVoices();\n        console.log('Voces disponibles:', voices.length);\n        \n        // Mostrar voces disponibles en español\n        const spanishVoices = voices.filter(v => v.lang.includes('es'));\n        if (spanishVoices.length > 0) {\n          console.log('Voces en español encontradas:', spanishVoices.map(v => v.name).join(', '));\n        } else if (voices.length > 0) {\n          console.log('No se encontraron voces en español. Voces disponibles:', voices.map(v => v.name).join(', '));\n        } else {\n          console.warn('No se encontraron voces disponibles');\n        }\n      };\n      \n      // Chrome requiere este evento\n      if (window.speechSynthesis.onvoiceschanged !== undefined) {\n        window.speechSynthesis.onvoiceschanged = loadVoices;\n      }\n      \n      // Intentar cargar voces inmediatamente también\n      loadVoices();\n    }\n  }, []);\n\n  // Función para iniciar escucha automáticamente\n  const startListening = async () => {\n    try {\n      console.log('Iniciando escucha...');\n      \n      // Verificar soporte y permisos antes de continuar\n      if (!browserSupported) {\n        setErrorMessage('Su navegador no es compatible con el reconocimiento de voz');\n        return;\n      }\n      \n      console.log('Activando el reconocimiento de voz...');\n      setIsListening(true);\n      setTranscript('');\n      \n      // Esperar a que termine cualquier síntesis de voz en curso\n      if (isSpeaking) {\n        console.log('Esperando que termine la síntesis de voz...');\n        await new Promise(resolve => {\n          const checkSpeaking = setInterval(() => {\n            if (!isSpeaking) {\n              clearInterval(checkSpeaking);\n              resolve();\n            }\n          }, 100);\n        });\n        \n        // Añadir una pausa de 1 segundo después de que termine de hablar\n        // para dar tiempo al usuario de procesar lo que escuchó\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n      \n      console.log('Configurando listenForSpeech...');\n      \n      // Número máximo de intentos antes de pasar a la siguiente pregunta\n      const MAX_RETRY_ATTEMPTS = 3;\n      \n      // Crear un estado local de intentos para evitar problemas con closures\n      let attemptCount = 0;\n      \n      // Para guardar la instancia de reconocimiento\n      let recognitionInstance = null;\n      \n      // Función para manejar el resultado del reconocimiento\n      const handleRecognitionResult = (result) => {\n        console.log('Reconocimiento exitoso:', result);\n        setTranscript(result.transcript);\n        setIsListening(false);\n        \n        if (recognitionInstance) {\n          recognitionInstance.stop();\n        }\n        \n        // Procesar la respuesta recibida\n        processResponse(result.transcript);\n      };\n      \n      // Función para manejar el fin del reconocimiento\n      const handleRecognitionEnd = async () => {\n        // Si no hay transcript, es porque no se detectó habla\n        if (!transcript) {\n          attemptCount++;\n          console.log(`Intento ${attemptCount}/${MAX_RETRY_ATTEMPTS} sin respuesta detectada`);\n          \n          // Seleccionar mensaje de clarificación según el número de intento\n          let clarificationMessage;\n          if (attemptCount === 1) {\n            clarificationMessage = 'No capté bien su respuesta. ¿Podría hablar un poco más claro?';\n          } else if (attemptCount === 2) {\n            clarificationMessage = 'Necesito una respuesta más clara. ¿Podría intentarlo nuevamente?';\n          } else {\n            clarificationMessage = 'Parece que no pude entender correctamente. ¿Podría decirlo de otra manera?';\n          }\n          \n          // Hablar mensaje de clarificación\n          await speakText(clarificationMessage);\n          \n          // Si aún no alcanzamos el máximo de intentos, intentar de nuevo\n          if (attemptCount < MAX_RETRY_ATTEMPTS) {\n            // Iniciar un nuevo reconocimiento después de una pausa\n            setTimeout(() => {\n              // Crear una nueva instancia de reconocimiento\n              recognitionInstance = listenForSpeech(\n                handleRecognitionResult,\n                (error) => {\n                  console.error('Error en reconocimiento de voz:', error);\n                  // No mostrar errores de no-speech al usuario\n                  if (!error.includes('no-speech')) {\n                    setErrorMessage(error);\n                  }\n                },\n                handleRecognitionEnd,\n                0 // Sin timeout\n              );\n            }, 500);\n          } else {\n            // Si alcanzamos el máximo de intentos, pasar a la siguiente pregunta\n            if (currentStep === 'name') {\n              // Si estamos en el paso del nombre, usar 'Anónimo'\n              setUserName('Anónimo');\n              await speakText('Continuaremos sin registrar su nombre.');\n              moveToQuestions();\n            } else if (currentStep === 'questions') {\n              // Si estamos en preguntas, guardar respuesta como 'No responde'\n              saveResponse('No responde');\n            }\n          }\n        }\n      };\n      \n      // Configurar reconocimiento con callbacks\n      recognitionInstance = listenForSpeech(\n        handleRecognitionResult,\n        (error) => {\n          console.error('Error en reconocimiento de voz:', error);\n          // No mostrar errores de no-speech al usuario\n          if (!error.includes('no-speech')) {\n            setErrorMessage(error);\n          }\n        },\n        handleRecognitionEnd,\n        0 // Sin timeout - dejamos que el reconocimiento continúe hasta que haya resultado\n      );\n      \n      console.log('Configuración de reconocimiento completada, iniciando...');\n      \n    } catch (error) {\n      console.error('Error al iniciar el reconocimiento de voz:', error);\n      setIsListening(false);\n      setErrorMessage(`Error: ${error.message}`);\n    }\n  };\n\n  // Función para procesar la respuesta del usuario con NLP mejorado\n  const processResponse = async (text) => {\n    console.log('Procesando respuesta:', text);\n    if (!text || text.trim() === '') {\n      console.log('Respuesta vacía, volviendo a escuchar...');\n      setTimeout(() => startListening(), 1000);\n      return;\n    }\n    \n    setTranscript(text);\n    \n    try {\n      // Analizar el sentimiento general de la respuesta del usuario\n      const sentimentAnalysis = NLPService.analyzeSentiment(text);\n      console.log('Análisis de sentimiento:', sentimentAnalysis);\n      \n      if (currentStep === 'name') {\n        console.log('Procesando nombre:', text);\n        \n        // Usar el servicio de NLP avanzado para extraer el nombre\n        const intent = NLPService.analyzeIntent(text);\n        \n        // Si la respuesta es una pregunta, manejarla apropiadamente\n        if (intent.intent === 'question') {\n          const supportiveResponse = ADAPTIVE_PHRASES.clarifications\n            .filter(r => r.tone === 'supportive')\n            .map(r => r.text);\n          \n          const response = supportiveResponse[Math.floor(Math.random() * supportiveResponse.length)];\n          await speakText('Disculpe, solo necesito saber su nombre para registrar sus respuestas. ¿Cómo se llama?');\n          setTimeout(() => startListening(), 1000);\n          return;\n        }\n        \n        // Extraer el nombre usando el servicio NLP\n        let possibleName = NLPService.extractName(text);\n        console.log('Nombre extraído usando NLP:', possibleName);\n        \n        // Si no pudimos extraer un nombre válido, usar un nombre genérico\n        if (!possibleName) {\n          possibleName = 'Estimado participante';\n        }\n        \n        // Guardar el nombre y continuar\n        setUserName(possibleName);\n        \n        // Elegir respuesta basada en el sentimiento detectado\n        let responsePhrase;\n        if (sentimentAnalysis.sentiment === 'positive') {\n          responsePhrase = '¡Encantado de conocerle, ' + possibleName + '! Vamos a comenzar con la primera pregunta.';\n        } else if (sentimentAnalysis.sentiment === 'negative') {\n          responsePhrase = 'Gracias, ' + possibleName + '. Vamos a iniciar la encuesta con la primera pregunta.';\n        } else {\n          responsePhrase = 'Muy bien, ' + possibleName + '. Comencemos con la primera pregunta.';\n        }\n        \n        // Confirmar y seguir\n        await speakText(responsePhrase);\n        \n        // Pasar a las preguntas con un retraso para asegurar la actualización de estado\n        setTimeout(async () => {\n          console.log('Pasando a las preguntas de la encuesta...');\n          await moveToQuestions();\n        }, 800);\n        \n        return;\n      }\n      \n      if (currentStep === 'questions') {\n        console.log('Procesando respuesta a pregunta:', currentQuestionIndex);\n        const currentQuestion = survey.questions[currentQuestionIndex];\n        \n        // Procesar la respuesta usando el servicio NLP avanzado\n        const processedResponse = await NLPService.processResponse(text, currentQuestion.type);\n        console.log('Respuesta procesada con NLP:', processedResponse);\n        \n        if (processedResponse !== null) {\n          // Respuesta válida\n          saveResponse(processedResponse);\n          \n          // Seleccionar una respuesta adaptativa basada en el sentimiento del usuario\n          let responsePool;\n          if (sentimentAnalysis.sentiment === 'positive') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'positive');\n          } else if (sentimentAnalysis.sentiment === 'negative') {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'supportive');\n          } else {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments.filter(r => r.tone === 'neutral');\n          }\n          \n          // Si no hay respuestas del tipo adecuado, usar cualquiera\n          if (responsePool.length === 0) {\n            responsePool = ADAPTIVE_PHRASES.acknowledgments;\n          }\n          \n          // Seleccionar respuesta adaptativa\n          const acknowledgment = responsePool[Math.floor(Math.random() * responsePool.length)].text;\n          await speakText(acknowledgment);\n          \n          // Transición a siguiente pregunta o finalizar\n          if (currentQuestionIndex < survey.questions.length - 1) {\n            // Seleccionar transición según sentimiento\n            let transitionPool;\n            if (sentimentAnalysis.sentiment === 'positive') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'positive');\n            } else if (sentimentAnalysis.sentiment === 'negative') {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'supportive');\n            } else {\n              transitionPool = ADAPTIVE_PHRASES.transitions.filter(r => r.tone === 'neutral');\n            }\n            \n            if (transitionPool.length === 0) {\n              transitionPool = ADAPTIVE_PHRASES.transitions;\n            }\n            \n            const transition = transitionPool[Math.floor(Math.random() * transitionPool.length)].text;\n            await speakText(transition);\n            \n            // Incrementar el índice y pasar a la siguiente pregunta\n            setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n            \n            // Esperar a que se actualice el estado antes de continuar\n            console.log('Avanzando a la siguiente pregunta...');\n            \n            // Usar setTimeout para asegurar que el cambio de estado se complete\n            setTimeout(async () => {\n              console.log('Ejecutando speakCurrentQuestion desde setTimeout');\n              await speakCurrentQuestion();\n            }, 1000);\n          } else {\n            // Finalizar encuesta con un mensaje adaptativo basado en el sentimiento general\n            console.log('Terminando encuesta, enviando respuestas...');\n            await submitResponses();\n          }\n        } else {\n          // Respuesta inválida, elegir clarificación basada en sentimiento\n          console.log('Respuesta inválida, pidiendo aclaración...');\n          \n          let clarificationPool;\n          if (sentimentAnalysis.sentiment === 'negative') {\n            // Si el usuario parece frustrado, usar tono de apoyo\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'supportive');\n          } else {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications.filter(r => r.tone === 'neutral');\n          }\n          \n          if (clarificationPool.length === 0) {\n            clarificationPool = ADAPTIVE_PHRASES.clarifications;\n          }\n          \n          const clarification = clarificationPool[Math.floor(Math.random() * clarificationPool.length)].text;\n          await speakText(clarification);\n          \n          // Usar setTimeout para evitar problemas con promesas anidadas\n          setTimeout(async () => {\n            console.log('Reiniciando escucha después de aclaración');\n            await startListening();\n          }, 800);\n        }\n      }\n    } catch (error) {\n      console.error('Error durante el procesamiento de la respuesta:', error);\n      // Intentar recuperarse del error\n      setTimeout(async () => {\n        if (currentStep === 'name') {\n          await speakText('Lo siento, hubo un problema. Intentemos de nuevo. ¿Podría decirme su nombre?');\n          setTimeout(() => startListening(), 1000);\n        } else if (currentStep === 'questions') {\n          await speakCurrentQuestion();\n        }\n      }, 1500);\n    }\n  };\n\n  // Función para extraer un nombre de texto\n  const extractName = (text) => {\n    console.log('Extrayendo nombre de:', text);\n    \n    // Si el texto está vacío o no es una cadena\n    if (!text || typeof text !== 'string') {\n      console.log('Texto vacío o no es cadena, usando nombre genérico');\n      return 'Estimado participante';\n    }\n    \n    // Eliminar signos de puntuación y normalizar texto\n    const normalizedText = text.replace(/[.,;:¡!¿?]/g, '').trim();\n    \n    // Frases comunes al indicar un nombre\n    const namePhrases = [\n      'me llamo', 'mi nombre es', 'soy', 'yo soy', \n      'puedes llamarme', 'puede llamarme', 'llámame', 'llamame'\n    ];\n    \n    // Buscar frases de presentación\n    let cleanedText = normalizedText;\n    for (const phrase of namePhrases) {\n      if (normalizedText.toLowerCase().includes(phrase)) {\n        // Extraer texto después de la frase de presentación\n        const parts = normalizedText.toLowerCase().split(phrase);\n        if (parts.length > 1 && parts[1].trim()) {\n          cleanedText = parts[1].trim();\n          console.log(`Frase de presentación '${phrase}' encontrada, texto limpio: '${cleanedText}'`);\n          break;\n        }\n      }\n    }\n    \n    // Palabras comunes para ignorar al final\n    const commonWords = ['gracias', 'por favor', 'aquí', 'señor', 'señora', 'mucho gusto'];\n    for (const word of commonWords) {\n      if (cleanedText.toLowerCase().endsWith(word)) {\n        cleanedText = cleanedText.slice(0, -(word.length)).trim();\n      }\n    }\n    \n    // Si el texto limpio está vacío, usar el original\n    if (!cleanedText) {\n      cleanedText = normalizedText;\n    }\n    \n    // Obtener las palabras del texto\n    const words = cleanedText.split(/\\s+/);\n    \n    // Si solo hay una palabra, asumimos que es el nombre\n    if (words.length === 1) {\n      const name = words[0];\n      console.log('Nombre extraído (una palabra):', name);\n      // Capitalizar primera letra\n      return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n    }\n    \n    // Si hay más palabras, tomar hasta 3 palabras como nombre completo\n    const nameWords = words.slice(0, Math.min(3, words.length));\n    let extractedName = nameWords.join(' ');\n    \n    // Capitalizar cada palabra\n    extractedName = extractedName.split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n    \n    console.log('Nombre extraído (múltiples palabras):', extractedName);\n    return extractedName;\n  };\n\n  // Función para guardar respuesta y pasar a la siguiente pregunta\n  const saveResponse = (value) => {\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = {\n      value,\n      timestamp: new Date().toISOString(),\n      index: currentQuestionIndex\n    };\n    setResponses(updatedResponses);\n\n    // Verificar si hay más preguntas\n    if (currentQuestionIndex < survey.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Fin de la encuesta\n      setCurrentStep('thanks');\n    }\n  };\n\n  // Manejar clic en botón de micrófono\n  const handleMicrophoneClick = () => {\n    if (isListening) {\n      setIsListening(false);\n    } else {\n      startListening();\n    }\n  };\n\n  // Manejar clic en botones de opciones \n  const handleOptionClick = (value) => {\n    if (isListening) return;\n\n    processResponse(value);\n  };\n\n  // Solicitar permisos de micrófono\n  const requestMicrophonePermission = async () => {\n    try {\n      const permission = await checkMicrophonePermission();\n      setMicrophonePermission(permission);\n\n      if (permission) {\n        // Iniciar la encuesta si se conceden los permisos\n        setCurrentStep('welcome');\n      } else {\n        setErrorMessage('No se pudo obtener permiso para el micrófono. Por favor, permita el acceso en la configuración de su navegador.');\n      }\n    } catch (error) {\n      console.error('Error al solicitar permisos de micrófono:', error);\n      setErrorMessage('Error al solicitar permisos de micrófono.');\n    }\n  };\n\n  // Función centralizada para solicitar síntesis de voz\n  const speakText = async (text) => {\n    if (!text) return Promise.resolve();\n    console.log('Solicitando síntesis de voz para:', text);\n    \n    // Evitar interrupción de síntesis en curso y garantizar una experiencia fluida\n    return new Promise((resolve) => {\n      setVoiceText(text);\n      setIsSpeaking(true);\n      \n      // Usar AudioService para hablar\n      AudioService.speakText(\n        text, \n        // onStarted\n        () => {\n          console.log('Síntesis de voz iniciada para:', text);\n        },\n        // onEnded\n        () => {\n          console.log('Síntesis de voz completada para:', text);\n          setIsSpeaking(false);\n          if (speakEndCallback) {\n            speakEndCallback();\n            setSpeakEndCallback(null);\n          }\n          resolve();\n        },\n        // onError\n        (error) => {\n          console.error('Error en síntesis de voz:', error);\n          setIsSpeaking(false);\n          setErrorMessage(`Error en síntesis: ${error}`);\n          resolve();\n        }\n      );\n    });\n  };\n\n  useEffect(() => {\n    setStartTime(new Date());\n  }, []);\n\n  // Función para repetir la pregunta actual\n  const repeatQuestion = async () => {\n    try {\n      if (currentStep === 'questions' && survey && survey.questions) {\n        // Detener cualquier síntesis o escucha en curso\n        if (isListening) {\n          // Detener escucha si está activa\n          setIsListening(false);\n        }\n        \n        const currentQuestion = survey.questions[currentQuestionIndex];\n        if (currentQuestion) {\n          // Construir el mensaje de la pregunta\n          const questionText = `La pregunta es: ${currentQuestion.text}`;\n          \n          // Hablar la pregunta\n          await speakText(questionText);\n          \n          // Esperar un momento antes de comenzar a escuchar\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Iniciar escucha para la respuesta\n          startListening();\n        }\n      }\n    } catch (error) {\n      console.error('Error al repetir la pregunta:', error);\n      setErrorMessage('Ocurrió un error al repetir la pregunta.');\n    }\n  };\n\n  return (\n    <div className=\"max-w-5xl mx-auto p-4\">\n      {loading ? (\n        <div className=\"flex justify-center my-12\">\n          <FaSpinner className=\"animate-spin h-12 w-12 text-blue-500\" />\n          <span className=\"sr-only\">Cargando...</span>\n        </div>\n      ) : errorMessage ? (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded my-4\">\n          <p>{errorMessage}</p>\n          <button \n            onClick={() => window.location.reload()} \n            className=\"mt-2 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\"\n          >\n            Reintentar\n          </button>\n        </div>\n      ) : currentStep === 'thanks' ? (\n        <div className=\"text-center my-8\">\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">¡Gracias por completar la encuesta!</h2>\n          <p className=\"text-lg text-gray-600 mb-8\">Sus respuestas han sido registradas correctamente.</p>\n          <button\n            onClick={() => navigate('/surveys')}\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n          >\n            Volver al inicio\n          </button>\n        </div>\n      ) : (\n        <div className=\"bg-white shadow-md rounded-lg p-6\">\n          <h1 className=\"text-2xl font-bold text-center mb-6\">{survey?.title}</h1>\n          \n          {/* Mostrar estado actual */}\n          <div className=\"mb-4 p-2 bg-gray-100 rounded\">\n            {currentStep === 'initial' && <p>Iniciando encuesta...</p>}\n            {currentStep === 'name' && <p>Por favor, diga su nombre</p>}\n            {currentStep === 'questions' && (\n              <p>\n                Pregunta {currentQuestionIndex + 1} de {survey?.questions?.length || 0}\n              </p>\n            )}\n          </div>\n          \n          {/* Mostrar pregunta actual o solicitud de nombre */}\n          <div className=\"my-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n            {currentStep === 'name' ? (\n              <h2 className=\"text-xl font-semibold text-blue-800\">\n                Por favor, diga su nombre\n              </h2>\n            ) : currentStep === 'questions' && survey?.questions ? (\n              <div>\n                <h2 className=\"text-xl font-semibold text-blue-800\">\n                  {survey.questions[currentQuestionIndex]?.text}\n                </h2>\n                {survey.questions[currentQuestionIndex]?.options && (\n                  <div className=\"mt-4 grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {survey.questions[currentQuestionIndex].options.map((option, index) => (\n                      <button\n                        key={index}\n                        onClick={() => handleOptionClick(option)}\n                        className=\"bg-white border border-blue-300 p-3 rounded hover:bg-blue-100 transition\"\n                      >\n                        {option}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ) : null}\n          </div>\n          \n          {/* Controles de voz manuales */}\n          <div className=\"my-6 flex justify-center space-x-4\">\n            <button \n              onClick={() => startListening()}\n              disabled={isSpeaking || isListening}\n              className={`p-4 rounded-full ${isListening \n                ? 'bg-red-500 text-white animate-pulse' \n                : 'bg-blue-500 text-white hover:bg-blue-600'}`}\n              title=\"Empezar a escuchar\"\n            >\n              <FaMicrophone className=\"h-6 w-6\" />\n              <span className=\"sr-only\">Escuchar</span>\n            </button>\n            \n            {transcript && (\n              <button \n                onClick={() => processResponse(transcript)}\n                className=\"p-4 rounded-full bg-green-500 text-white hover:bg-green-600\"\n                title=\"Confirmar respuesta\"\n              >\n                <FaCheckCircle className=\"h-6 w-6\" />\n                <span className=\"sr-only\">Confirmar</span>\n              </button>\n            )}\n            \n            {currentStep === 'questions' && (\n              <button \n                onClick={() => repeatQuestion()}\n                className=\"p-4 rounded-full bg-yellow-500 text-white hover:bg-yellow-600\"\n                title=\"Repetir pregunta\"\n              >\n                <FaVolumeUp className=\"h-6 w-6\" />\n                <span className=\"sr-only\">Repetir</span>\n              </button>\n            )}\n          </div>\n          \n          {/* Mostrar la transcripción */}\n          {transcript && (\n            <div className=\"my-4 p-3 bg-gray-100 rounded\">\n              <p className=\"text-lg\">\n                <span className=\"font-semibold\">Su respuesta:</span> {transcript}\n              </p>\n            </div>\n          )}\n          \n          {/* Estado del reconocimiento */}\n          <div className=\"my-2 text-center\">\n            {isListening && (\n              <p className=\"text-sm text-blue-500 animate-pulse flex items-center justify-center\">\n                <span className=\"mr-2\">Escuchando</span>\n                <span className=\"flex space-x-1\">\n                  <span className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></span>\n                  <span className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></span>\n                  <span className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></span>\n                </span>\n              </p>\n            )}\n            {isSpeaking && (\n              <p className=\"text-sm text-green-500 animate-pulse flex items-center justify-center\">\n                <FaVolumeUp className=\"mr-2\" />\n                Hablando...\n              </p>\n            )}\n          </div>\n          \n          {/* Instrucciones para el usuario */}\n          <div className=\"mt-10 text-sm text-gray-600 bg-gray-50 p-4 rounded\">\n            <h3 className=\"font-bold mb-2\">Instrucciones:</h3>\n            <ul className=\"list-disc pl-5 space-y-1\">\n              <li>Hable con claridad para que el sistema pueda entenderle correctamente</li>\n              <li>Puede usar los botones de control para una experiencia más fluida</li>\n              <li>Si tiene problemas, haga clic en el botón del micrófono para reintentar</li>\n            </ul>\n          </div>\n        </div>\n      )}\n      \n      {/* No necesitamos renderizar un componente de voz ya que usamos el servicio directamente */}\n      {isSpeaking && (\n        <div className=\"fixed bottom-0 left-0 right-0 bg-green-100 text-green-800 p-2 text-center\">\n          <FaVolumeUp className=\"inline-block mr-2\" />\n          Hablando...\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TakeSurvey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}