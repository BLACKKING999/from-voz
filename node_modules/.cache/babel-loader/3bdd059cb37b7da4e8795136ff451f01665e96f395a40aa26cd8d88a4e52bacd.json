{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\Sistema de Encuestas por Voz\\\\client\\\\src\\\\components\\\\SimpleVoice.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n/**\n * Componente automático para síntesis de voz\n * Habla automáticamente al montarse y notifica cuando termina\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleVoice = ({\n  text,\n  onSpeakEnd,\n  autoPlay = true\n}) => {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  // Efecto para iniciar la síntesis de voz automáticamente\n  useEffect(() => {\n    if (autoPlay && text) {\n      speak();\n    }\n  }, [text]);\n  const speak = () => {\n    if (!window.speechSynthesis) {\n      console.error(\"Speech synthesis no está disponible en este navegador\");\n      return;\n    }\n\n    // Cancelar cualquier síntesis anterior\n    window.speechSynthesis.cancel();\n\n    // Crear un nuevo utterance\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = 'es-ES';\n    utterance.rate = 1;\n    utterance.pitch = 1;\n    utterance.volume = 1;\n\n    // Configurar eventos\n    setIsSpeaking(true);\n    utterance.onend = () => {\n      setIsSpeaking(false);\n      if (onSpeakEnd) {\n        onSpeakEnd();\n      }\n    };\n    utterance.onerror = error => {\n      console.error(\"Error en síntesis de voz:\", error);\n      setIsSpeaking(false);\n    };\n\n    // Hablar automáticamente\n    window.speechSynthesis.speak(utterance);\n  };\n\n  // Ya no mostramos botón, solo un indicador de estado\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-2\",\n    children: isSpeaking && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-primary-500 text-sm animate-pulse\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"inline-block mr-2\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"h-4 w-4\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          stroke: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: 2,\n            d: \"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), \"Escuchando...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleVoice, \"xHOm1rH8C85mxoNN86XvoEU9t2c=\");\n_c = SimpleVoice;\nexport default SimpleVoice;\nvar _c;\n$RefreshReg$(_c, \"SimpleVoice\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SimpleVoice","text","onSpeakEnd","autoPlay","_s","isSpeaking","setIsSpeaking","speak","window","speechSynthesis","console","error","cancel","utterance","SpeechSynthesisUtterance","lang","rate","pitch","volume","onend","onerror","className","children","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/components/SimpleVoice.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n/**\n * Componente automático para síntesis de voz\n * Habla automáticamente al montarse y notifica cuando termina\n */\nconst SimpleVoice = ({ text, onSpeakEnd, autoPlay = true }) => {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  // Efecto para iniciar la síntesis de voz automáticamente\n  useEffect(() => {\n    if (autoPlay && text) {\n      speak();\n    }\n  }, [text]);\n\n  const speak = () => {\n    if (!window.speechSynthesis) {\n      console.error(\"Speech synthesis no está disponible en este navegador\");\n      return;\n    }\n    \n    // Cancelar cualquier síntesis anterior\n    window.speechSynthesis.cancel();\n    \n    // Crear un nuevo utterance\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = 'es-ES';\n    utterance.rate = 1;\n    utterance.pitch = 1;\n    utterance.volume = 1;\n    \n    // Configurar eventos\n    setIsSpeaking(true);\n    \n    utterance.onend = () => {\n      setIsSpeaking(false);\n      if (onSpeakEnd) {\n        onSpeakEnd();\n      }\n    };\n    \n    utterance.onerror = (error) => {\n      console.error(\"Error en síntesis de voz:\", error);\n      setIsSpeaking(false);\n    };\n    \n    // Hablar automáticamente\n    window.speechSynthesis.speak(utterance);\n  };\n\n  // Ya no mostramos botón, solo un indicador de estado\n  return (\n    <div className=\"my-2\">\n      {isSpeaking && (\n        <div className=\"text-primary-500 text-sm animate-pulse\">\n          <span className=\"inline-block mr-2\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\" />\n            </svg>\n          </span>\n          Escuchando...\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SimpleVoice;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,WAAW,GAAGA,CAAC;EAAEC,IAAI;EAAEC,UAAU;EAAEC,QAAQ,GAAG;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIM,QAAQ,IAAIF,IAAI,EAAE;MACpBM,KAAK,CAAC,CAAC;IACT;EACF,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC;EAEV,MAAMM,KAAK,GAAGA,CAAA,KAAM;IAClB,IAAI,CAACC,MAAM,CAACC,eAAe,EAAE;MAC3BC,OAAO,CAACC,KAAK,CAAC,uDAAuD,CAAC;MACtE;IACF;;IAEA;IACAH,MAAM,CAACC,eAAe,CAACG,MAAM,CAAC,CAAC;;IAE/B;IACA,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACb,IAAI,CAAC;IACpDY,SAAS,CAACE,IAAI,GAAG,OAAO;IACxBF,SAAS,CAACG,IAAI,GAAG,CAAC;IAClBH,SAAS,CAACI,KAAK,GAAG,CAAC;IACnBJ,SAAS,CAACK,MAAM,GAAG,CAAC;;IAEpB;IACAZ,aAAa,CAAC,IAAI,CAAC;IAEnBO,SAAS,CAACM,KAAK,GAAG,MAAM;MACtBb,aAAa,CAAC,KAAK,CAAC;MACpB,IAAIJ,UAAU,EAAE;QACdA,UAAU,CAAC,CAAC;MACd;IACF,CAAC;IAEDW,SAAS,CAACO,OAAO,GAAIT,KAAK,IAAK;MAC7BD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDL,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC;;IAED;IACAE,MAAM,CAACC,eAAe,CAACF,KAAK,CAACM,SAAS,CAAC;EACzC,CAAC;;EAED;EACA,oBACEd,OAAA;IAAKsB,SAAS,EAAC,MAAM;IAAAC,QAAA,EAClBjB,UAAU,iBACTN,OAAA;MAAKsB,SAAS,EAAC,wCAAwC;MAAAC,QAAA,gBACrDvB,OAAA;QAAMsB,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eACjCvB,OAAA;UAAKwB,KAAK,EAAC,4BAA4B;UAACF,SAAS,EAAC,SAAS;UAACG,IAAI,EAAC,MAAM;UAACC,OAAO,EAAC,WAAW;UAACC,MAAM,EAAC,cAAc;UAAAJ,QAAA,eAC/GvB,OAAA;YAAM4B,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAACC,WAAW,EAAE,CAAE;YAACC,CAAC,EAAC;UAAwG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7K;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,iBAET;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA5DIJ,WAAW;AAAAmC,EAAA,GAAXnC,WAAW;AA8DjB,eAAeA,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}