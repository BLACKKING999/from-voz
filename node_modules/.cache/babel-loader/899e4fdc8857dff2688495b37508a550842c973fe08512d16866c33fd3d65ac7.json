{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\Sistema de Encuestas por Voz\\\\client\\\\src\\\\components\\\\SimpleVoice.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\n\n/**\n * Componente mejorado para síntesis de voz confiable\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleVoice = ({\n  text,\n  onEnd,\n  autoSpeak = true\n}) => {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [error, setError] = useState(null);\n  const synth = useRef(window.speechSynthesis).current;\n  const utteranceRef = useRef(null);\n\n  // Función principal para hablar texto\n  const speak = () => {\n    // Validar texto y disponibilidad de síntesis\n    if (!text || !text.trim()) {\n      console.warn('SimpleVoice: Se intentó sintetizar texto vacío');\n      if (onEnd) setTimeout(onEnd, 100);\n      return;\n    }\n    if (!synth) {\n      console.error('SimpleVoice: API de síntesis de voz no disponible');\n      setError('Su navegador no soporta la síntesis de voz');\n      if (onEnd) setTimeout(onEnd, 100);\n      return;\n    }\n    try {\n      // Limpiar síntesis anterior\n      synth.cancel();\n\n      // Log de depuración\n      console.log('SimpleVoice: Iniciando síntesis para:', text);\n\n      // Crear y configurar nuevo utterance\n      const utterance = new SpeechSynthesisUtterance(text);\n      utteranceRef.current = utterance;\n\n      // Configurar idioma en español\n      utterance.lang = 'es-ES';\n      utterance.rate = 1.0;\n      utterance.pitch = 1.0;\n      utterance.volume = 1.0;\n\n      // Intentar seleccionar una voz en español\n      setTimeout(() => {\n        const voices = synth.getVoices();\n        const spanishVoice = voices.find(voice => voice.lang.includes('es') || voice.name.includes('Spanish'));\n        if (spanishVoice) {\n          console.log('SimpleVoice: Usando voz española:', spanishVoice.name);\n          utterance.voice = spanishVoice;\n        } else if (voices.length > 0) {\n          console.log('SimpleVoice: No se encontró voz española, usando:', voices[0].name);\n          utterance.voice = voices[0];\n        }\n\n        // Configurar eventos\n        utterance.onstart = () => {\n          console.log('SimpleVoice: Síntesis iniciada');\n          setIsSpeaking(true);\n          setError(null);\n        };\n        utterance.onend = () => {\n          console.log('SimpleVoice: Síntesis finalizada con éxito');\n          setIsSpeaking(false);\n          if (onEnd) setTimeout(onEnd, 300);\n        };\n        utterance.onerror = event => {\n          console.error('SimpleVoice: Error en síntesis:', event);\n          setIsSpeaking(false);\n          setError('Error en la síntesis de voz');\n          if (onEnd) setTimeout(onEnd, 300);\n        };\n\n        // Iniciar síntesis\n        synth.speak(utterance);\n\n        // Workaround para Chrome (bug de pausa después de 15s)\n        const intervalId = setInterval(() => {\n          if (synth.speaking) {\n            console.log('SimpleVoice: Aplicando workaround para Chrome');\n            synth.pause();\n            synth.resume();\n          } else {\n            clearInterval(intervalId);\n          }\n        }, 10000);\n\n        // Workaround para navegadores que no disparan onend\n        const maxDuration = Math.max(5000, text.length * 80);\n        const timeoutId = setTimeout(() => {\n          if (isSpeaking && utteranceRef.current === utterance) {\n            console.log('SimpleVoice: Fallback por timeout después de', maxDuration, 'ms');\n            setIsSpeaking(false);\n            if (onEnd) onEnd();\n          }\n        }, maxDuration);\n\n        // Guardar IDs para limpieza\n        utterance.intervalId = intervalId;\n        utterance.timeoutId = timeoutId;\n      }, 100); // Pequeño retraso para asegurar que las voces estén cargadas\n    } catch (error) {\n      console.error('SimpleVoice: Error al configurar síntesis:', error);\n      setIsSpeaking(false);\n      setError('Error al configurar la síntesis de voz');\n      if (onEnd) setTimeout(onEnd, 100);\n    }\n  };\n\n  // Limpieza de recursos\n  const cleanup = () => {\n    if (utteranceRef.current) {\n      if (utteranceRef.current.intervalId) clearInterval(utteranceRef.current.intervalId);\n      if (utteranceRef.current.timeoutId) clearTimeout(utteranceRef.current.timeoutId);\n    }\n    if (synth) {\n      synth.cancel();\n    }\n  };\n\n  // Efecto para hablar automáticamente cuando cambia el texto\n  useEffect(() => {\n    if (autoSpeak && text) {\n      speak();\n    }\n    return cleanup;\n  }, [text]);\n\n  // Efecto de limpieza al desmontar\n  useEffect(() => {\n    return cleanup;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `voice-synthesis ${isSpeaking ? 'speaking' : ''}`,\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500 text-sm mb-2\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), isSpeaking && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-green-500 text-sm animate-pulse\",\n      children: \"Hablando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleVoice, \"TE6tdxQgo7aHKd+pLF+R+GRCVT0=\");\n_c = SimpleVoice;\nexport default SimpleVoice;\nvar _c;\n$RefreshReg$(_c, \"SimpleVoice\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SimpleVoice","text","onEnd","autoSpeak","_s","isSpeaking","setIsSpeaking","error","setError","synth","window","speechSynthesis","current","utteranceRef","speak","trim","console","warn","setTimeout","cancel","log","utterance","SpeechSynthesisUtterance","lang","rate","pitch","volume","voices","getVoices","spanishVoice","find","voice","includes","name","length","onstart","onend","onerror","event","intervalId","setInterval","speaking","pause","resume","clearInterval","maxDuration","Math","max","timeoutId","cleanup","clearTimeout","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/components/SimpleVoice.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\n/**\n * Componente mejorado para síntesis de voz confiable\n */\nconst SimpleVoice = ({ text, onEnd, autoSpeak = true }) => {\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [error, setError] = useState(null);\n  const synth = useRef(window.speechSynthesis).current;\n  const utteranceRef = useRef(null);\n  \n  // Función principal para hablar texto\n  const speak = () => {\n    // Validar texto y disponibilidad de síntesis\n    if (!text || !text.trim()) {\n      console.warn('SimpleVoice: Se intentó sintetizar texto vacío');\n      if (onEnd) setTimeout(onEnd, 100);\n      return;\n    }\n    \n    if (!synth) {\n      console.error('SimpleVoice: API de síntesis de voz no disponible');\n      setError('Su navegador no soporta la síntesis de voz');\n      if (onEnd) setTimeout(onEnd, 100);\n      return;\n    }\n    \n    try {\n      // Limpiar síntesis anterior\n      synth.cancel();\n      \n      // Log de depuración\n      console.log('SimpleVoice: Iniciando síntesis para:', text);\n      \n      // Crear y configurar nuevo utterance\n      const utterance = new SpeechSynthesisUtterance(text);\n      utteranceRef.current = utterance;\n      \n      // Configurar idioma en español\n      utterance.lang = 'es-ES';\n      utterance.rate = 1.0;\n      utterance.pitch = 1.0;\n      utterance.volume = 1.0;\n      \n      // Intentar seleccionar una voz en español\n      setTimeout(() => {\n        const voices = synth.getVoices();\n        const spanishVoice = voices.find(voice => \n          voice.lang.includes('es') || voice.name.includes('Spanish')\n        );\n        \n        if (spanishVoice) {\n          console.log('SimpleVoice: Usando voz española:', spanishVoice.name);\n          utterance.voice = spanishVoice;\n        } else if (voices.length > 0) {\n          console.log('SimpleVoice: No se encontró voz española, usando:', voices[0].name);\n          utterance.voice = voices[0];\n        }\n        \n        // Configurar eventos\n        utterance.onstart = () => {\n          console.log('SimpleVoice: Síntesis iniciada');\n          setIsSpeaking(true);\n          setError(null);\n        };\n        \n        utterance.onend = () => {\n          console.log('SimpleVoice: Síntesis finalizada con éxito');\n          setIsSpeaking(false);\n          if (onEnd) setTimeout(onEnd, 300);\n        };\n        \n        utterance.onerror = (event) => {\n          console.error('SimpleVoice: Error en síntesis:', event);\n          setIsSpeaking(false);\n          setError('Error en la síntesis de voz');\n          if (onEnd) setTimeout(onEnd, 300);\n        };\n        \n        // Iniciar síntesis\n        synth.speak(utterance);\n        \n        // Workaround para Chrome (bug de pausa después de 15s)\n        const intervalId = setInterval(() => {\n          if (synth.speaking) {\n            console.log('SimpleVoice: Aplicando workaround para Chrome');\n            synth.pause();\n            synth.resume();\n          } else {\n            clearInterval(intervalId);\n          }\n        }, 10000);\n        \n        // Workaround para navegadores que no disparan onend\n        const maxDuration = Math.max(5000, text.length * 80);\n        const timeoutId = setTimeout(() => {\n          if (isSpeaking && utteranceRef.current === utterance) {\n            console.log('SimpleVoice: Fallback por timeout después de', maxDuration, 'ms');\n            setIsSpeaking(false);\n            if (onEnd) onEnd();\n          }\n        }, maxDuration);\n        \n        // Guardar IDs para limpieza\n        utterance.intervalId = intervalId;\n        utterance.timeoutId = timeoutId;\n      }, 100); // Pequeño retraso para asegurar que las voces estén cargadas\n      \n    } catch (error) {\n      console.error('SimpleVoice: Error al configurar síntesis:', error);\n      setIsSpeaking(false);\n      setError('Error al configurar la síntesis de voz');\n      if (onEnd) setTimeout(onEnd, 100);\n    }\n  };\n  \n  // Limpieza de recursos\n  const cleanup = () => {\n    if (utteranceRef.current) {\n      if (utteranceRef.current.intervalId) \n        clearInterval(utteranceRef.current.intervalId);\n      if (utteranceRef.current.timeoutId) \n        clearTimeout(utteranceRef.current.timeoutId);\n    }\n    \n    if (synth) {\n      synth.cancel();\n    }\n  };\n  \n  // Efecto para hablar automáticamente cuando cambia el texto\n  useEffect(() => {\n    if (autoSpeak && text) {\n      speak();\n    }\n    \n    return cleanup;\n  }, [text]);\n  \n  // Efecto de limpieza al desmontar\n  useEffect(() => {\n    return cleanup;\n  }, []);\n  \n  return (\n    <div className={`voice-synthesis ${isSpeaking ? 'speaking' : ''}`}>\n      {error && (\n        <div className=\"text-red-500 text-sm mb-2\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      {isSpeaking && (\n        <div className=\"text-green-500 text-sm animate-pulse\">\n          Hablando...\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SimpleVoice;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}