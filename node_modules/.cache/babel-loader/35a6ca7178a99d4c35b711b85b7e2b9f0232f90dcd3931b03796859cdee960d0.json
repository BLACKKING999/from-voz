{"ast":null,"code":"/**\n * Servicio de síntesis de voz optimizado para navegadores\n * Implementa técnicas avanzadas para mejorar la confiabilidad de la API de Speech Synthesis\n */\n\n// Cache de voces para evitar búsquedas repetidas\nlet cachedVoices = null;\n\n/**\n * Obtiene todas las voces disponibles en el navegador\n */\nconst getVoices = () => {\n  if (cachedVoices) return cachedVoices;\n  return window.speechSynthesis.getVoices();\n};\n\n/**\n * Inicializa el sistema de síntesis y precarga las voces\n * Esto debe llamarse al inicio de la aplicación\n */\nexport const initSpeechSystem = () => {\n  // Verificar si la API está disponible\n  if (!window.speechSynthesis) {\n    console.error('Speech Synthesis no está disponible en este navegador');\n    return false;\n  }\n\n  // Obtener y cachear las voces disponibles\n  const loadVoices = () => {\n    const voices = window.speechSynthesis.getVoices();\n    if (voices.length > 0) {\n      cachedVoices = voices;\n\n      // Log información sobre las voces disponibles\n      console.log(`AudioService: ${voices.length} voces disponibles`);\n\n      // Buscar voces en español\n      const spanishVoices = voices.filter(v => v.lang.includes('es') || v.name.toLowerCase().includes('spanish'));\n      if (spanishVoices.length > 0) {\n        console.log('AudioService: Voces en español disponibles:', spanishVoices.map(v => `${v.name} (${v.lang})`).join(', '));\n      } else {\n        console.warn('AudioService: No se encontraron voces en español');\n      }\n    }\n  };\n\n  // Chrome requiere este evento\n  if (window.speechSynthesis.onvoiceschanged !== undefined) {\n    window.speechSynthesis.onvoiceschanged = loadVoices;\n  }\n\n  // Intentar cargar las voces inmediatamente también\n  loadVoices();\n  return true;\n};\n\n/**\n * Habla el texto dado usando técnicas avanzadas para mejorar la confiabilidad\n */\nexport const speakText = (text, onStarted, onEnded, onError) => {\n  if (!window.speechSynthesis) {\n    if (onError) onError('Speech Synthesis no está disponible en este navegador');\n    return () => {};\n  }\n  if (!text || text.trim() === '') {\n    if (onError) onError('Texto vacío');\n    return () => {};\n  }\n  try {\n    // Limpiar cualquier síntesis en curso\n    window.speechSynthesis.cancel();\n\n    // Crear el objeto de síntesis\n    const utterance = new SpeechSynthesisUtterance(text);\n\n    // Configurar parámetros básicos\n    utterance.lang = 'es-ES';\n    utterance.rate = 1.0; // Velocidad normal\n    utterance.pitch = 1.0; // Tono normal\n    utterance.volume = 1.0; // Volumen máximo\n\n    // Obtener voces y seleccionar una voz en español si está disponible\n    const voices = getVoices();\n    const spanishVoice = voices.find(voice => voice.lang.includes('es') || voice.name.toLowerCase().includes('spanish'));\n    if (spanishVoice) {\n      console.log(`AudioService: Usando voz ${spanishVoice.name}`);\n      utterance.voice = spanishVoice;\n    } else if (voices.length > 0) {\n      console.log(`AudioService: No hay voces en español, usando ${voices[0].name}`);\n      utterance.voice = voices[0];\n    }\n\n    // Configurar eventos\n    utterance.onstart = () => {\n      console.log('AudioService: Síntesis iniciada');\n      if (onStarted) onStarted();\n    };\n    utterance.onend = () => {\n      console.log('AudioService: Síntesis completada');\n      if (onEnded) onEnded();\n    };\n    utterance.onerror = event => {\n      console.error('AudioService: Error en síntesis:', event);\n      if (onError) onError(event.error || 'Error desconocido');\n    };\n\n    // Iniciar síntesis\n    window.speechSynthesis.speak(utterance);\n\n    // *** WORKAROUNDS CRÍTICOS ***\n\n    // 1. Workaround para el problema de Chrome donde la síntesis se detiene después de ~15s\n    const resumeInterval = setInterval(() => {\n      if (window.speechSynthesis.speaking) {\n        console.log('AudioService: Aplicando workaround de pausa/resume');\n        window.speechSynthesis.pause();\n        window.speechSynthesis.resume();\n      } else {\n        clearInterval(resumeInterval);\n      }\n    }, 10000);\n\n    // 2. Workaround para el caso donde onend no se dispara\n    const maxSpeakingTime = Math.max(5000, text.length * 80); // ~80ms por caracter\n    const timeoutId = setTimeout(() => {\n      if (window.speechSynthesis.speaking) {\n        console.log(`AudioService: Detectado posible bloqueo después de ${maxSpeakingTime}ms, forzando finalización`);\n        window.speechSynthesis.cancel();\n        if (onEnded) onEnded();\n      }\n      clearInterval(resumeInterval);\n    }, maxSpeakingTime);\n\n    // Función para detener la síntesis\n    return () => {\n      clearTimeout(timeoutId);\n      clearInterval(resumeInterval);\n      window.speechSynthesis.cancel();\n    };\n  } catch (error) {\n    console.error('AudioService: Error general:', error);\n    if (onError) onError(error.message || 'Error desconocido');\n    return () => {};\n  }\n};\nexport default {\n  initSpeechSystem,\n  speakText\n};","map":{"version":3,"names":["cachedVoices","getVoices","window","speechSynthesis","initSpeechSystem","console","error","loadVoices","voices","length","log","spanishVoices","filter","v","lang","includes","name","toLowerCase","map","join","warn","onvoiceschanged","undefined","speakText","text","onStarted","onEnded","onError","trim","cancel","utterance","SpeechSynthesisUtterance","rate","pitch","volume","spanishVoice","find","voice","onstart","onend","onerror","event","speak","resumeInterval","setInterval","speaking","pause","resume","clearInterval","maxSpeakingTime","Math","max","timeoutId","setTimeout","clearTimeout","message"],"sources":["C:/Users/josep/Documents/Sistema de Encuestas por Voz/client/src/services/audioService.js"],"sourcesContent":["/**\n * Servicio de síntesis de voz optimizado para navegadores\n * Implementa técnicas avanzadas para mejorar la confiabilidad de la API de Speech Synthesis\n */\n\n// Cache de voces para evitar búsquedas repetidas\nlet cachedVoices = null;\n\n/**\n * Obtiene todas las voces disponibles en el navegador\n */\nconst getVoices = () => {\n  if (cachedVoices) return cachedVoices;\n  \n  return window.speechSynthesis.getVoices();\n};\n\n/**\n * Inicializa el sistema de síntesis y precarga las voces\n * Esto debe llamarse al inicio de la aplicación\n */\nexport const initSpeechSystem = () => {\n  // Verificar si la API está disponible\n  if (!window.speechSynthesis) {\n    console.error('Speech Synthesis no está disponible en este navegador');\n    return false;\n  }\n  \n  // Obtener y cachear las voces disponibles\n  const loadVoices = () => {\n    const voices = window.speechSynthesis.getVoices();\n    if (voices.length > 0) {\n      cachedVoices = voices;\n      \n      // Log información sobre las voces disponibles\n      console.log(`AudioService: ${voices.length} voces disponibles`);\n      \n      // Buscar voces en español\n      const spanishVoices = voices.filter(v => \n        v.lang.includes('es') || \n        v.name.toLowerCase().includes('spanish')\n      );\n      \n      if (spanishVoices.length > 0) {\n        console.log('AudioService: Voces en español disponibles:', \n          spanishVoices.map(v => `${v.name} (${v.lang})`).join(', ')\n        );\n      } else {\n        console.warn('AudioService: No se encontraron voces en español');\n      }\n    }\n  };\n  \n  // Chrome requiere este evento\n  if (window.speechSynthesis.onvoiceschanged !== undefined) {\n    window.speechSynthesis.onvoiceschanged = loadVoices;\n  }\n  \n  // Intentar cargar las voces inmediatamente también\n  loadVoices();\n  \n  return true;\n};\n\n/**\n * Habla el texto dado usando técnicas avanzadas para mejorar la confiabilidad\n */\nexport const speakText = (text, onStarted, onEnded, onError) => {\n  if (!window.speechSynthesis) {\n    if (onError) onError('Speech Synthesis no está disponible en este navegador');\n    return () => {};\n  }\n  \n  if (!text || text.trim() === '') {\n    if (onError) onError('Texto vacío');\n    return () => {};\n  }\n  \n  try {\n    // Limpiar cualquier síntesis en curso\n    window.speechSynthesis.cancel();\n    \n    // Crear el objeto de síntesis\n    const utterance = new SpeechSynthesisUtterance(text);\n    \n    // Configurar parámetros básicos\n    utterance.lang = 'es-ES';\n    utterance.rate = 1.0;     // Velocidad normal\n    utterance.pitch = 1.0;    // Tono normal\n    utterance.volume = 1.0;   // Volumen máximo\n    \n    // Obtener voces y seleccionar una voz en español si está disponible\n    const voices = getVoices();\n    const spanishVoice = voices.find(voice => \n      voice.lang.includes('es') || \n      voice.name.toLowerCase().includes('spanish')\n    );\n    \n    if (spanishVoice) {\n      console.log(`AudioService: Usando voz ${spanishVoice.name}`);\n      utterance.voice = spanishVoice;\n    } else if (voices.length > 0) {\n      console.log(`AudioService: No hay voces en español, usando ${voices[0].name}`);\n      utterance.voice = voices[0];\n    }\n    \n    // Configurar eventos\n    utterance.onstart = () => {\n      console.log('AudioService: Síntesis iniciada');\n      if (onStarted) onStarted();\n    };\n    \n    utterance.onend = () => {\n      console.log('AudioService: Síntesis completada');\n      if (onEnded) onEnded();\n    };\n    \n    utterance.onerror = (event) => {\n      console.error('AudioService: Error en síntesis:', event);\n      if (onError) onError(event.error || 'Error desconocido');\n    };\n    \n    // Iniciar síntesis\n    window.speechSynthesis.speak(utterance);\n    \n    // *** WORKAROUNDS CRÍTICOS ***\n    \n    // 1. Workaround para el problema de Chrome donde la síntesis se detiene después de ~15s\n    const resumeInterval = setInterval(() => {\n      if (window.speechSynthesis.speaking) {\n        console.log('AudioService: Aplicando workaround de pausa/resume');\n        window.speechSynthesis.pause();\n        window.speechSynthesis.resume();\n      } else {\n        clearInterval(resumeInterval);\n      }\n    }, 10000);\n    \n    // 2. Workaround para el caso donde onend no se dispara\n    const maxSpeakingTime = Math.max(5000, text.length * 80); // ~80ms por caracter\n    const timeoutId = setTimeout(() => {\n      if (window.speechSynthesis.speaking) {\n        console.log(`AudioService: Detectado posible bloqueo después de ${maxSpeakingTime}ms, forzando finalización`);\n        window.speechSynthesis.cancel();\n        if (onEnded) onEnded();\n      }\n      clearInterval(resumeInterval);\n    }, maxSpeakingTime);\n    \n    // Función para detener la síntesis\n    return () => {\n      clearTimeout(timeoutId);\n      clearInterval(resumeInterval);\n      window.speechSynthesis.cancel();\n    };\n    \n  } catch (error) {\n    console.error('AudioService: Error general:', error);\n    if (onError) onError(error.message || 'Error desconocido');\n    return () => {};\n  }\n};\n\nexport default {\n  initSpeechSystem,\n  speakText\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}